// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/augustin-wien/augustina-backend/ent/item"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description"`
	// Price holds the value of the "Price" field.
	Price float64 `json:"Price"`
	// Image holds the value of the "Image" field.
	Image string `json:"Image"`
	// Archived holds the value of the "Archived" field.
	Archived bool `json:"Archived"`
	// IsLicenseItem holds the value of the "IsLicenseItem" field.
	IsLicenseItem bool `json:"IsLicenseItem"`
	// LicenseGroup holds the value of the "LicenseGroup" field.
	LicenseGroup string `json:"LicenseGroup"`
	// IsPDFItem holds the value of the "IsPDFItem" field.
	IsPDFItem bool `json:"IsPDFItem"`
	// PDF holds the value of the "PDF" field.
	PDF string `json:"PDF"`
	// ItemOrder holds the value of the "ItemOrder" field.
	ItemOrder int `json:"ItemOrder"`
	// ItemColor holds the value of the "ItemColor" field.
	ItemColor string `json:"ItemColor"`
	// ItemTextColor holds the value of the "ItemTextColor" field.
	ItemTextColor string `json:"ItemTextColor"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges        ItemEdges `json:"edges"`
	licenseitem  *int
	selectValues sql.SelectValues
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// LicenseItem holds the value of the LicenseItem edge.
	LicenseItem *Item `json:"LicenseItem,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LicenseItemOrErr returns the LicenseItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) LicenseItemOrErr() (*Item, error) {
	if e.LicenseItem != nil {
		return e.LicenseItem, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: item.Label}
	}
	return nil, &NotLoadedError{edge: "LicenseItem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldArchived, item.FieldIsLicenseItem, item.FieldIsPDFItem:
			values[i] = new(sql.NullBool)
		case item.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case item.FieldID, item.FieldItemOrder:
			values[i] = new(sql.NullInt64)
		case item.FieldName, item.FieldDescription, item.FieldImage, item.FieldLicenseGroup, item.FieldPDF, item.FieldItemColor, item.FieldItemTextColor:
			values[i] = new(sql.NullString)
		case item.ForeignKeys[0]: // licenseitem
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case item.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case item.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case item.FieldPrice:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[j])
			} else if value.Valid {
				i.Price = value.Float64
			}
		case item.FieldImage:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Image", values[j])
			} else if value.Valid {
				i.Image = value.String
			}
		case item.FieldArchived:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Archived", values[j])
			} else if value.Valid {
				i.Archived = value.Bool
			}
		case item.FieldIsLicenseItem:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsLicenseItem", values[j])
			} else if value.Valid {
				i.IsLicenseItem = value.Bool
			}
		case item.FieldLicenseGroup:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LicenseGroup", values[j])
			} else if value.Valid {
				i.LicenseGroup = value.String
			}
		case item.FieldIsPDFItem:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsPDFItem", values[j])
			} else if value.Valid {
				i.IsPDFItem = value.Bool
			}
		case item.FieldPDF:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PDF", values[j])
			} else if value.Valid {
				i.PDF = value.String
			}
		case item.FieldItemOrder:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ItemOrder", values[j])
			} else if value.Valid {
				i.ItemOrder = int(value.Int64)
			}
		case item.FieldItemColor:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ItemColor", values[j])
			} else if value.Valid {
				i.ItemColor = value.String
			}
		case item.FieldItemTextColor:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ItemTextColor", values[j])
			} else if value.Valid {
				i.ItemTextColor = value.String
			}
		case item.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field licenseitem", value)
			} else if value.Valid {
				i.licenseitem = new(int)
				*i.licenseitem = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Item.
// This includes values selected through modifiers, order, etc.
func (i *Item) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryLicenseItem queries the "LicenseItem" edge of the Item entity.
func (i *Item) QueryLicenseItem() *ItemQuery {
	return NewItemClient(i.config).QueryLicenseItem(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return NewItemClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("Name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("Price=")
	builder.WriteString(fmt.Sprintf("%v", i.Price))
	builder.WriteString(", ")
	builder.WriteString("Image=")
	builder.WriteString(i.Image)
	builder.WriteString(", ")
	builder.WriteString("Archived=")
	builder.WriteString(fmt.Sprintf("%v", i.Archived))
	builder.WriteString(", ")
	builder.WriteString("IsLicenseItem=")
	builder.WriteString(fmt.Sprintf("%v", i.IsLicenseItem))
	builder.WriteString(", ")
	builder.WriteString("LicenseGroup=")
	builder.WriteString(i.LicenseGroup)
	builder.WriteString(", ")
	builder.WriteString("IsPDFItem=")
	builder.WriteString(fmt.Sprintf("%v", i.IsPDFItem))
	builder.WriteString(", ")
	builder.WriteString("PDF=")
	builder.WriteString(i.PDF)
	builder.WriteString(", ")
	builder.WriteString("ItemOrder=")
	builder.WriteString(fmt.Sprintf("%v", i.ItemOrder))
	builder.WriteString(", ")
	builder.WriteString("ItemColor=")
	builder.WriteString(i.ItemColor)
	builder.WriteString(", ")
	builder.WriteString("ItemTextColor=")
	builder.WriteString(i.ItemTextColor)
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item
