// Code generated by ent, DO NOT EDIT.

package item

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// FieldIsLicenseItem holds the string denoting the islicenseitem field in the database.
	FieldIsLicenseItem = "islicenseitem"
	// FieldLicenseGroup holds the string denoting the licensegroup field in the database.
	FieldLicenseGroup = "licensegroup"
	// FieldIsPDFItem holds the string denoting the ispdfitem field in the database.
	FieldIsPDFItem = "ispdfitem"
	// FieldPDF holds the string denoting the pdf field in the database.
	FieldPDF = "pdf"
	// FieldItemOrder holds the string denoting the itemorder field in the database.
	FieldItemOrder = "itemorder"
	// FieldItemColor holds the string denoting the itemcolor field in the database.
	FieldItemColor = "itemcolor"
	// FieldItemTextColor holds the string denoting the itemtextcolor field in the database.
	FieldItemTextColor = "itemtextcolor"
	// EdgeLicenseItem holds the string denoting the licenseitem edge name in mutations.
	EdgeLicenseItem = "LicenseItem"
	// Table holds the table name of the item in the database.
	Table = "item"
	// LicenseItemTable is the table that holds the LicenseItem relation/edge.
	LicenseItemTable = "item"
	// LicenseItemColumn is the table column denoting the LicenseItem relation/edge.
	LicenseItemColumn = "licenseitem"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPrice,
	FieldImage,
	FieldArchived,
	FieldIsLicenseItem,
	FieldLicenseGroup,
	FieldIsPDFItem,
	FieldPDF,
	FieldItemOrder,
	FieldItemColor,
	FieldItemTextColor,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "item"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"licenseitem",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "Description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// PriceValidator is a validator for the "Price" field. It is called by the builders before save.
	PriceValidator func(float64) error
	// ImageValidator is a validator for the "Image" field. It is called by the builders before save.
	ImageValidator func(string) error
	// DefaultArchived holds the default value on creation for the "Archived" field.
	DefaultArchived bool
	// DefaultIsLicenseItem holds the default value on creation for the "IsLicenseItem" field.
	DefaultIsLicenseItem bool
	// DefaultLicenseGroup holds the default value on creation for the "LicenseGroup" field.
	DefaultLicenseGroup string
	// DefaultIsPDFItem holds the default value on creation for the "IsPDFItem" field.
	DefaultIsPDFItem bool
	// DefaultPDF holds the default value on creation for the "PDF" field.
	DefaultPDF string
	// DefaultItemOrder holds the default value on creation for the "ItemOrder" field.
	DefaultItemOrder int
	// DefaultItemColor holds the default value on creation for the "ItemColor" field.
	DefaultItemColor string
	// DefaultItemTextColor holds the default value on creation for the "ItemTextColor" field.
	DefaultItemTextColor string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Item queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the Description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrice orders the results by the Price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByImage orders the results by the Image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByArchived orders the results by the Archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByIsLicenseItem orders the results by the IsLicenseItem field.
func ByIsLicenseItem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLicenseItem, opts...).ToFunc()
}

// ByLicenseGroup orders the results by the LicenseGroup field.
func ByLicenseGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseGroup, opts...).ToFunc()
}

// ByIsPDFItem orders the results by the IsPDFItem field.
func ByIsPDFItem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPDFItem, opts...).ToFunc()
}

// ByPDF orders the results by the PDF field.
func ByPDF(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPDF, opts...).ToFunc()
}

// ByItemOrder orders the results by the ItemOrder field.
func ByItemOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemOrder, opts...).ToFunc()
}

// ByItemColor orders the results by the ItemColor field.
func ByItemColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemColor, opts...).ToFunc()
}

// ByItemTextColor orders the results by the ItemTextColor field.
func ByItemTextColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemTextColor, opts...).ToFunc()
}

// ByLicenseItemField orders the results by LicenseItem field.
func ByLicenseItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLicenseItemStep(), sql.OrderByField(field, opts...))
	}
}
func newLicenseItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, LicenseItemTable, LicenseItemColumn),
	)
}
