// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/augustin-wien/augustina-backend/ent/item"
	"github.com/augustin-wien/augustina-backend/ent/predicate"
	"github.com/augustin-wien/augustina-backend/ent/settings"
)

// SettingsUpdate is the builder for updating Settings entities.
type SettingsUpdate struct {
	config
	hooks    []Hook
	mutation *SettingsMutation
}

// Where appends a list predicates to the SettingsUpdate builder.
func (su *SettingsUpdate) Where(ps ...predicate.Settings) *SettingsUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAGBUrl sets the "AGBUrl" field.
func (su *SettingsUpdate) SetAGBUrl(s string) *SettingsUpdate {
	su.mutation.SetAGBUrl(s)
	return su
}

// SetNillableAGBUrl sets the "AGBUrl" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableAGBUrl(s *string) *SettingsUpdate {
	if s != nil {
		su.SetAGBUrl(*s)
	}
	return su
}

// SetColor sets the "Color" field.
func (su *SettingsUpdate) SetColor(s string) *SettingsUpdate {
	su.mutation.SetColor(s)
	return su
}

// SetNillableColor sets the "Color" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableColor(s *string) *SettingsUpdate {
	if s != nil {
		su.SetColor(*s)
	}
	return su
}

// SetFontColor sets the "FontColor" field.
func (su *SettingsUpdate) SetFontColor(s string) *SettingsUpdate {
	su.mutation.SetFontColor(s)
	return su
}

// SetNillableFontColor sets the "FontColor" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableFontColor(s *string) *SettingsUpdate {
	if s != nil {
		su.SetFontColor(*s)
	}
	return su
}

// SetLogo sets the "Logo" field.
func (su *SettingsUpdate) SetLogo(s string) *SettingsUpdate {
	su.mutation.SetLogo(s)
	return su
}

// SetNillableLogo sets the "Logo" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableLogo(s *string) *SettingsUpdate {
	if s != nil {
		su.SetLogo(*s)
	}
	return su
}

// SetMaxOrderAmount sets the "MaxOrderAmount" field.
func (su *SettingsUpdate) SetMaxOrderAmount(i int) *SettingsUpdate {
	su.mutation.ResetMaxOrderAmount()
	su.mutation.SetMaxOrderAmount(i)
	return su
}

// SetNillableMaxOrderAmount sets the "MaxOrderAmount" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableMaxOrderAmount(i *int) *SettingsUpdate {
	if i != nil {
		su.SetMaxOrderAmount(*i)
	}
	return su
}

// AddMaxOrderAmount adds i to the "MaxOrderAmount" field.
func (su *SettingsUpdate) AddMaxOrderAmount(i int) *SettingsUpdate {
	su.mutation.AddMaxOrderAmount(i)
	return su
}

// SetOrgaCoversTransactionCosts sets the "OrgaCoversTransactionCosts" field.
func (su *SettingsUpdate) SetOrgaCoversTransactionCosts(b bool) *SettingsUpdate {
	su.mutation.SetOrgaCoversTransactionCosts(b)
	return su
}

// SetNillableOrgaCoversTransactionCosts sets the "OrgaCoversTransactionCosts" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableOrgaCoversTransactionCosts(b *bool) *SettingsUpdate {
	if b != nil {
		su.SetOrgaCoversTransactionCosts(*b)
	}
	return su
}

// SetWebshopIsClosed sets the "WebshopIsClosed" field.
func (su *SettingsUpdate) SetWebshopIsClosed(b bool) *SettingsUpdate {
	su.mutation.SetWebshopIsClosed(b)
	return su
}

// SetNillableWebshopIsClosed sets the "WebshopIsClosed" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableWebshopIsClosed(b *bool) *SettingsUpdate {
	if b != nil {
		su.SetWebshopIsClosed(*b)
	}
	return su
}

// SetVendorNotFoundHelpUrl sets the "VendorNotFoundHelpUrl" field.
func (su *SettingsUpdate) SetVendorNotFoundHelpUrl(s string) *SettingsUpdate {
	su.mutation.SetVendorNotFoundHelpUrl(s)
	return su
}

// SetNillableVendorNotFoundHelpUrl sets the "VendorNotFoundHelpUrl" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableVendorNotFoundHelpUrl(s *string) *SettingsUpdate {
	if s != nil {
		su.SetVendorNotFoundHelpUrl(*s)
	}
	return su
}

// SetMaintainanceModeHelpUrl sets the "MaintainanceModeHelpUrl" field.
func (su *SettingsUpdate) SetMaintainanceModeHelpUrl(s string) *SettingsUpdate {
	su.mutation.SetMaintainanceModeHelpUrl(s)
	return su
}

// SetNillableMaintainanceModeHelpUrl sets the "MaintainanceModeHelpUrl" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableMaintainanceModeHelpUrl(s *string) *SettingsUpdate {
	if s != nil {
		su.SetMaintainanceModeHelpUrl(*s)
	}
	return su
}

// SetVendorEmailPostfix sets the "VendorEmailPostfix" field.
func (su *SettingsUpdate) SetVendorEmailPostfix(s string) *SettingsUpdate {
	su.mutation.SetVendorEmailPostfix(s)
	return su
}

// SetNillableVendorEmailPostfix sets the "VendorEmailPostfix" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableVendorEmailPostfix(s *string) *SettingsUpdate {
	if s != nil {
		su.SetVendorEmailPostfix(*s)
	}
	return su
}

// SetNewspaperName sets the "NewspaperName" field.
func (su *SettingsUpdate) SetNewspaperName(s string) *SettingsUpdate {
	su.mutation.SetNewspaperName(s)
	return su
}

// SetNillableNewspaperName sets the "NewspaperName" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableNewspaperName(s *string) *SettingsUpdate {
	if s != nil {
		su.SetNewspaperName(*s)
	}
	return su
}

// SetQRCodeUrl sets the "QRCodeUrl" field.
func (su *SettingsUpdate) SetQRCodeUrl(s string) *SettingsUpdate {
	su.mutation.SetQRCodeUrl(s)
	return su
}

// SetNillableQRCodeUrl sets the "QRCodeUrl" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableQRCodeUrl(s *string) *SettingsUpdate {
	if s != nil {
		su.SetQRCodeUrl(*s)
	}
	return su
}

// SetQRCodeLogoImgUrl sets the "QRCodeLogoImgUrl" field.
func (su *SettingsUpdate) SetQRCodeLogoImgUrl(s string) *SettingsUpdate {
	su.mutation.SetQRCodeLogoImgUrl(s)
	return su
}

// SetNillableQRCodeLogoImgUrl sets the "QRCodeLogoImgUrl" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableQRCodeLogoImgUrl(s *string) *SettingsUpdate {
	if s != nil {
		su.SetQRCodeLogoImgUrl(*s)
	}
	return su
}

// SetMapCenterLat sets the "MapCenterLat" field.
func (su *SettingsUpdate) SetMapCenterLat(f float64) *SettingsUpdate {
	su.mutation.ResetMapCenterLat()
	su.mutation.SetMapCenterLat(f)
	return su
}

// SetNillableMapCenterLat sets the "MapCenterLat" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableMapCenterLat(f *float64) *SettingsUpdate {
	if f != nil {
		su.SetMapCenterLat(*f)
	}
	return su
}

// AddMapCenterLat adds f to the "MapCenterLat" field.
func (su *SettingsUpdate) AddMapCenterLat(f float64) *SettingsUpdate {
	su.mutation.AddMapCenterLat(f)
	return su
}

// SetMapCenterLong sets the "MapCenterLong" field.
func (su *SettingsUpdate) SetMapCenterLong(f float64) *SettingsUpdate {
	su.mutation.ResetMapCenterLong()
	su.mutation.SetMapCenterLong(f)
	return su
}

// SetNillableMapCenterLong sets the "MapCenterLong" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableMapCenterLong(f *float64) *SettingsUpdate {
	if f != nil {
		su.SetMapCenterLong(*f)
	}
	return su
}

// AddMapCenterLong adds f to the "MapCenterLong" field.
func (su *SettingsUpdate) AddMapCenterLong(f float64) *SettingsUpdate {
	su.mutation.AddMapCenterLong(f)
	return su
}

// SetUseVendorLicenseIdInShop sets the "UseVendorLicenseIdInShop" field.
func (su *SettingsUpdate) SetUseVendorLicenseIdInShop(b bool) *SettingsUpdate {
	su.mutation.SetUseVendorLicenseIdInShop(b)
	return su
}

// SetNillableUseVendorLicenseIdInShop sets the "UseVendorLicenseIdInShop" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableUseVendorLicenseIdInShop(b *bool) *SettingsUpdate {
	if b != nil {
		su.SetUseVendorLicenseIdInShop(*b)
	}
	return su
}

// SetFavicon sets the "Favicon" field.
func (su *SettingsUpdate) SetFavicon(s string) *SettingsUpdate {
	su.mutation.SetFavicon(s)
	return su
}

// SetNillableFavicon sets the "Favicon" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableFavicon(s *string) *SettingsUpdate {
	if s != nil {
		su.SetFavicon(*s)
	}
	return su
}

// SetQRCodeSettings sets the "QRCodeSettings" field.
func (su *SettingsUpdate) SetQRCodeSettings(s string) *SettingsUpdate {
	su.mutation.SetQRCodeSettings(s)
	return su
}

// SetNillableQRCodeSettings sets the "QRCodeSettings" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableQRCodeSettings(s *string) *SettingsUpdate {
	if s != nil {
		su.SetQRCodeSettings(*s)
	}
	return su
}

// SetQRCodeEnableLogo sets the "QRCodeEnableLogo" field.
func (su *SettingsUpdate) SetQRCodeEnableLogo(b bool) *SettingsUpdate {
	su.mutation.SetQRCodeEnableLogo(b)
	return su
}

// SetNillableQRCodeEnableLogo sets the "QRCodeEnableLogo" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableQRCodeEnableLogo(b *bool) *SettingsUpdate {
	if b != nil {
		su.SetQRCodeEnableLogo(*b)
	}
	return su
}

// SetUseTipInsteadOfDonation sets the "UseTipInsteadOfDonation" field.
func (su *SettingsUpdate) SetUseTipInsteadOfDonation(b bool) *SettingsUpdate {
	su.mutation.SetUseTipInsteadOfDonation(b)
	return su
}

// SetNillableUseTipInsteadOfDonation sets the "UseTipInsteadOfDonation" field if the given value is not nil.
func (su *SettingsUpdate) SetNillableUseTipInsteadOfDonation(b *bool) *SettingsUpdate {
	if b != nil {
		su.SetUseTipInsteadOfDonation(*b)
	}
	return su
}

// SetMainItemID sets the "MainItem" edge to the Item entity by ID.
func (su *SettingsUpdate) SetMainItemID(id int) *SettingsUpdate {
	su.mutation.SetMainItemID(id)
	return su
}

// SetNillableMainItemID sets the "MainItem" edge to the Item entity by ID if the given value is not nil.
func (su *SettingsUpdate) SetNillableMainItemID(id *int) *SettingsUpdate {
	if id != nil {
		su = su.SetMainItemID(*id)
	}
	return su
}

// SetMainItem sets the "MainItem" edge to the Item entity.
func (su *SettingsUpdate) SetMainItem(i *Item) *SettingsUpdate {
	return su.SetMainItemID(i.ID)
}

// Mutation returns the SettingsMutation object of the builder.
func (su *SettingsUpdate) Mutation() *SettingsMutation {
	return su.mutation
}

// ClearMainItem clears the "MainItem" edge to the Item entity.
func (su *SettingsUpdate) ClearMainItem() *SettingsUpdate {
	su.mutation.ClearMainItem()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettingsUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettingsUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.AGBUrl(); ok {
		_spec.SetField(settings.FieldAGBUrl, field.TypeString, value)
	}
	if value, ok := su.mutation.Color(); ok {
		_spec.SetField(settings.FieldColor, field.TypeString, value)
	}
	if value, ok := su.mutation.FontColor(); ok {
		_spec.SetField(settings.FieldFontColor, field.TypeString, value)
	}
	if value, ok := su.mutation.Logo(); ok {
		_spec.SetField(settings.FieldLogo, field.TypeString, value)
	}
	if value, ok := su.mutation.MaxOrderAmount(); ok {
		_spec.SetField(settings.FieldMaxOrderAmount, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedMaxOrderAmount(); ok {
		_spec.AddField(settings.FieldMaxOrderAmount, field.TypeInt, value)
	}
	if value, ok := su.mutation.OrgaCoversTransactionCosts(); ok {
		_spec.SetField(settings.FieldOrgaCoversTransactionCosts, field.TypeBool, value)
	}
	if value, ok := su.mutation.WebshopIsClosed(); ok {
		_spec.SetField(settings.FieldWebshopIsClosed, field.TypeBool, value)
	}
	if value, ok := su.mutation.VendorNotFoundHelpUrl(); ok {
		_spec.SetField(settings.FieldVendorNotFoundHelpUrl, field.TypeString, value)
	}
	if value, ok := su.mutation.MaintainanceModeHelpUrl(); ok {
		_spec.SetField(settings.FieldMaintainanceModeHelpUrl, field.TypeString, value)
	}
	if value, ok := su.mutation.VendorEmailPostfix(); ok {
		_spec.SetField(settings.FieldVendorEmailPostfix, field.TypeString, value)
	}
	if value, ok := su.mutation.NewspaperName(); ok {
		_spec.SetField(settings.FieldNewspaperName, field.TypeString, value)
	}
	if value, ok := su.mutation.QRCodeUrl(); ok {
		_spec.SetField(settings.FieldQRCodeUrl, field.TypeString, value)
	}
	if value, ok := su.mutation.QRCodeLogoImgUrl(); ok {
		_spec.SetField(settings.FieldQRCodeLogoImgUrl, field.TypeString, value)
	}
	if value, ok := su.mutation.MapCenterLat(); ok {
		_spec.SetField(settings.FieldMapCenterLat, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedMapCenterLat(); ok {
		_spec.AddField(settings.FieldMapCenterLat, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.MapCenterLong(); ok {
		_spec.SetField(settings.FieldMapCenterLong, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedMapCenterLong(); ok {
		_spec.AddField(settings.FieldMapCenterLong, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.UseVendorLicenseIdInShop(); ok {
		_spec.SetField(settings.FieldUseVendorLicenseIdInShop, field.TypeBool, value)
	}
	if value, ok := su.mutation.Favicon(); ok {
		_spec.SetField(settings.FieldFavicon, field.TypeString, value)
	}
	if value, ok := su.mutation.QRCodeSettings(); ok {
		_spec.SetField(settings.FieldQRCodeSettings, field.TypeString, value)
	}
	if value, ok := su.mutation.QRCodeEnableLogo(); ok {
		_spec.SetField(settings.FieldQRCodeEnableLogo, field.TypeBool, value)
	}
	if value, ok := su.mutation.UseTipInsteadOfDonation(); ok {
		_spec.SetField(settings.FieldUseTipInsteadOfDonation, field.TypeBool, value)
	}
	if su.mutation.MainItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   settings.MainItemTable,
			Columns: []string{settings.MainItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MainItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   settings.MainItemTable,
			Columns: []string{settings.MainItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SettingsUpdateOne is the builder for updating a single Settings entity.
type SettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingsMutation
}

// SetAGBUrl sets the "AGBUrl" field.
func (suo *SettingsUpdateOne) SetAGBUrl(s string) *SettingsUpdateOne {
	suo.mutation.SetAGBUrl(s)
	return suo
}

// SetNillableAGBUrl sets the "AGBUrl" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableAGBUrl(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetAGBUrl(*s)
	}
	return suo
}

// SetColor sets the "Color" field.
func (suo *SettingsUpdateOne) SetColor(s string) *SettingsUpdateOne {
	suo.mutation.SetColor(s)
	return suo
}

// SetNillableColor sets the "Color" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableColor(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetColor(*s)
	}
	return suo
}

// SetFontColor sets the "FontColor" field.
func (suo *SettingsUpdateOne) SetFontColor(s string) *SettingsUpdateOne {
	suo.mutation.SetFontColor(s)
	return suo
}

// SetNillableFontColor sets the "FontColor" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableFontColor(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetFontColor(*s)
	}
	return suo
}

// SetLogo sets the "Logo" field.
func (suo *SettingsUpdateOne) SetLogo(s string) *SettingsUpdateOne {
	suo.mutation.SetLogo(s)
	return suo
}

// SetNillableLogo sets the "Logo" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableLogo(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetLogo(*s)
	}
	return suo
}

// SetMaxOrderAmount sets the "MaxOrderAmount" field.
func (suo *SettingsUpdateOne) SetMaxOrderAmount(i int) *SettingsUpdateOne {
	suo.mutation.ResetMaxOrderAmount()
	suo.mutation.SetMaxOrderAmount(i)
	return suo
}

// SetNillableMaxOrderAmount sets the "MaxOrderAmount" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableMaxOrderAmount(i *int) *SettingsUpdateOne {
	if i != nil {
		suo.SetMaxOrderAmount(*i)
	}
	return suo
}

// AddMaxOrderAmount adds i to the "MaxOrderAmount" field.
func (suo *SettingsUpdateOne) AddMaxOrderAmount(i int) *SettingsUpdateOne {
	suo.mutation.AddMaxOrderAmount(i)
	return suo
}

// SetOrgaCoversTransactionCosts sets the "OrgaCoversTransactionCosts" field.
func (suo *SettingsUpdateOne) SetOrgaCoversTransactionCosts(b bool) *SettingsUpdateOne {
	suo.mutation.SetOrgaCoversTransactionCosts(b)
	return suo
}

// SetNillableOrgaCoversTransactionCosts sets the "OrgaCoversTransactionCosts" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableOrgaCoversTransactionCosts(b *bool) *SettingsUpdateOne {
	if b != nil {
		suo.SetOrgaCoversTransactionCosts(*b)
	}
	return suo
}

// SetWebshopIsClosed sets the "WebshopIsClosed" field.
func (suo *SettingsUpdateOne) SetWebshopIsClosed(b bool) *SettingsUpdateOne {
	suo.mutation.SetWebshopIsClosed(b)
	return suo
}

// SetNillableWebshopIsClosed sets the "WebshopIsClosed" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableWebshopIsClosed(b *bool) *SettingsUpdateOne {
	if b != nil {
		suo.SetWebshopIsClosed(*b)
	}
	return suo
}

// SetVendorNotFoundHelpUrl sets the "VendorNotFoundHelpUrl" field.
func (suo *SettingsUpdateOne) SetVendorNotFoundHelpUrl(s string) *SettingsUpdateOne {
	suo.mutation.SetVendorNotFoundHelpUrl(s)
	return suo
}

// SetNillableVendorNotFoundHelpUrl sets the "VendorNotFoundHelpUrl" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableVendorNotFoundHelpUrl(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetVendorNotFoundHelpUrl(*s)
	}
	return suo
}

// SetMaintainanceModeHelpUrl sets the "MaintainanceModeHelpUrl" field.
func (suo *SettingsUpdateOne) SetMaintainanceModeHelpUrl(s string) *SettingsUpdateOne {
	suo.mutation.SetMaintainanceModeHelpUrl(s)
	return suo
}

// SetNillableMaintainanceModeHelpUrl sets the "MaintainanceModeHelpUrl" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableMaintainanceModeHelpUrl(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetMaintainanceModeHelpUrl(*s)
	}
	return suo
}

// SetVendorEmailPostfix sets the "VendorEmailPostfix" field.
func (suo *SettingsUpdateOne) SetVendorEmailPostfix(s string) *SettingsUpdateOne {
	suo.mutation.SetVendorEmailPostfix(s)
	return suo
}

// SetNillableVendorEmailPostfix sets the "VendorEmailPostfix" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableVendorEmailPostfix(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetVendorEmailPostfix(*s)
	}
	return suo
}

// SetNewspaperName sets the "NewspaperName" field.
func (suo *SettingsUpdateOne) SetNewspaperName(s string) *SettingsUpdateOne {
	suo.mutation.SetNewspaperName(s)
	return suo
}

// SetNillableNewspaperName sets the "NewspaperName" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableNewspaperName(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetNewspaperName(*s)
	}
	return suo
}

// SetQRCodeUrl sets the "QRCodeUrl" field.
func (suo *SettingsUpdateOne) SetQRCodeUrl(s string) *SettingsUpdateOne {
	suo.mutation.SetQRCodeUrl(s)
	return suo
}

// SetNillableQRCodeUrl sets the "QRCodeUrl" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableQRCodeUrl(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetQRCodeUrl(*s)
	}
	return suo
}

// SetQRCodeLogoImgUrl sets the "QRCodeLogoImgUrl" field.
func (suo *SettingsUpdateOne) SetQRCodeLogoImgUrl(s string) *SettingsUpdateOne {
	suo.mutation.SetQRCodeLogoImgUrl(s)
	return suo
}

// SetNillableQRCodeLogoImgUrl sets the "QRCodeLogoImgUrl" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableQRCodeLogoImgUrl(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetQRCodeLogoImgUrl(*s)
	}
	return suo
}

// SetMapCenterLat sets the "MapCenterLat" field.
func (suo *SettingsUpdateOne) SetMapCenterLat(f float64) *SettingsUpdateOne {
	suo.mutation.ResetMapCenterLat()
	suo.mutation.SetMapCenterLat(f)
	return suo
}

// SetNillableMapCenterLat sets the "MapCenterLat" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableMapCenterLat(f *float64) *SettingsUpdateOne {
	if f != nil {
		suo.SetMapCenterLat(*f)
	}
	return suo
}

// AddMapCenterLat adds f to the "MapCenterLat" field.
func (suo *SettingsUpdateOne) AddMapCenterLat(f float64) *SettingsUpdateOne {
	suo.mutation.AddMapCenterLat(f)
	return suo
}

// SetMapCenterLong sets the "MapCenterLong" field.
func (suo *SettingsUpdateOne) SetMapCenterLong(f float64) *SettingsUpdateOne {
	suo.mutation.ResetMapCenterLong()
	suo.mutation.SetMapCenterLong(f)
	return suo
}

// SetNillableMapCenterLong sets the "MapCenterLong" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableMapCenterLong(f *float64) *SettingsUpdateOne {
	if f != nil {
		suo.SetMapCenterLong(*f)
	}
	return suo
}

// AddMapCenterLong adds f to the "MapCenterLong" field.
func (suo *SettingsUpdateOne) AddMapCenterLong(f float64) *SettingsUpdateOne {
	suo.mutation.AddMapCenterLong(f)
	return suo
}

// SetUseVendorLicenseIdInShop sets the "UseVendorLicenseIdInShop" field.
func (suo *SettingsUpdateOne) SetUseVendorLicenseIdInShop(b bool) *SettingsUpdateOne {
	suo.mutation.SetUseVendorLicenseIdInShop(b)
	return suo
}

// SetNillableUseVendorLicenseIdInShop sets the "UseVendorLicenseIdInShop" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableUseVendorLicenseIdInShop(b *bool) *SettingsUpdateOne {
	if b != nil {
		suo.SetUseVendorLicenseIdInShop(*b)
	}
	return suo
}

// SetFavicon sets the "Favicon" field.
func (suo *SettingsUpdateOne) SetFavicon(s string) *SettingsUpdateOne {
	suo.mutation.SetFavicon(s)
	return suo
}

// SetNillableFavicon sets the "Favicon" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableFavicon(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetFavicon(*s)
	}
	return suo
}

// SetQRCodeSettings sets the "QRCodeSettings" field.
func (suo *SettingsUpdateOne) SetQRCodeSettings(s string) *SettingsUpdateOne {
	suo.mutation.SetQRCodeSettings(s)
	return suo
}

// SetNillableQRCodeSettings sets the "QRCodeSettings" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableQRCodeSettings(s *string) *SettingsUpdateOne {
	if s != nil {
		suo.SetQRCodeSettings(*s)
	}
	return suo
}

// SetQRCodeEnableLogo sets the "QRCodeEnableLogo" field.
func (suo *SettingsUpdateOne) SetQRCodeEnableLogo(b bool) *SettingsUpdateOne {
	suo.mutation.SetQRCodeEnableLogo(b)
	return suo
}

// SetNillableQRCodeEnableLogo sets the "QRCodeEnableLogo" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableQRCodeEnableLogo(b *bool) *SettingsUpdateOne {
	if b != nil {
		suo.SetQRCodeEnableLogo(*b)
	}
	return suo
}

// SetUseTipInsteadOfDonation sets the "UseTipInsteadOfDonation" field.
func (suo *SettingsUpdateOne) SetUseTipInsteadOfDonation(b bool) *SettingsUpdateOne {
	suo.mutation.SetUseTipInsteadOfDonation(b)
	return suo
}

// SetNillableUseTipInsteadOfDonation sets the "UseTipInsteadOfDonation" field if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableUseTipInsteadOfDonation(b *bool) *SettingsUpdateOne {
	if b != nil {
		suo.SetUseTipInsteadOfDonation(*b)
	}
	return suo
}

// SetMainItemID sets the "MainItem" edge to the Item entity by ID.
func (suo *SettingsUpdateOne) SetMainItemID(id int) *SettingsUpdateOne {
	suo.mutation.SetMainItemID(id)
	return suo
}

// SetNillableMainItemID sets the "MainItem" edge to the Item entity by ID if the given value is not nil.
func (suo *SettingsUpdateOne) SetNillableMainItemID(id *int) *SettingsUpdateOne {
	if id != nil {
		suo = suo.SetMainItemID(*id)
	}
	return suo
}

// SetMainItem sets the "MainItem" edge to the Item entity.
func (suo *SettingsUpdateOne) SetMainItem(i *Item) *SettingsUpdateOne {
	return suo.SetMainItemID(i.ID)
}

// Mutation returns the SettingsMutation object of the builder.
func (suo *SettingsUpdateOne) Mutation() *SettingsMutation {
	return suo.mutation
}

// ClearMainItem clears the "MainItem" edge to the Item entity.
func (suo *SettingsUpdateOne) ClearMainItem() *SettingsUpdateOne {
	suo.mutation.ClearMainItem()
	return suo
}

// Where appends a list predicates to the SettingsUpdate builder.
func (suo *SettingsUpdateOne) Where(ps ...predicate.Settings) *SettingsUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettingsUpdateOne) Select(field string, fields ...string) *SettingsUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Settings entity.
func (suo *SettingsUpdateOne) Save(ctx context.Context) (*Settings, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettingsUpdateOne) SaveX(ctx context.Context) *Settings {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettingsUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SettingsUpdateOne) sqlSave(ctx context.Context) (_node *Settings, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Settings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settings.FieldID)
		for _, f := range fields {
			if !settings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.AGBUrl(); ok {
		_spec.SetField(settings.FieldAGBUrl, field.TypeString, value)
	}
	if value, ok := suo.mutation.Color(); ok {
		_spec.SetField(settings.FieldColor, field.TypeString, value)
	}
	if value, ok := suo.mutation.FontColor(); ok {
		_spec.SetField(settings.FieldFontColor, field.TypeString, value)
	}
	if value, ok := suo.mutation.Logo(); ok {
		_spec.SetField(settings.FieldLogo, field.TypeString, value)
	}
	if value, ok := suo.mutation.MaxOrderAmount(); ok {
		_spec.SetField(settings.FieldMaxOrderAmount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedMaxOrderAmount(); ok {
		_spec.AddField(settings.FieldMaxOrderAmount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.OrgaCoversTransactionCosts(); ok {
		_spec.SetField(settings.FieldOrgaCoversTransactionCosts, field.TypeBool, value)
	}
	if value, ok := suo.mutation.WebshopIsClosed(); ok {
		_spec.SetField(settings.FieldWebshopIsClosed, field.TypeBool, value)
	}
	if value, ok := suo.mutation.VendorNotFoundHelpUrl(); ok {
		_spec.SetField(settings.FieldVendorNotFoundHelpUrl, field.TypeString, value)
	}
	if value, ok := suo.mutation.MaintainanceModeHelpUrl(); ok {
		_spec.SetField(settings.FieldMaintainanceModeHelpUrl, field.TypeString, value)
	}
	if value, ok := suo.mutation.VendorEmailPostfix(); ok {
		_spec.SetField(settings.FieldVendorEmailPostfix, field.TypeString, value)
	}
	if value, ok := suo.mutation.NewspaperName(); ok {
		_spec.SetField(settings.FieldNewspaperName, field.TypeString, value)
	}
	if value, ok := suo.mutation.QRCodeUrl(); ok {
		_spec.SetField(settings.FieldQRCodeUrl, field.TypeString, value)
	}
	if value, ok := suo.mutation.QRCodeLogoImgUrl(); ok {
		_spec.SetField(settings.FieldQRCodeLogoImgUrl, field.TypeString, value)
	}
	if value, ok := suo.mutation.MapCenterLat(); ok {
		_spec.SetField(settings.FieldMapCenterLat, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedMapCenterLat(); ok {
		_spec.AddField(settings.FieldMapCenterLat, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.MapCenterLong(); ok {
		_spec.SetField(settings.FieldMapCenterLong, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedMapCenterLong(); ok {
		_spec.AddField(settings.FieldMapCenterLong, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.UseVendorLicenseIdInShop(); ok {
		_spec.SetField(settings.FieldUseVendorLicenseIdInShop, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Favicon(); ok {
		_spec.SetField(settings.FieldFavicon, field.TypeString, value)
	}
	if value, ok := suo.mutation.QRCodeSettings(); ok {
		_spec.SetField(settings.FieldQRCodeSettings, field.TypeString, value)
	}
	if value, ok := suo.mutation.QRCodeEnableLogo(); ok {
		_spec.SetField(settings.FieldQRCodeEnableLogo, field.TypeBool, value)
	}
	if value, ok := suo.mutation.UseTipInsteadOfDonation(); ok {
		_spec.SetField(settings.FieldUseTipInsteadOfDonation, field.TypeBool, value)
	}
	if suo.mutation.MainItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   settings.MainItemTable,
			Columns: []string{settings.MainItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MainItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   settings.MainItemTable,
			Columns: []string{settings.MainItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Settings{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
