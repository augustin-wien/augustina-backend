// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/augustin-wien/augustina-backend/ent/item"
	"github.com/augustin-wien/augustina-backend/ent/settings"
)

// Settings is the model entity for the Settings schema.
type Settings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// AGBUrl holds the value of the "AGBUrl" field.
	AGBUrl string `json:"AGBUrl"`
	// Color holds the value of the "Color" field.
	Color string `json:"Color"`
	// FontColor holds the value of the "FontColor" field.
	FontColor string `json:"FontColor"`
	// Logo holds the value of the "Logo" field.
	Logo string `json:"Logo"`
	// MaxOrderAmount holds the value of the "MaxOrderAmount" field.
	MaxOrderAmount int `json:"MaxOrderAmount"`
	// OrgaCoversTransactionCosts holds the value of the "OrgaCoversTransactionCosts" field.
	OrgaCoversTransactionCosts bool `json:"OrgaCoversTransactionCosts"`
	// WebshopIsClosed holds the value of the "WebshopIsClosed" field.
	WebshopIsClosed bool `json:"WebshopIsClosed"`
	// VendorNotFoundHelpUrl holds the value of the "VendorNotFoundHelpUrl" field.
	VendorNotFoundHelpUrl string `json:"VendorNotFoundHelpUrl"`
	// MaintainanceModeHelpUrl holds the value of the "MaintainanceModeHelpUrl" field.
	MaintainanceModeHelpUrl string `json:"MaintainanceModeHelpUrl"`
	// VendorEmailPostfix holds the value of the "VendorEmailPostfix" field.
	VendorEmailPostfix string `json:"VendorEmailPostfix"`
	// NewspaperName holds the value of the "NewspaperName" field.
	NewspaperName string `json:"NewspaperName"`
	// QRCodeUrl holds the value of the "QRCodeUrl" field.
	QRCodeUrl string `json:"QRCodeUrl"`
	// QRCodeLogoImgUrl holds the value of the "QRCodeLogoImgUrl" field.
	QRCodeLogoImgUrl string `json:"QRCodeLogoImgUrl"`
	// MapCenterLat holds the value of the "MapCenterLat" field.
	MapCenterLat float64 `json:"MapCenterLat"`
	// MapCenterLong holds the value of the "MapCenterLong" field.
	MapCenterLong float64 `json:"MapCenterLong"`
	// UseVendorLicenseIdInShop holds the value of the "UseVendorLicenseIdInShop" field.
	UseVendorLicenseIdInShop bool `json:"UseVendorLicenseIdInShop"`
	// Favicon holds the value of the "Favicon" field.
	Favicon string `json:"Favicon"`
	// QRCodeSettings holds the value of the "QRCodeSettings" field.
	QRCodeSettings string `json:"QRCodeSettings"`
	// QRCodeEnableLogo holds the value of the "QRCodeEnableLogo" field.
	QRCodeEnableLogo bool `json:"QRCodeEnableLogo"`
	// UseTipInsteadOfDonation holds the value of the "UseTipInsteadOfDonation" field.
	UseTipInsteadOfDonation bool `json:"UseTipInsteadOfDonation"`
	// ShopLanding holds the value of the "ShopLanding" field.
	ShopLanding bool `json:"ShopLanding"`
	// DigitalItemsUrl holds the value of the "DigitalItemsUrl" field.
	DigitalItemsUrl string `json:"DigitalItemsUrl"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SettingsQuery when eager-loading is set.
	Edges        SettingsEdges `json:"edges"`
	mainitem     *int
	selectValues sql.SelectValues
}

// SettingsEdges holds the relations/edges for other nodes in the graph.
type SettingsEdges struct {
	// MainItem holds the value of the MainItem edge.
	MainItem *Item `json:"MainItem,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MainItemOrErr returns the MainItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SettingsEdges) MainItemOrErr() (*Item, error) {
	if e.MainItem != nil {
		return e.MainItem, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: item.Label}
	}
	return nil, &NotLoadedError{edge: "MainItem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case settings.FieldOrgaCoversTransactionCosts, settings.FieldWebshopIsClosed, settings.FieldUseVendorLicenseIdInShop, settings.FieldQRCodeEnableLogo, settings.FieldUseTipInsteadOfDonation, settings.FieldShopLanding:
			values[i] = new(sql.NullBool)
		case settings.FieldMapCenterLat, settings.FieldMapCenterLong:
			values[i] = new(sql.NullFloat64)
		case settings.FieldID, settings.FieldMaxOrderAmount:
			values[i] = new(sql.NullInt64)
		case settings.FieldAGBUrl, settings.FieldColor, settings.FieldFontColor, settings.FieldLogo, settings.FieldVendorNotFoundHelpUrl, settings.FieldMaintainanceModeHelpUrl, settings.FieldVendorEmailPostfix, settings.FieldNewspaperName, settings.FieldQRCodeUrl, settings.FieldQRCodeLogoImgUrl, settings.FieldFavicon, settings.FieldQRCodeSettings, settings.FieldDigitalItemsUrl:
			values[i] = new(sql.NullString)
		case settings.ForeignKeys[0]: // mainitem
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settings fields.
func (s *Settings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case settings.FieldAGBUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AGBUrl", values[i])
			} else if value.Valid {
				s.AGBUrl = value.String
			}
		case settings.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Color", values[i])
			} else if value.Valid {
				s.Color = value.String
			}
		case settings.FieldFontColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FontColor", values[i])
			} else if value.Valid {
				s.FontColor = value.String
			}
		case settings.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Logo", values[i])
			} else if value.Valid {
				s.Logo = value.String
			}
		case settings.FieldMaxOrderAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MaxOrderAmount", values[i])
			} else if value.Valid {
				s.MaxOrderAmount = int(value.Int64)
			}
		case settings.FieldOrgaCoversTransactionCosts:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OrgaCoversTransactionCosts", values[i])
			} else if value.Valid {
				s.OrgaCoversTransactionCosts = value.Bool
			}
		case settings.FieldWebshopIsClosed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field WebshopIsClosed", values[i])
			} else if value.Valid {
				s.WebshopIsClosed = value.Bool
			}
		case settings.FieldVendorNotFoundHelpUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VendorNotFoundHelpUrl", values[i])
			} else if value.Valid {
				s.VendorNotFoundHelpUrl = value.String
			}
		case settings.FieldMaintainanceModeHelpUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MaintainanceModeHelpUrl", values[i])
			} else if value.Valid {
				s.MaintainanceModeHelpUrl = value.String
			}
		case settings.FieldVendorEmailPostfix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VendorEmailPostfix", values[i])
			} else if value.Valid {
				s.VendorEmailPostfix = value.String
			}
		case settings.FieldNewspaperName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NewspaperName", values[i])
			} else if value.Valid {
				s.NewspaperName = value.String
			}
		case settings.FieldQRCodeUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field QRCodeUrl", values[i])
			} else if value.Valid {
				s.QRCodeUrl = value.String
			}
		case settings.FieldQRCodeLogoImgUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field QRCodeLogoImgUrl", values[i])
			} else if value.Valid {
				s.QRCodeLogoImgUrl = value.String
			}
		case settings.FieldMapCenterLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field MapCenterLat", values[i])
			} else if value.Valid {
				s.MapCenterLat = value.Float64
			}
		case settings.FieldMapCenterLong:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field MapCenterLong", values[i])
			} else if value.Valid {
				s.MapCenterLong = value.Float64
			}
		case settings.FieldUseVendorLicenseIdInShop:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field UseVendorLicenseIdInShop", values[i])
			} else if value.Valid {
				s.UseVendorLicenseIdInShop = value.Bool
			}
		case settings.FieldFavicon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Favicon", values[i])
			} else if value.Valid {
				s.Favicon = value.String
			}
		case settings.FieldQRCodeSettings:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field QRCodeSettings", values[i])
			} else if value.Valid {
				s.QRCodeSettings = value.String
			}
		case settings.FieldQRCodeEnableLogo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field QRCodeEnableLogo", values[i])
			} else if value.Valid {
				s.QRCodeEnableLogo = value.Bool
			}
		case settings.FieldUseTipInsteadOfDonation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field UseTipInsteadOfDonation", values[i])
			} else if value.Valid {
				s.UseTipInsteadOfDonation = value.Bool
			}
		case settings.FieldShopLanding:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ShopLanding", values[i])
			} else if value.Valid {
				s.ShopLanding = value.Bool
			}
		case settings.FieldDigitalItemsUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DigitalItemsUrl", values[i])
			} else if value.Valid {
				s.DigitalItemsUrl = value.String
			}
		case settings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field mainitem", value)
			} else if value.Valid {
				s.mainitem = new(int)
				*s.mainitem = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Settings.
// This includes values selected through modifiers, order, etc.
func (s *Settings) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryMainItem queries the "MainItem" edge of the Settings entity.
func (s *Settings) QueryMainItem() *ItemQuery {
	return NewSettingsClient(s.config).QueryMainItem(s)
}

// Update returns a builder for updating this Settings.
// Note that you need to call Settings.Unwrap() before calling this method if this Settings
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Settings) Update() *SettingsUpdateOne {
	return NewSettingsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Settings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Settings) Unwrap() *Settings {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settings is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Settings) String() string {
	var builder strings.Builder
	builder.WriteString("Settings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("AGBUrl=")
	builder.WriteString(s.AGBUrl)
	builder.WriteString(", ")
	builder.WriteString("Color=")
	builder.WriteString(s.Color)
	builder.WriteString(", ")
	builder.WriteString("FontColor=")
	builder.WriteString(s.FontColor)
	builder.WriteString(", ")
	builder.WriteString("Logo=")
	builder.WriteString(s.Logo)
	builder.WriteString(", ")
	builder.WriteString("MaxOrderAmount=")
	builder.WriteString(fmt.Sprintf("%v", s.MaxOrderAmount))
	builder.WriteString(", ")
	builder.WriteString("OrgaCoversTransactionCosts=")
	builder.WriteString(fmt.Sprintf("%v", s.OrgaCoversTransactionCosts))
	builder.WriteString(", ")
	builder.WriteString("WebshopIsClosed=")
	builder.WriteString(fmt.Sprintf("%v", s.WebshopIsClosed))
	builder.WriteString(", ")
	builder.WriteString("VendorNotFoundHelpUrl=")
	builder.WriteString(s.VendorNotFoundHelpUrl)
	builder.WriteString(", ")
	builder.WriteString("MaintainanceModeHelpUrl=")
	builder.WriteString(s.MaintainanceModeHelpUrl)
	builder.WriteString(", ")
	builder.WriteString("VendorEmailPostfix=")
	builder.WriteString(s.VendorEmailPostfix)
	builder.WriteString(", ")
	builder.WriteString("NewspaperName=")
	builder.WriteString(s.NewspaperName)
	builder.WriteString(", ")
	builder.WriteString("QRCodeUrl=")
	builder.WriteString(s.QRCodeUrl)
	builder.WriteString(", ")
	builder.WriteString("QRCodeLogoImgUrl=")
	builder.WriteString(s.QRCodeLogoImgUrl)
	builder.WriteString(", ")
	builder.WriteString("MapCenterLat=")
	builder.WriteString(fmt.Sprintf("%v", s.MapCenterLat))
	builder.WriteString(", ")
	builder.WriteString("MapCenterLong=")
	builder.WriteString(fmt.Sprintf("%v", s.MapCenterLong))
	builder.WriteString(", ")
	builder.WriteString("UseVendorLicenseIdInShop=")
	builder.WriteString(fmt.Sprintf("%v", s.UseVendorLicenseIdInShop))
	builder.WriteString(", ")
	builder.WriteString("Favicon=")
	builder.WriteString(s.Favicon)
	builder.WriteString(", ")
	builder.WriteString("QRCodeSettings=")
	builder.WriteString(s.QRCodeSettings)
	builder.WriteString(", ")
	builder.WriteString("QRCodeEnableLogo=")
	builder.WriteString(fmt.Sprintf("%v", s.QRCodeEnableLogo))
	builder.WriteString(", ")
	builder.WriteString("UseTipInsteadOfDonation=")
	builder.WriteString(fmt.Sprintf("%v", s.UseTipInsteadOfDonation))
	builder.WriteString(", ")
	builder.WriteString("ShopLanding=")
	builder.WriteString(fmt.Sprintf("%v", s.ShopLanding))
	builder.WriteString(", ")
	builder.WriteString("DigitalItemsUrl=")
	builder.WriteString(s.DigitalItemsUrl)
	builder.WriteByte(')')
	return builder.String()
}

// SettingsSlice is a parsable slice of Settings.
type SettingsSlice []*Settings
