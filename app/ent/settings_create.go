// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/augustin-wien/augustina-backend/ent/item"
	"github.com/augustin-wien/augustina-backend/ent/settings"
)

// SettingsCreate is the builder for creating a Settings entity.
type SettingsCreate struct {
	config
	mutation *SettingsMutation
	hooks    []Hook
}

// SetAGBUrl sets the "AGBUrl" field.
func (sc *SettingsCreate) SetAGBUrl(s string) *SettingsCreate {
	sc.mutation.SetAGBUrl(s)
	return sc
}

// SetNillableAGBUrl sets the "AGBUrl" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableAGBUrl(s *string) *SettingsCreate {
	if s != nil {
		sc.SetAGBUrl(*s)
	}
	return sc
}

// SetColor sets the "Color" field.
func (sc *SettingsCreate) SetColor(s string) *SettingsCreate {
	sc.mutation.SetColor(s)
	return sc
}

// SetNillableColor sets the "Color" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableColor(s *string) *SettingsCreate {
	if s != nil {
		sc.SetColor(*s)
	}
	return sc
}

// SetFontColor sets the "FontColor" field.
func (sc *SettingsCreate) SetFontColor(s string) *SettingsCreate {
	sc.mutation.SetFontColor(s)
	return sc
}

// SetNillableFontColor sets the "FontColor" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableFontColor(s *string) *SettingsCreate {
	if s != nil {
		sc.SetFontColor(*s)
	}
	return sc
}

// SetLogo sets the "Logo" field.
func (sc *SettingsCreate) SetLogo(s string) *SettingsCreate {
	sc.mutation.SetLogo(s)
	return sc
}

// SetNillableLogo sets the "Logo" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableLogo(s *string) *SettingsCreate {
	if s != nil {
		sc.SetLogo(*s)
	}
	return sc
}

// SetMaxOrderAmount sets the "MaxOrderAmount" field.
func (sc *SettingsCreate) SetMaxOrderAmount(i int) *SettingsCreate {
	sc.mutation.SetMaxOrderAmount(i)
	return sc
}

// SetNillableMaxOrderAmount sets the "MaxOrderAmount" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableMaxOrderAmount(i *int) *SettingsCreate {
	if i != nil {
		sc.SetMaxOrderAmount(*i)
	}
	return sc
}

// SetOrgaCoversTransactionCosts sets the "OrgaCoversTransactionCosts" field.
func (sc *SettingsCreate) SetOrgaCoversTransactionCosts(b bool) *SettingsCreate {
	sc.mutation.SetOrgaCoversTransactionCosts(b)
	return sc
}

// SetNillableOrgaCoversTransactionCosts sets the "OrgaCoversTransactionCosts" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableOrgaCoversTransactionCosts(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetOrgaCoversTransactionCosts(*b)
	}
	return sc
}

// SetWebshopIsClosed sets the "WebshopIsClosed" field.
func (sc *SettingsCreate) SetWebshopIsClosed(b bool) *SettingsCreate {
	sc.mutation.SetWebshopIsClosed(b)
	return sc
}

// SetNillableWebshopIsClosed sets the "WebshopIsClosed" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableWebshopIsClosed(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetWebshopIsClosed(*b)
	}
	return sc
}

// SetVendorNotFoundHelpUrl sets the "VendorNotFoundHelpUrl" field.
func (sc *SettingsCreate) SetVendorNotFoundHelpUrl(s string) *SettingsCreate {
	sc.mutation.SetVendorNotFoundHelpUrl(s)
	return sc
}

// SetNillableVendorNotFoundHelpUrl sets the "VendorNotFoundHelpUrl" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableVendorNotFoundHelpUrl(s *string) *SettingsCreate {
	if s != nil {
		sc.SetVendorNotFoundHelpUrl(*s)
	}
	return sc
}

// SetMaintainanceModeHelpUrl sets the "MaintainanceModeHelpUrl" field.
func (sc *SettingsCreate) SetMaintainanceModeHelpUrl(s string) *SettingsCreate {
	sc.mutation.SetMaintainanceModeHelpUrl(s)
	return sc
}

// SetNillableMaintainanceModeHelpUrl sets the "MaintainanceModeHelpUrl" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableMaintainanceModeHelpUrl(s *string) *SettingsCreate {
	if s != nil {
		sc.SetMaintainanceModeHelpUrl(*s)
	}
	return sc
}

// SetVendorEmailPostfix sets the "VendorEmailPostfix" field.
func (sc *SettingsCreate) SetVendorEmailPostfix(s string) *SettingsCreate {
	sc.mutation.SetVendorEmailPostfix(s)
	return sc
}

// SetNillableVendorEmailPostfix sets the "VendorEmailPostfix" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableVendorEmailPostfix(s *string) *SettingsCreate {
	if s != nil {
		sc.SetVendorEmailPostfix(*s)
	}
	return sc
}

// SetNewspaperName sets the "NewspaperName" field.
func (sc *SettingsCreate) SetNewspaperName(s string) *SettingsCreate {
	sc.mutation.SetNewspaperName(s)
	return sc
}

// SetNillableNewspaperName sets the "NewspaperName" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableNewspaperName(s *string) *SettingsCreate {
	if s != nil {
		sc.SetNewspaperName(*s)
	}
	return sc
}

// SetQRCodeUrl sets the "QRCodeUrl" field.
func (sc *SettingsCreate) SetQRCodeUrl(s string) *SettingsCreate {
	sc.mutation.SetQRCodeUrl(s)
	return sc
}

// SetNillableQRCodeUrl sets the "QRCodeUrl" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableQRCodeUrl(s *string) *SettingsCreate {
	if s != nil {
		sc.SetQRCodeUrl(*s)
	}
	return sc
}

// SetQRCodeLogoImgUrl sets the "QRCodeLogoImgUrl" field.
func (sc *SettingsCreate) SetQRCodeLogoImgUrl(s string) *SettingsCreate {
	sc.mutation.SetQRCodeLogoImgUrl(s)
	return sc
}

// SetNillableQRCodeLogoImgUrl sets the "QRCodeLogoImgUrl" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableQRCodeLogoImgUrl(s *string) *SettingsCreate {
	if s != nil {
		sc.SetQRCodeLogoImgUrl(*s)
	}
	return sc
}

// SetMapCenterLat sets the "MapCenterLat" field.
func (sc *SettingsCreate) SetMapCenterLat(f float64) *SettingsCreate {
	sc.mutation.SetMapCenterLat(f)
	return sc
}

// SetNillableMapCenterLat sets the "MapCenterLat" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableMapCenterLat(f *float64) *SettingsCreate {
	if f != nil {
		sc.SetMapCenterLat(*f)
	}
	return sc
}

// SetMapCenterLong sets the "MapCenterLong" field.
func (sc *SettingsCreate) SetMapCenterLong(f float64) *SettingsCreate {
	sc.mutation.SetMapCenterLong(f)
	return sc
}

// SetNillableMapCenterLong sets the "MapCenterLong" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableMapCenterLong(f *float64) *SettingsCreate {
	if f != nil {
		sc.SetMapCenterLong(*f)
	}
	return sc
}

// SetUseVendorLicenseIdInShop sets the "UseVendorLicenseIdInShop" field.
func (sc *SettingsCreate) SetUseVendorLicenseIdInShop(b bool) *SettingsCreate {
	sc.mutation.SetUseVendorLicenseIdInShop(b)
	return sc
}

// SetNillableUseVendorLicenseIdInShop sets the "UseVendorLicenseIdInShop" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableUseVendorLicenseIdInShop(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetUseVendorLicenseIdInShop(*b)
	}
	return sc
}

// SetFavicon sets the "Favicon" field.
func (sc *SettingsCreate) SetFavicon(s string) *SettingsCreate {
	sc.mutation.SetFavicon(s)
	return sc
}

// SetNillableFavicon sets the "Favicon" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableFavicon(s *string) *SettingsCreate {
	if s != nil {
		sc.SetFavicon(*s)
	}
	return sc
}

// SetQRCodeSettings sets the "QRCodeSettings" field.
func (sc *SettingsCreate) SetQRCodeSettings(s string) *SettingsCreate {
	sc.mutation.SetQRCodeSettings(s)
	return sc
}

// SetNillableQRCodeSettings sets the "QRCodeSettings" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableQRCodeSettings(s *string) *SettingsCreate {
	if s != nil {
		sc.SetQRCodeSettings(*s)
	}
	return sc
}

// SetQRCodeEnableLogo sets the "QRCodeEnableLogo" field.
func (sc *SettingsCreate) SetQRCodeEnableLogo(b bool) *SettingsCreate {
	sc.mutation.SetQRCodeEnableLogo(b)
	return sc
}

// SetNillableQRCodeEnableLogo sets the "QRCodeEnableLogo" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableQRCodeEnableLogo(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetQRCodeEnableLogo(*b)
	}
	return sc
}

// SetUseTipInsteadOfDonation sets the "UseTipInsteadOfDonation" field.
func (sc *SettingsCreate) SetUseTipInsteadOfDonation(b bool) *SettingsCreate {
	sc.mutation.SetUseTipInsteadOfDonation(b)
	return sc
}

// SetNillableUseTipInsteadOfDonation sets the "UseTipInsteadOfDonation" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableUseTipInsteadOfDonation(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetUseTipInsteadOfDonation(*b)
	}
	return sc
}

// SetShopLanding sets the "ShopLanding" field.
func (sc *SettingsCreate) SetShopLanding(b bool) *SettingsCreate {
	sc.mutation.SetShopLanding(b)
	return sc
}

// SetNillableShopLanding sets the "ShopLanding" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableShopLanding(b *bool) *SettingsCreate {
	if b != nil {
		sc.SetShopLanding(*b)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SettingsCreate) SetID(i int) *SettingsCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetMainItemID sets the "MainItem" edge to the Item entity by ID.
func (sc *SettingsCreate) SetMainItemID(id int) *SettingsCreate {
	sc.mutation.SetMainItemID(id)
	return sc
}

// SetNillableMainItemID sets the "MainItem" edge to the Item entity by ID if the given value is not nil.
func (sc *SettingsCreate) SetNillableMainItemID(id *int) *SettingsCreate {
	if id != nil {
		sc = sc.SetMainItemID(*id)
	}
	return sc
}

// SetMainItem sets the "MainItem" edge to the Item entity.
func (sc *SettingsCreate) SetMainItem(i *Item) *SettingsCreate {
	return sc.SetMainItemID(i.ID)
}

// Mutation returns the SettingsMutation object of the builder.
func (sc *SettingsCreate) Mutation() *SettingsMutation {
	return sc.mutation
}

// Save creates the Settings in the database.
func (sc *SettingsCreate) Save(ctx context.Context) (*Settings, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingsCreate) SaveX(ctx context.Context) *Settings {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettingsCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettingsCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SettingsCreate) defaults() {
	if _, ok := sc.mutation.AGBUrl(); !ok {
		v := settings.DefaultAGBUrl
		sc.mutation.SetAGBUrl(v)
	}
	if _, ok := sc.mutation.Color(); !ok {
		v := settings.DefaultColor
		sc.mutation.SetColor(v)
	}
	if _, ok := sc.mutation.FontColor(); !ok {
		v := settings.DefaultFontColor
		sc.mutation.SetFontColor(v)
	}
	if _, ok := sc.mutation.Logo(); !ok {
		v := settings.DefaultLogo
		sc.mutation.SetLogo(v)
	}
	if _, ok := sc.mutation.MaxOrderAmount(); !ok {
		v := settings.DefaultMaxOrderAmount
		sc.mutation.SetMaxOrderAmount(v)
	}
	if _, ok := sc.mutation.OrgaCoversTransactionCosts(); !ok {
		v := settings.DefaultOrgaCoversTransactionCosts
		sc.mutation.SetOrgaCoversTransactionCosts(v)
	}
	if _, ok := sc.mutation.WebshopIsClosed(); !ok {
		v := settings.DefaultWebshopIsClosed
		sc.mutation.SetWebshopIsClosed(v)
	}
	if _, ok := sc.mutation.VendorNotFoundHelpUrl(); !ok {
		v := settings.DefaultVendorNotFoundHelpUrl
		sc.mutation.SetVendorNotFoundHelpUrl(v)
	}
	if _, ok := sc.mutation.MaintainanceModeHelpUrl(); !ok {
		v := settings.DefaultMaintainanceModeHelpUrl
		sc.mutation.SetMaintainanceModeHelpUrl(v)
	}
	if _, ok := sc.mutation.VendorEmailPostfix(); !ok {
		v := settings.DefaultVendorEmailPostfix
		sc.mutation.SetVendorEmailPostfix(v)
	}
	if _, ok := sc.mutation.NewspaperName(); !ok {
		v := settings.DefaultNewspaperName
		sc.mutation.SetNewspaperName(v)
	}
	if _, ok := sc.mutation.QRCodeUrl(); !ok {
		v := settings.DefaultQRCodeUrl
		sc.mutation.SetQRCodeUrl(v)
	}
	if _, ok := sc.mutation.QRCodeLogoImgUrl(); !ok {
		v := settings.DefaultQRCodeLogoImgUrl
		sc.mutation.SetQRCodeLogoImgUrl(v)
	}
	if _, ok := sc.mutation.MapCenterLat(); !ok {
		v := settings.DefaultMapCenterLat
		sc.mutation.SetMapCenterLat(v)
	}
	if _, ok := sc.mutation.MapCenterLong(); !ok {
		v := settings.DefaultMapCenterLong
		sc.mutation.SetMapCenterLong(v)
	}
	if _, ok := sc.mutation.UseVendorLicenseIdInShop(); !ok {
		v := settings.DefaultUseVendorLicenseIdInShop
		sc.mutation.SetUseVendorLicenseIdInShop(v)
	}
	if _, ok := sc.mutation.Favicon(); !ok {
		v := settings.DefaultFavicon
		sc.mutation.SetFavicon(v)
	}
	if _, ok := sc.mutation.QRCodeSettings(); !ok {
		v := settings.DefaultQRCodeSettings
		sc.mutation.SetQRCodeSettings(v)
	}
	if _, ok := sc.mutation.QRCodeEnableLogo(); !ok {
		v := settings.DefaultQRCodeEnableLogo
		sc.mutation.SetQRCodeEnableLogo(v)
	}
	if _, ok := sc.mutation.UseTipInsteadOfDonation(); !ok {
		v := settings.DefaultUseTipInsteadOfDonation
		sc.mutation.SetUseTipInsteadOfDonation(v)
	}
	if _, ok := sc.mutation.ShopLanding(); !ok {
		v := settings.DefaultShopLanding
		sc.mutation.SetShopLanding(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingsCreate) check() error {
	if _, ok := sc.mutation.AGBUrl(); !ok {
		return &ValidationError{Name: "AGBUrl", err: errors.New(`ent: missing required field "Settings.AGBUrl"`)}
	}
	if _, ok := sc.mutation.Color(); !ok {
		return &ValidationError{Name: "Color", err: errors.New(`ent: missing required field "Settings.Color"`)}
	}
	if _, ok := sc.mutation.FontColor(); !ok {
		return &ValidationError{Name: "FontColor", err: errors.New(`ent: missing required field "Settings.FontColor"`)}
	}
	if _, ok := sc.mutation.Logo(); !ok {
		return &ValidationError{Name: "Logo", err: errors.New(`ent: missing required field "Settings.Logo"`)}
	}
	if _, ok := sc.mutation.MaxOrderAmount(); !ok {
		return &ValidationError{Name: "MaxOrderAmount", err: errors.New(`ent: missing required field "Settings.MaxOrderAmount"`)}
	}
	if _, ok := sc.mutation.OrgaCoversTransactionCosts(); !ok {
		return &ValidationError{Name: "OrgaCoversTransactionCosts", err: errors.New(`ent: missing required field "Settings.OrgaCoversTransactionCosts"`)}
	}
	if _, ok := sc.mutation.WebshopIsClosed(); !ok {
		return &ValidationError{Name: "WebshopIsClosed", err: errors.New(`ent: missing required field "Settings.WebshopIsClosed"`)}
	}
	if _, ok := sc.mutation.VendorNotFoundHelpUrl(); !ok {
		return &ValidationError{Name: "VendorNotFoundHelpUrl", err: errors.New(`ent: missing required field "Settings.VendorNotFoundHelpUrl"`)}
	}
	if _, ok := sc.mutation.MaintainanceModeHelpUrl(); !ok {
		return &ValidationError{Name: "MaintainanceModeHelpUrl", err: errors.New(`ent: missing required field "Settings.MaintainanceModeHelpUrl"`)}
	}
	if _, ok := sc.mutation.VendorEmailPostfix(); !ok {
		return &ValidationError{Name: "VendorEmailPostfix", err: errors.New(`ent: missing required field "Settings.VendorEmailPostfix"`)}
	}
	if _, ok := sc.mutation.NewspaperName(); !ok {
		return &ValidationError{Name: "NewspaperName", err: errors.New(`ent: missing required field "Settings.NewspaperName"`)}
	}
	if _, ok := sc.mutation.QRCodeUrl(); !ok {
		return &ValidationError{Name: "QRCodeUrl", err: errors.New(`ent: missing required field "Settings.QRCodeUrl"`)}
	}
	if _, ok := sc.mutation.QRCodeLogoImgUrl(); !ok {
		return &ValidationError{Name: "QRCodeLogoImgUrl", err: errors.New(`ent: missing required field "Settings.QRCodeLogoImgUrl"`)}
	}
	if _, ok := sc.mutation.MapCenterLat(); !ok {
		return &ValidationError{Name: "MapCenterLat", err: errors.New(`ent: missing required field "Settings.MapCenterLat"`)}
	}
	if _, ok := sc.mutation.MapCenterLong(); !ok {
		return &ValidationError{Name: "MapCenterLong", err: errors.New(`ent: missing required field "Settings.MapCenterLong"`)}
	}
	if _, ok := sc.mutation.UseVendorLicenseIdInShop(); !ok {
		return &ValidationError{Name: "UseVendorLicenseIdInShop", err: errors.New(`ent: missing required field "Settings.UseVendorLicenseIdInShop"`)}
	}
	if _, ok := sc.mutation.Favicon(); !ok {
		return &ValidationError{Name: "Favicon", err: errors.New(`ent: missing required field "Settings.Favicon"`)}
	}
	if _, ok := sc.mutation.QRCodeSettings(); !ok {
		return &ValidationError{Name: "QRCodeSettings", err: errors.New(`ent: missing required field "Settings.QRCodeSettings"`)}
	}
	if _, ok := sc.mutation.QRCodeEnableLogo(); !ok {
		return &ValidationError{Name: "QRCodeEnableLogo", err: errors.New(`ent: missing required field "Settings.QRCodeEnableLogo"`)}
	}
	if _, ok := sc.mutation.UseTipInsteadOfDonation(); !ok {
		return &ValidationError{Name: "UseTipInsteadOfDonation", err: errors.New(`ent: missing required field "Settings.UseTipInsteadOfDonation"`)}
	}
	if _, ok := sc.mutation.ShopLanding(); !ok {
		return &ValidationError{Name: "ShopLanding", err: errors.New(`ent: missing required field "Settings.ShopLanding"`)}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := settings.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Settings.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SettingsCreate) sqlSave(ctx context.Context) (*Settings, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SettingsCreate) createSpec() (*Settings, *sqlgraph.CreateSpec) {
	var (
		_node = &Settings{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(settings.Table, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.AGBUrl(); ok {
		_spec.SetField(settings.FieldAGBUrl, field.TypeString, value)
		_node.AGBUrl = value
	}
	if value, ok := sc.mutation.Color(); ok {
		_spec.SetField(settings.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := sc.mutation.FontColor(); ok {
		_spec.SetField(settings.FieldFontColor, field.TypeString, value)
		_node.FontColor = value
	}
	if value, ok := sc.mutation.Logo(); ok {
		_spec.SetField(settings.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := sc.mutation.MaxOrderAmount(); ok {
		_spec.SetField(settings.FieldMaxOrderAmount, field.TypeInt, value)
		_node.MaxOrderAmount = value
	}
	if value, ok := sc.mutation.OrgaCoversTransactionCosts(); ok {
		_spec.SetField(settings.FieldOrgaCoversTransactionCosts, field.TypeBool, value)
		_node.OrgaCoversTransactionCosts = value
	}
	if value, ok := sc.mutation.WebshopIsClosed(); ok {
		_spec.SetField(settings.FieldWebshopIsClosed, field.TypeBool, value)
		_node.WebshopIsClosed = value
	}
	if value, ok := sc.mutation.VendorNotFoundHelpUrl(); ok {
		_spec.SetField(settings.FieldVendorNotFoundHelpUrl, field.TypeString, value)
		_node.VendorNotFoundHelpUrl = value
	}
	if value, ok := sc.mutation.MaintainanceModeHelpUrl(); ok {
		_spec.SetField(settings.FieldMaintainanceModeHelpUrl, field.TypeString, value)
		_node.MaintainanceModeHelpUrl = value
	}
	if value, ok := sc.mutation.VendorEmailPostfix(); ok {
		_spec.SetField(settings.FieldVendorEmailPostfix, field.TypeString, value)
		_node.VendorEmailPostfix = value
	}
	if value, ok := sc.mutation.NewspaperName(); ok {
		_spec.SetField(settings.FieldNewspaperName, field.TypeString, value)
		_node.NewspaperName = value
	}
	if value, ok := sc.mutation.QRCodeUrl(); ok {
		_spec.SetField(settings.FieldQRCodeUrl, field.TypeString, value)
		_node.QRCodeUrl = value
	}
	if value, ok := sc.mutation.QRCodeLogoImgUrl(); ok {
		_spec.SetField(settings.FieldQRCodeLogoImgUrl, field.TypeString, value)
		_node.QRCodeLogoImgUrl = value
	}
	if value, ok := sc.mutation.MapCenterLat(); ok {
		_spec.SetField(settings.FieldMapCenterLat, field.TypeFloat64, value)
		_node.MapCenterLat = value
	}
	if value, ok := sc.mutation.MapCenterLong(); ok {
		_spec.SetField(settings.FieldMapCenterLong, field.TypeFloat64, value)
		_node.MapCenterLong = value
	}
	if value, ok := sc.mutation.UseVendorLicenseIdInShop(); ok {
		_spec.SetField(settings.FieldUseVendorLicenseIdInShop, field.TypeBool, value)
		_node.UseVendorLicenseIdInShop = value
	}
	if value, ok := sc.mutation.Favicon(); ok {
		_spec.SetField(settings.FieldFavicon, field.TypeString, value)
		_node.Favicon = value
	}
	if value, ok := sc.mutation.QRCodeSettings(); ok {
		_spec.SetField(settings.FieldQRCodeSettings, field.TypeString, value)
		_node.QRCodeSettings = value
	}
	if value, ok := sc.mutation.QRCodeEnableLogo(); ok {
		_spec.SetField(settings.FieldQRCodeEnableLogo, field.TypeBool, value)
		_node.QRCodeEnableLogo = value
	}
	if value, ok := sc.mutation.UseTipInsteadOfDonation(); ok {
		_spec.SetField(settings.FieldUseTipInsteadOfDonation, field.TypeBool, value)
		_node.UseTipInsteadOfDonation = value
	}
	if value, ok := sc.mutation.ShopLanding(); ok {
		_spec.SetField(settings.FieldShopLanding, field.TypeBool, value)
		_node.ShopLanding = value
	}
	if nodes := sc.mutation.MainItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   settings.MainItemTable,
			Columns: []string{settings.MainItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mainitem = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SettingsCreateBulk is the builder for creating many Settings entities in bulk.
type SettingsCreateBulk struct {
	config
	err      error
	builders []*SettingsCreate
}

// Save creates the Settings entities in the database.
func (scb *SettingsCreateBulk) Save(ctx context.Context) ([]*Settings, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Settings, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingsCreateBulk) SaveX(ctx context.Context) []*Settings {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettingsCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
