// Code generated by ent, DO NOT EDIT.

package vendor

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vendor type in the database.
	Label = "vendor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKeycloakid holds the string denoting the keycloakid field in the database.
	FieldKeycloakid = "keycloakid"
	// FieldUrlid holds the string denoting the urlid field in the database.
	FieldUrlid = "urlid"
	// FieldLicenseid holds the string denoting the licenseid field in the database.
	FieldLicenseid = "licenseid"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldLastpayout holds the string denoting the lastpayout field in the database.
	FieldLastpayout = "lastpayout"
	// FieldIsdisabled holds the string denoting the isdisabled field in the database.
	FieldIsdisabled = "isdisabled"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldTelephone holds the string denoting the telephone field in the database.
	FieldTelephone = "telephone"
	// FieldRegistrationdate holds the string denoting the registrationdate field in the database.
	FieldRegistrationdate = "registrationdate"
	// FieldVendorsince holds the string denoting the vendorsince field in the database.
	FieldVendorsince = "vendorsince"
	// FieldOnlinemap holds the string denoting the onlinemap field in the database.
	FieldOnlinemap = "onlinemap"
	// FieldHassmartphone holds the string denoting the hassmartphone field in the database.
	FieldHassmartphone = "hassmartphone"
	// FieldHasbankaccount holds the string denoting the hasbankaccount field in the database.
	FieldHasbankaccount = "hasbankaccount"
	// FieldIsdeleted holds the string denoting the isdeleted field in the database.
	FieldIsdeleted = "isdeleted"
	// FieldAccountproofurl holds the string denoting the accountproofurl field in the database.
	FieldAccountproofurl = "accountproofurl"
	// EdgeLocations holds the string denoting the locations edge name in mutations.
	EdgeLocations = "locations"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the vendor in the database.
	Table = "vendor"
	// LocationsTable is the table that holds the locations relation/edge.
	LocationsTable = "locations"
	// LocationsInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationsInverseTable = "locations"
	// LocationsColumn is the table column denoting the locations relation/edge.
	LocationsColumn = "vendor_locations"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "vendor_comments"
)

// Columns holds all SQL columns for vendor fields.
var Columns = []string{
	FieldID,
	FieldKeycloakid,
	FieldUrlid,
	FieldLicenseid,
	FieldFirstname,
	FieldLastname,
	FieldEmail,
	FieldLastpayout,
	FieldIsdisabled,
	FieldLanguage,
	FieldTelephone,
	FieldRegistrationdate,
	FieldVendorsince,
	FieldOnlinemap,
	FieldHassmartphone,
	FieldHasbankaccount,
	FieldIsdeleted,
	FieldAccountproofurl,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLicenseid holds the default value on creation for the "licenseid" field.
	DefaultLicenseid string
	// DefaultFirstname holds the default value on creation for the "firstname" field.
	DefaultFirstname string
	// DefaultLastname holds the default value on creation for the "lastname" field.
	DefaultLastname string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultIsdisabled holds the default value on creation for the "isdisabled" field.
	DefaultIsdisabled bool
	// DefaultOnlinemap holds the default value on creation for the "onlinemap" field.
	DefaultOnlinemap bool
	// DefaultHassmartphone holds the default value on creation for the "hassmartphone" field.
	DefaultHassmartphone bool
	// DefaultHasbankaccount holds the default value on creation for the "hasbankaccount" field.
	DefaultHasbankaccount bool
	// DefaultIsdeleted holds the default value on creation for the "isdeleted" field.
	DefaultIsdeleted bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Vendor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKeycloakid orders the results by the keycloakid field.
func ByKeycloakid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeycloakid, opts...).ToFunc()
}

// ByUrlid orders the results by the urlid field.
func ByUrlid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUrlid, opts...).ToFunc()
}

// ByLicenseid orders the results by the licenseid field.
func ByLicenseid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseid, opts...).ToFunc()
}

// ByFirstname orders the results by the firstname field.
func ByFirstname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstname, opts...).ToFunc()
}

// ByLastname orders the results by the lastname field.
func ByLastname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastname, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByLastpayout orders the results by the lastpayout field.
func ByLastpayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastpayout, opts...).ToFunc()
}

// ByIsdisabled orders the results by the isdisabled field.
func ByIsdisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsdisabled, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByTelephone orders the results by the telephone field.
func ByTelephone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelephone, opts...).ToFunc()
}

// ByRegistrationdate orders the results by the registrationdate field.
func ByRegistrationdate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationdate, opts...).ToFunc()
}

// ByVendorsince orders the results by the vendorsince field.
func ByVendorsince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorsince, opts...).ToFunc()
}

// ByOnlinemap orders the results by the onlinemap field.
func ByOnlinemap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnlinemap, opts...).ToFunc()
}

// ByHassmartphone orders the results by the hassmartphone field.
func ByHassmartphone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHassmartphone, opts...).ToFunc()
}

// ByHasbankaccount orders the results by the hasbankaccount field.
func ByHasbankaccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasbankaccount, opts...).ToFunc()
}

// ByIsdeleted orders the results by the isdeleted field.
func ByIsdeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsdeleted, opts...).ToFunc()
}

// ByAccountproofurl orders the results by the accountproofurl field.
func ByAccountproofurl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountproofurl, opts...).ToFunc()
}

// ByLocationsCount orders the results by locations count.
func ByLocationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocationsStep(), opts...)
	}
}

// ByLocations orders the results by locations terms.
func ByLocations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLocationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LocationsTable, LocationsColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
