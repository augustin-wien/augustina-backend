// Code generated by ent, DO NOT EDIT.

package vendor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/augustin-wien/augustina-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldID, id))
}

// Keycloakid applies equality check predicate on the "keycloakid" field. It's identical to KeycloakidEQ.
func Keycloakid(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldKeycloakid, v))
}

// Urlid applies equality check predicate on the "urlid" field. It's identical to UrlidEQ.
func Urlid(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldUrlid, v))
}

// Licenseid applies equality check predicate on the "licenseid" field. It's identical to LicenseidEQ.
func Licenseid(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLicenseid, v))
}

// Firstname applies equality check predicate on the "firstname" field. It's identical to FirstnameEQ.
func Firstname(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldFirstname, v))
}

// Lastname applies equality check predicate on the "lastname" field. It's identical to LastnameEQ.
func Lastname(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLastname, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldEmail, v))
}

// Lastpayout applies equality check predicate on the "lastpayout" field. It's identical to LastpayoutEQ.
func Lastpayout(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLastpayout, v))
}

// Isdisabled applies equality check predicate on the "isdisabled" field. It's identical to IsdisabledEQ.
func Isdisabled(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldIsdisabled, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLanguage, v))
}

// Telephone applies equality check predicate on the "telephone" field. It's identical to TelephoneEQ.
func Telephone(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldTelephone, v))
}

// Registrationdate applies equality check predicate on the "registrationdate" field. It's identical to RegistrationdateEQ.
func Registrationdate(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldRegistrationdate, v))
}

// Vendorsince applies equality check predicate on the "vendorsince" field. It's identical to VendorsinceEQ.
func Vendorsince(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldVendorsince, v))
}

// Onlinemap applies equality check predicate on the "onlinemap" field. It's identical to OnlinemapEQ.
func Onlinemap(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldOnlinemap, v))
}

// Hassmartphone applies equality check predicate on the "hassmartphone" field. It's identical to HassmartphoneEQ.
func Hassmartphone(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldHassmartphone, v))
}

// Hasbankaccount applies equality check predicate on the "hasbankaccount" field. It's identical to HasbankaccountEQ.
func Hasbankaccount(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldHasbankaccount, v))
}

// Isdeleted applies equality check predicate on the "isdeleted" field. It's identical to IsdeletedEQ.
func Isdeleted(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldIsdeleted, v))
}

// Accountproofurl applies equality check predicate on the "accountproofurl" field. It's identical to AccountproofurlEQ.
func Accountproofurl(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldAccountproofurl, v))
}

// Debt applies equality check predicate on the "debt" field. It's identical to DebtEQ.
func Debt(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldDebt, v))
}

// KeycloakidEQ applies the EQ predicate on the "keycloakid" field.
func KeycloakidEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldKeycloakid, v))
}

// KeycloakidNEQ applies the NEQ predicate on the "keycloakid" field.
func KeycloakidNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldKeycloakid, v))
}

// KeycloakidIn applies the In predicate on the "keycloakid" field.
func KeycloakidIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldKeycloakid, vs...))
}

// KeycloakidNotIn applies the NotIn predicate on the "keycloakid" field.
func KeycloakidNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldKeycloakid, vs...))
}

// KeycloakidGT applies the GT predicate on the "keycloakid" field.
func KeycloakidGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldKeycloakid, v))
}

// KeycloakidGTE applies the GTE predicate on the "keycloakid" field.
func KeycloakidGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldKeycloakid, v))
}

// KeycloakidLT applies the LT predicate on the "keycloakid" field.
func KeycloakidLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldKeycloakid, v))
}

// KeycloakidLTE applies the LTE predicate on the "keycloakid" field.
func KeycloakidLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldKeycloakid, v))
}

// KeycloakidContains applies the Contains predicate on the "keycloakid" field.
func KeycloakidContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldKeycloakid, v))
}

// KeycloakidHasPrefix applies the HasPrefix predicate on the "keycloakid" field.
func KeycloakidHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldKeycloakid, v))
}

// KeycloakidHasSuffix applies the HasSuffix predicate on the "keycloakid" field.
func KeycloakidHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldKeycloakid, v))
}

// KeycloakidEqualFold applies the EqualFold predicate on the "keycloakid" field.
func KeycloakidEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldKeycloakid, v))
}

// KeycloakidContainsFold applies the ContainsFold predicate on the "keycloakid" field.
func KeycloakidContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldKeycloakid, v))
}

// UrlidEQ applies the EQ predicate on the "urlid" field.
func UrlidEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldUrlid, v))
}

// UrlidNEQ applies the NEQ predicate on the "urlid" field.
func UrlidNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldUrlid, v))
}

// UrlidIn applies the In predicate on the "urlid" field.
func UrlidIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldUrlid, vs...))
}

// UrlidNotIn applies the NotIn predicate on the "urlid" field.
func UrlidNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldUrlid, vs...))
}

// UrlidGT applies the GT predicate on the "urlid" field.
func UrlidGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldUrlid, v))
}

// UrlidGTE applies the GTE predicate on the "urlid" field.
func UrlidGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldUrlid, v))
}

// UrlidLT applies the LT predicate on the "urlid" field.
func UrlidLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldUrlid, v))
}

// UrlidLTE applies the LTE predicate on the "urlid" field.
func UrlidLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldUrlid, v))
}

// UrlidContains applies the Contains predicate on the "urlid" field.
func UrlidContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldUrlid, v))
}

// UrlidHasPrefix applies the HasPrefix predicate on the "urlid" field.
func UrlidHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldUrlid, v))
}

// UrlidHasSuffix applies the HasSuffix predicate on the "urlid" field.
func UrlidHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldUrlid, v))
}

// UrlidEqualFold applies the EqualFold predicate on the "urlid" field.
func UrlidEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldUrlid, v))
}

// UrlidContainsFold applies the ContainsFold predicate on the "urlid" field.
func UrlidContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldUrlid, v))
}

// LicenseidEQ applies the EQ predicate on the "licenseid" field.
func LicenseidEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLicenseid, v))
}

// LicenseidNEQ applies the NEQ predicate on the "licenseid" field.
func LicenseidNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldLicenseid, v))
}

// LicenseidIn applies the In predicate on the "licenseid" field.
func LicenseidIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldLicenseid, vs...))
}

// LicenseidNotIn applies the NotIn predicate on the "licenseid" field.
func LicenseidNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldLicenseid, vs...))
}

// LicenseidGT applies the GT predicate on the "licenseid" field.
func LicenseidGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldLicenseid, v))
}

// LicenseidGTE applies the GTE predicate on the "licenseid" field.
func LicenseidGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldLicenseid, v))
}

// LicenseidLT applies the LT predicate on the "licenseid" field.
func LicenseidLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldLicenseid, v))
}

// LicenseidLTE applies the LTE predicate on the "licenseid" field.
func LicenseidLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldLicenseid, v))
}

// LicenseidContains applies the Contains predicate on the "licenseid" field.
func LicenseidContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldLicenseid, v))
}

// LicenseidHasPrefix applies the HasPrefix predicate on the "licenseid" field.
func LicenseidHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldLicenseid, v))
}

// LicenseidHasSuffix applies the HasSuffix predicate on the "licenseid" field.
func LicenseidHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldLicenseid, v))
}

// LicenseidEqualFold applies the EqualFold predicate on the "licenseid" field.
func LicenseidEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldLicenseid, v))
}

// LicenseidContainsFold applies the ContainsFold predicate on the "licenseid" field.
func LicenseidContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldLicenseid, v))
}

// FirstnameEQ applies the EQ predicate on the "firstname" field.
func FirstnameEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldFirstname, v))
}

// FirstnameNEQ applies the NEQ predicate on the "firstname" field.
func FirstnameNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldFirstname, v))
}

// FirstnameIn applies the In predicate on the "firstname" field.
func FirstnameIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldFirstname, vs...))
}

// FirstnameNotIn applies the NotIn predicate on the "firstname" field.
func FirstnameNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldFirstname, vs...))
}

// FirstnameGT applies the GT predicate on the "firstname" field.
func FirstnameGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldFirstname, v))
}

// FirstnameGTE applies the GTE predicate on the "firstname" field.
func FirstnameGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldFirstname, v))
}

// FirstnameLT applies the LT predicate on the "firstname" field.
func FirstnameLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldFirstname, v))
}

// FirstnameLTE applies the LTE predicate on the "firstname" field.
func FirstnameLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldFirstname, v))
}

// FirstnameContains applies the Contains predicate on the "firstname" field.
func FirstnameContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldFirstname, v))
}

// FirstnameHasPrefix applies the HasPrefix predicate on the "firstname" field.
func FirstnameHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldFirstname, v))
}

// FirstnameHasSuffix applies the HasSuffix predicate on the "firstname" field.
func FirstnameHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldFirstname, v))
}

// FirstnameEqualFold applies the EqualFold predicate on the "firstname" field.
func FirstnameEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldFirstname, v))
}

// FirstnameContainsFold applies the ContainsFold predicate on the "firstname" field.
func FirstnameContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldFirstname, v))
}

// LastnameEQ applies the EQ predicate on the "lastname" field.
func LastnameEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLastname, v))
}

// LastnameNEQ applies the NEQ predicate on the "lastname" field.
func LastnameNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldLastname, v))
}

// LastnameIn applies the In predicate on the "lastname" field.
func LastnameIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldLastname, vs...))
}

// LastnameNotIn applies the NotIn predicate on the "lastname" field.
func LastnameNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldLastname, vs...))
}

// LastnameGT applies the GT predicate on the "lastname" field.
func LastnameGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldLastname, v))
}

// LastnameGTE applies the GTE predicate on the "lastname" field.
func LastnameGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldLastname, v))
}

// LastnameLT applies the LT predicate on the "lastname" field.
func LastnameLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldLastname, v))
}

// LastnameLTE applies the LTE predicate on the "lastname" field.
func LastnameLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldLastname, v))
}

// LastnameContains applies the Contains predicate on the "lastname" field.
func LastnameContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldLastname, v))
}

// LastnameHasPrefix applies the HasPrefix predicate on the "lastname" field.
func LastnameHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldLastname, v))
}

// LastnameHasSuffix applies the HasSuffix predicate on the "lastname" field.
func LastnameHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldLastname, v))
}

// LastnameEqualFold applies the EqualFold predicate on the "lastname" field.
func LastnameEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldLastname, v))
}

// LastnameContainsFold applies the ContainsFold predicate on the "lastname" field.
func LastnameContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldLastname, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldEmail, v))
}

// LastpayoutEQ applies the EQ predicate on the "lastpayout" field.
func LastpayoutEQ(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLastpayout, v))
}

// LastpayoutNEQ applies the NEQ predicate on the "lastpayout" field.
func LastpayoutNEQ(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldLastpayout, v))
}

// LastpayoutIn applies the In predicate on the "lastpayout" field.
func LastpayoutIn(vs ...time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldLastpayout, vs...))
}

// LastpayoutNotIn applies the NotIn predicate on the "lastpayout" field.
func LastpayoutNotIn(vs ...time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldLastpayout, vs...))
}

// LastpayoutGT applies the GT predicate on the "lastpayout" field.
func LastpayoutGT(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldLastpayout, v))
}

// LastpayoutGTE applies the GTE predicate on the "lastpayout" field.
func LastpayoutGTE(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldLastpayout, v))
}

// LastpayoutLT applies the LT predicate on the "lastpayout" field.
func LastpayoutLT(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldLastpayout, v))
}

// LastpayoutLTE applies the LTE predicate on the "lastpayout" field.
func LastpayoutLTE(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldLastpayout, v))
}

// IsdisabledEQ applies the EQ predicate on the "isdisabled" field.
func IsdisabledEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldIsdisabled, v))
}

// IsdisabledNEQ applies the NEQ predicate on the "isdisabled" field.
func IsdisabledNEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldIsdisabled, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldLanguage, v))
}

// TelephoneEQ applies the EQ predicate on the "telephone" field.
func TelephoneEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldTelephone, v))
}

// TelephoneNEQ applies the NEQ predicate on the "telephone" field.
func TelephoneNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldTelephone, v))
}

// TelephoneIn applies the In predicate on the "telephone" field.
func TelephoneIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldTelephone, vs...))
}

// TelephoneNotIn applies the NotIn predicate on the "telephone" field.
func TelephoneNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldTelephone, vs...))
}

// TelephoneGT applies the GT predicate on the "telephone" field.
func TelephoneGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldTelephone, v))
}

// TelephoneGTE applies the GTE predicate on the "telephone" field.
func TelephoneGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldTelephone, v))
}

// TelephoneLT applies the LT predicate on the "telephone" field.
func TelephoneLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldTelephone, v))
}

// TelephoneLTE applies the LTE predicate on the "telephone" field.
func TelephoneLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldTelephone, v))
}

// TelephoneContains applies the Contains predicate on the "telephone" field.
func TelephoneContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldTelephone, v))
}

// TelephoneHasPrefix applies the HasPrefix predicate on the "telephone" field.
func TelephoneHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldTelephone, v))
}

// TelephoneHasSuffix applies the HasSuffix predicate on the "telephone" field.
func TelephoneHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldTelephone, v))
}

// TelephoneEqualFold applies the EqualFold predicate on the "telephone" field.
func TelephoneEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldTelephone, v))
}

// TelephoneContainsFold applies the ContainsFold predicate on the "telephone" field.
func TelephoneContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldTelephone, v))
}

// RegistrationdateEQ applies the EQ predicate on the "registrationdate" field.
func RegistrationdateEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldRegistrationdate, v))
}

// RegistrationdateNEQ applies the NEQ predicate on the "registrationdate" field.
func RegistrationdateNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldRegistrationdate, v))
}

// RegistrationdateIn applies the In predicate on the "registrationdate" field.
func RegistrationdateIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldRegistrationdate, vs...))
}

// RegistrationdateNotIn applies the NotIn predicate on the "registrationdate" field.
func RegistrationdateNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldRegistrationdate, vs...))
}

// RegistrationdateGT applies the GT predicate on the "registrationdate" field.
func RegistrationdateGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldRegistrationdate, v))
}

// RegistrationdateGTE applies the GTE predicate on the "registrationdate" field.
func RegistrationdateGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldRegistrationdate, v))
}

// RegistrationdateLT applies the LT predicate on the "registrationdate" field.
func RegistrationdateLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldRegistrationdate, v))
}

// RegistrationdateLTE applies the LTE predicate on the "registrationdate" field.
func RegistrationdateLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldRegistrationdate, v))
}

// RegistrationdateContains applies the Contains predicate on the "registrationdate" field.
func RegistrationdateContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldRegistrationdate, v))
}

// RegistrationdateHasPrefix applies the HasPrefix predicate on the "registrationdate" field.
func RegistrationdateHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldRegistrationdate, v))
}

// RegistrationdateHasSuffix applies the HasSuffix predicate on the "registrationdate" field.
func RegistrationdateHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldRegistrationdate, v))
}

// RegistrationdateEqualFold applies the EqualFold predicate on the "registrationdate" field.
func RegistrationdateEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldRegistrationdate, v))
}

// RegistrationdateContainsFold applies the ContainsFold predicate on the "registrationdate" field.
func RegistrationdateContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldRegistrationdate, v))
}

// VendorsinceEQ applies the EQ predicate on the "vendorsince" field.
func VendorsinceEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldVendorsince, v))
}

// VendorsinceNEQ applies the NEQ predicate on the "vendorsince" field.
func VendorsinceNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldVendorsince, v))
}

// VendorsinceIn applies the In predicate on the "vendorsince" field.
func VendorsinceIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldVendorsince, vs...))
}

// VendorsinceNotIn applies the NotIn predicate on the "vendorsince" field.
func VendorsinceNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldVendorsince, vs...))
}

// VendorsinceGT applies the GT predicate on the "vendorsince" field.
func VendorsinceGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldVendorsince, v))
}

// VendorsinceGTE applies the GTE predicate on the "vendorsince" field.
func VendorsinceGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldVendorsince, v))
}

// VendorsinceLT applies the LT predicate on the "vendorsince" field.
func VendorsinceLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldVendorsince, v))
}

// VendorsinceLTE applies the LTE predicate on the "vendorsince" field.
func VendorsinceLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldVendorsince, v))
}

// VendorsinceContains applies the Contains predicate on the "vendorsince" field.
func VendorsinceContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldVendorsince, v))
}

// VendorsinceHasPrefix applies the HasPrefix predicate on the "vendorsince" field.
func VendorsinceHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldVendorsince, v))
}

// VendorsinceHasSuffix applies the HasSuffix predicate on the "vendorsince" field.
func VendorsinceHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldVendorsince, v))
}

// VendorsinceEqualFold applies the EqualFold predicate on the "vendorsince" field.
func VendorsinceEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldVendorsince, v))
}

// VendorsinceContainsFold applies the ContainsFold predicate on the "vendorsince" field.
func VendorsinceContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldVendorsince, v))
}

// OnlinemapEQ applies the EQ predicate on the "onlinemap" field.
func OnlinemapEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldOnlinemap, v))
}

// OnlinemapNEQ applies the NEQ predicate on the "onlinemap" field.
func OnlinemapNEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldOnlinemap, v))
}

// HassmartphoneEQ applies the EQ predicate on the "hassmartphone" field.
func HassmartphoneEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldHassmartphone, v))
}

// HassmartphoneNEQ applies the NEQ predicate on the "hassmartphone" field.
func HassmartphoneNEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldHassmartphone, v))
}

// HasbankaccountEQ applies the EQ predicate on the "hasbankaccount" field.
func HasbankaccountEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldHasbankaccount, v))
}

// HasbankaccountNEQ applies the NEQ predicate on the "hasbankaccount" field.
func HasbankaccountNEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldHasbankaccount, v))
}

// IsdeletedEQ applies the EQ predicate on the "isdeleted" field.
func IsdeletedEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldIsdeleted, v))
}

// IsdeletedNEQ applies the NEQ predicate on the "isdeleted" field.
func IsdeletedNEQ(v bool) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldIsdeleted, v))
}

// AccountproofurlEQ applies the EQ predicate on the "accountproofurl" field.
func AccountproofurlEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldAccountproofurl, v))
}

// AccountproofurlNEQ applies the NEQ predicate on the "accountproofurl" field.
func AccountproofurlNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldAccountproofurl, v))
}

// AccountproofurlIn applies the In predicate on the "accountproofurl" field.
func AccountproofurlIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldAccountproofurl, vs...))
}

// AccountproofurlNotIn applies the NotIn predicate on the "accountproofurl" field.
func AccountproofurlNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldAccountproofurl, vs...))
}

// AccountproofurlGT applies the GT predicate on the "accountproofurl" field.
func AccountproofurlGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldAccountproofurl, v))
}

// AccountproofurlGTE applies the GTE predicate on the "accountproofurl" field.
func AccountproofurlGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldAccountproofurl, v))
}

// AccountproofurlLT applies the LT predicate on the "accountproofurl" field.
func AccountproofurlLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldAccountproofurl, v))
}

// AccountproofurlLTE applies the LTE predicate on the "accountproofurl" field.
func AccountproofurlLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldAccountproofurl, v))
}

// AccountproofurlContains applies the Contains predicate on the "accountproofurl" field.
func AccountproofurlContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldAccountproofurl, v))
}

// AccountproofurlHasPrefix applies the HasPrefix predicate on the "accountproofurl" field.
func AccountproofurlHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldAccountproofurl, v))
}

// AccountproofurlHasSuffix applies the HasSuffix predicate on the "accountproofurl" field.
func AccountproofurlHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldAccountproofurl, v))
}

// AccountproofurlEqualFold applies the EqualFold predicate on the "accountproofurl" field.
func AccountproofurlEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldAccountproofurl, v))
}

// AccountproofurlContainsFold applies the ContainsFold predicate on the "accountproofurl" field.
func AccountproofurlContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldAccountproofurl, v))
}

// DebtEQ applies the EQ predicate on the "debt" field.
func DebtEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldDebt, v))
}

// DebtNEQ applies the NEQ predicate on the "debt" field.
func DebtNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldDebt, v))
}

// DebtIn applies the In predicate on the "debt" field.
func DebtIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldDebt, vs...))
}

// DebtNotIn applies the NotIn predicate on the "debt" field.
func DebtNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldDebt, vs...))
}

// DebtGT applies the GT predicate on the "debt" field.
func DebtGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldDebt, v))
}

// DebtGTE applies the GTE predicate on the "debt" field.
func DebtGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldDebt, v))
}

// DebtLT applies the LT predicate on the "debt" field.
func DebtLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldDebt, v))
}

// DebtLTE applies the LTE predicate on the "debt" field.
func DebtLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldDebt, v))
}

// DebtContains applies the Contains predicate on the "debt" field.
func DebtContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldDebt, v))
}

// DebtHasPrefix applies the HasPrefix predicate on the "debt" field.
func DebtHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldDebt, v))
}

// DebtHasSuffix applies the HasSuffix predicate on the "debt" field.
func DebtHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldDebt, v))
}

// DebtEqualFold applies the EqualFold predicate on the "debt" field.
func DebtEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldDebt, v))
}

// DebtContainsFold applies the ContainsFold predicate on the "debt" field.
func DebtContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldDebt, v))
}

// HasLocations applies the HasEdge predicate on the "locations" edge.
func HasLocations() predicate.Vendor {
	return predicate.Vendor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LocationsTable, LocationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationsWith applies the HasEdge predicate on the "locations" edge with a given conditions (other predicates).
func HasLocationsWith(preds ...predicate.Location) predicate.Vendor {
	return predicate.Vendor(func(s *sql.Selector) {
		step := newLocationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Vendor {
	return predicate.Vendor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Vendor {
	return predicate.Vendor(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vendor) predicate.Vendor {
	return predicate.Vendor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vendor) predicate.Vendor {
	return predicate.Vendor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vendor) predicate.Vendor {
	return predicate.Vendor(sql.NotPredicates(p))
}
