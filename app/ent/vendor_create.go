// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/augustin-wien/augustina-backend/ent/comment"
	"github.com/augustin-wien/augustina-backend/ent/location"
	"github.com/augustin-wien/augustina-backend/ent/vendor"
)

// VendorCreate is the builder for creating a Vendor entity.
type VendorCreate struct {
	config
	mutation *VendorMutation
	hooks    []Hook
}

// SetKeycloakid sets the "keycloakid" field.
func (vc *VendorCreate) SetKeycloakid(s string) *VendorCreate {
	vc.mutation.SetKeycloakid(s)
	return vc
}

// SetUrlid sets the "urlid" field.
func (vc *VendorCreate) SetUrlid(s string) *VendorCreate {
	vc.mutation.SetUrlid(s)
	return vc
}

// SetLicenseid sets the "licenseid" field.
func (vc *VendorCreate) SetLicenseid(s string) *VendorCreate {
	vc.mutation.SetLicenseid(s)
	return vc
}

// SetNillableLicenseid sets the "licenseid" field if the given value is not nil.
func (vc *VendorCreate) SetNillableLicenseid(s *string) *VendorCreate {
	if s != nil {
		vc.SetLicenseid(*s)
	}
	return vc
}

// SetFirstname sets the "firstname" field.
func (vc *VendorCreate) SetFirstname(s string) *VendorCreate {
	vc.mutation.SetFirstname(s)
	return vc
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (vc *VendorCreate) SetNillableFirstname(s *string) *VendorCreate {
	if s != nil {
		vc.SetFirstname(*s)
	}
	return vc
}

// SetLastname sets the "lastname" field.
func (vc *VendorCreate) SetLastname(s string) *VendorCreate {
	vc.mutation.SetLastname(s)
	return vc
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (vc *VendorCreate) SetNillableLastname(s *string) *VendorCreate {
	if s != nil {
		vc.SetLastname(*s)
	}
	return vc
}

// SetEmail sets the "email" field.
func (vc *VendorCreate) SetEmail(s string) *VendorCreate {
	vc.mutation.SetEmail(s)
	return vc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vc *VendorCreate) SetNillableEmail(s *string) *VendorCreate {
	if s != nil {
		vc.SetEmail(*s)
	}
	return vc
}

// SetLastpayout sets the "lastpayout" field.
func (vc *VendorCreate) SetLastpayout(t time.Time) *VendorCreate {
	vc.mutation.SetLastpayout(t)
	return vc
}

// SetIsdisabled sets the "isdisabled" field.
func (vc *VendorCreate) SetIsdisabled(b bool) *VendorCreate {
	vc.mutation.SetIsdisabled(b)
	return vc
}

// SetNillableIsdisabled sets the "isdisabled" field if the given value is not nil.
func (vc *VendorCreate) SetNillableIsdisabled(b *bool) *VendorCreate {
	if b != nil {
		vc.SetIsdisabled(*b)
	}
	return vc
}

// SetLanguage sets the "language" field.
func (vc *VendorCreate) SetLanguage(s string) *VendorCreate {
	vc.mutation.SetLanguage(s)
	return vc
}

// SetTelephone sets the "telephone" field.
func (vc *VendorCreate) SetTelephone(s string) *VendorCreate {
	vc.mutation.SetTelephone(s)
	return vc
}

// SetRegistrationdate sets the "registrationdate" field.
func (vc *VendorCreate) SetRegistrationdate(s string) *VendorCreate {
	vc.mutation.SetRegistrationdate(s)
	return vc
}

// SetVendorsince sets the "vendorsince" field.
func (vc *VendorCreate) SetVendorsince(s string) *VendorCreate {
	vc.mutation.SetVendorsince(s)
	return vc
}

// SetOnlinemap sets the "onlinemap" field.
func (vc *VendorCreate) SetOnlinemap(b bool) *VendorCreate {
	vc.mutation.SetOnlinemap(b)
	return vc
}

// SetNillableOnlinemap sets the "onlinemap" field if the given value is not nil.
func (vc *VendorCreate) SetNillableOnlinemap(b *bool) *VendorCreate {
	if b != nil {
		vc.SetOnlinemap(*b)
	}
	return vc
}

// SetHassmartphone sets the "hassmartphone" field.
func (vc *VendorCreate) SetHassmartphone(b bool) *VendorCreate {
	vc.mutation.SetHassmartphone(b)
	return vc
}

// SetNillableHassmartphone sets the "hassmartphone" field if the given value is not nil.
func (vc *VendorCreate) SetNillableHassmartphone(b *bool) *VendorCreate {
	if b != nil {
		vc.SetHassmartphone(*b)
	}
	return vc
}

// SetHasbankaccount sets the "hasbankaccount" field.
func (vc *VendorCreate) SetHasbankaccount(b bool) *VendorCreate {
	vc.mutation.SetHasbankaccount(b)
	return vc
}

// SetNillableHasbankaccount sets the "hasbankaccount" field if the given value is not nil.
func (vc *VendorCreate) SetNillableHasbankaccount(b *bool) *VendorCreate {
	if b != nil {
		vc.SetHasbankaccount(*b)
	}
	return vc
}

// SetIsdeleted sets the "isdeleted" field.
func (vc *VendorCreate) SetIsdeleted(b bool) *VendorCreate {
	vc.mutation.SetIsdeleted(b)
	return vc
}

// SetNillableIsdeleted sets the "isdeleted" field if the given value is not nil.
func (vc *VendorCreate) SetNillableIsdeleted(b *bool) *VendorCreate {
	if b != nil {
		vc.SetIsdeleted(*b)
	}
	return vc
}

// SetAccountproofurl sets the "accountproofurl" field.
func (vc *VendorCreate) SetAccountproofurl(s string) *VendorCreate {
	vc.mutation.SetAccountproofurl(s)
	return vc
}

// SetDebt sets the "debt" field.
func (vc *VendorCreate) SetDebt(s string) *VendorCreate {
	vc.mutation.SetDebt(s)
	return vc
}

// SetID sets the "id" field.
func (vc *VendorCreate) SetID(i int) *VendorCreate {
	vc.mutation.SetID(i)
	return vc
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (vc *VendorCreate) AddLocationIDs(ids ...int) *VendorCreate {
	vc.mutation.AddLocationIDs(ids...)
	return vc
}

// AddLocations adds the "locations" edges to the Location entity.
func (vc *VendorCreate) AddLocations(l ...*Location) *VendorCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return vc.AddLocationIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (vc *VendorCreate) AddCommentIDs(ids ...int) *VendorCreate {
	vc.mutation.AddCommentIDs(ids...)
	return vc
}

// AddComments adds the "comments" edges to the Comment entity.
func (vc *VendorCreate) AddComments(c ...*Comment) *VendorCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vc.AddCommentIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vc *VendorCreate) Mutation() *VendorMutation {
	return vc.mutation
}

// Save creates the Vendor in the database.
func (vc *VendorCreate) Save(ctx context.Context) (*Vendor, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VendorCreate) SaveX(ctx context.Context) *Vendor {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VendorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VendorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VendorCreate) defaults() {
	if _, ok := vc.mutation.Licenseid(); !ok {
		v := vendor.DefaultLicenseid
		vc.mutation.SetLicenseid(v)
	}
	if _, ok := vc.mutation.Firstname(); !ok {
		v := vendor.DefaultFirstname
		vc.mutation.SetFirstname(v)
	}
	if _, ok := vc.mutation.Lastname(); !ok {
		v := vendor.DefaultLastname
		vc.mutation.SetLastname(v)
	}
	if _, ok := vc.mutation.Email(); !ok {
		v := vendor.DefaultEmail
		vc.mutation.SetEmail(v)
	}
	if _, ok := vc.mutation.Isdisabled(); !ok {
		v := vendor.DefaultIsdisabled
		vc.mutation.SetIsdisabled(v)
	}
	if _, ok := vc.mutation.Onlinemap(); !ok {
		v := vendor.DefaultOnlinemap
		vc.mutation.SetOnlinemap(v)
	}
	if _, ok := vc.mutation.Hassmartphone(); !ok {
		v := vendor.DefaultHassmartphone
		vc.mutation.SetHassmartphone(v)
	}
	if _, ok := vc.mutation.Hasbankaccount(); !ok {
		v := vendor.DefaultHasbankaccount
		vc.mutation.SetHasbankaccount(v)
	}
	if _, ok := vc.mutation.Isdeleted(); !ok {
		v := vendor.DefaultIsdeleted
		vc.mutation.SetIsdeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VendorCreate) check() error {
	if _, ok := vc.mutation.Keycloakid(); !ok {
		return &ValidationError{Name: "keycloakid", err: errors.New(`ent: missing required field "Vendor.keycloakid"`)}
	}
	if _, ok := vc.mutation.Urlid(); !ok {
		return &ValidationError{Name: "urlid", err: errors.New(`ent: missing required field "Vendor.urlid"`)}
	}
	if _, ok := vc.mutation.Licenseid(); !ok {
		return &ValidationError{Name: "licenseid", err: errors.New(`ent: missing required field "Vendor.licenseid"`)}
	}
	if _, ok := vc.mutation.Firstname(); !ok {
		return &ValidationError{Name: "firstname", err: errors.New(`ent: missing required field "Vendor.firstname"`)}
	}
	if _, ok := vc.mutation.Lastname(); !ok {
		return &ValidationError{Name: "lastname", err: errors.New(`ent: missing required field "Vendor.lastname"`)}
	}
	if _, ok := vc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Vendor.email"`)}
	}
	if _, ok := vc.mutation.Lastpayout(); !ok {
		return &ValidationError{Name: "lastpayout", err: errors.New(`ent: missing required field "Vendor.lastpayout"`)}
	}
	if _, ok := vc.mutation.Isdisabled(); !ok {
		return &ValidationError{Name: "isdisabled", err: errors.New(`ent: missing required field "Vendor.isdisabled"`)}
	}
	if _, ok := vc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Vendor.language"`)}
	}
	if _, ok := vc.mutation.Telephone(); !ok {
		return &ValidationError{Name: "telephone", err: errors.New(`ent: missing required field "Vendor.telephone"`)}
	}
	if _, ok := vc.mutation.Registrationdate(); !ok {
		return &ValidationError{Name: "registrationdate", err: errors.New(`ent: missing required field "Vendor.registrationdate"`)}
	}
	if _, ok := vc.mutation.Vendorsince(); !ok {
		return &ValidationError{Name: "vendorsince", err: errors.New(`ent: missing required field "Vendor.vendorsince"`)}
	}
	if _, ok := vc.mutation.Onlinemap(); !ok {
		return &ValidationError{Name: "onlinemap", err: errors.New(`ent: missing required field "Vendor.onlinemap"`)}
	}
	if _, ok := vc.mutation.Hassmartphone(); !ok {
		return &ValidationError{Name: "hassmartphone", err: errors.New(`ent: missing required field "Vendor.hassmartphone"`)}
	}
	if _, ok := vc.mutation.Hasbankaccount(); !ok {
		return &ValidationError{Name: "hasbankaccount", err: errors.New(`ent: missing required field "Vendor.hasbankaccount"`)}
	}
	if _, ok := vc.mutation.Isdeleted(); !ok {
		return &ValidationError{Name: "isdeleted", err: errors.New(`ent: missing required field "Vendor.isdeleted"`)}
	}
	if _, ok := vc.mutation.Accountproofurl(); !ok {
		return &ValidationError{Name: "accountproofurl", err: errors.New(`ent: missing required field "Vendor.accountproofurl"`)}
	}
	if _, ok := vc.mutation.Debt(); !ok {
		return &ValidationError{Name: "debt", err: errors.New(`ent: missing required field "Vendor.debt"`)}
	}
	if v, ok := vc.mutation.ID(); ok {
		if err := vendor.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Vendor.id": %w`, err)}
		}
	}
	return nil
}

func (vc *VendorCreate) sqlSave(ctx context.Context) (*Vendor, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VendorCreate) createSpec() (*Vendor, *sqlgraph.CreateSpec) {
	var (
		_node = &Vendor{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vendor.Table, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.Keycloakid(); ok {
		_spec.SetField(vendor.FieldKeycloakid, field.TypeString, value)
		_node.Keycloakid = value
	}
	if value, ok := vc.mutation.Urlid(); ok {
		_spec.SetField(vendor.FieldUrlid, field.TypeString, value)
		_node.Urlid = value
	}
	if value, ok := vc.mutation.Licenseid(); ok {
		_spec.SetField(vendor.FieldLicenseid, field.TypeString, value)
		_node.Licenseid = value
	}
	if value, ok := vc.mutation.Firstname(); ok {
		_spec.SetField(vendor.FieldFirstname, field.TypeString, value)
		_node.Firstname = value
	}
	if value, ok := vc.mutation.Lastname(); ok {
		_spec.SetField(vendor.FieldLastname, field.TypeString, value)
		_node.Lastname = value
	}
	if value, ok := vc.mutation.Email(); ok {
		_spec.SetField(vendor.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := vc.mutation.Lastpayout(); ok {
		_spec.SetField(vendor.FieldLastpayout, field.TypeTime, value)
		_node.Lastpayout = value
	}
	if value, ok := vc.mutation.Isdisabled(); ok {
		_spec.SetField(vendor.FieldIsdisabled, field.TypeBool, value)
		_node.Isdisabled = value
	}
	if value, ok := vc.mutation.Language(); ok {
		_spec.SetField(vendor.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := vc.mutation.Telephone(); ok {
		_spec.SetField(vendor.FieldTelephone, field.TypeString, value)
		_node.Telephone = value
	}
	if value, ok := vc.mutation.Registrationdate(); ok {
		_spec.SetField(vendor.FieldRegistrationdate, field.TypeString, value)
		_node.Registrationdate = value
	}
	if value, ok := vc.mutation.Vendorsince(); ok {
		_spec.SetField(vendor.FieldVendorsince, field.TypeString, value)
		_node.Vendorsince = value
	}
	if value, ok := vc.mutation.Onlinemap(); ok {
		_spec.SetField(vendor.FieldOnlinemap, field.TypeBool, value)
		_node.Onlinemap = value
	}
	if value, ok := vc.mutation.Hassmartphone(); ok {
		_spec.SetField(vendor.FieldHassmartphone, field.TypeBool, value)
		_node.Hassmartphone = value
	}
	if value, ok := vc.mutation.Hasbankaccount(); ok {
		_spec.SetField(vendor.FieldHasbankaccount, field.TypeBool, value)
		_node.Hasbankaccount = value
	}
	if value, ok := vc.mutation.Isdeleted(); ok {
		_spec.SetField(vendor.FieldIsdeleted, field.TypeBool, value)
		_node.Isdeleted = value
	}
	if value, ok := vc.mutation.Accountproofurl(); ok {
		_spec.SetField(vendor.FieldAccountproofurl, field.TypeString, value)
		_node.Accountproofurl = value
	}
	if value, ok := vc.mutation.Debt(); ok {
		_spec.SetField(vendor.FieldDebt, field.TypeString, value)
		_node.Debt = value
	}
	if nodes := vc.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.LocationsTable,
			Columns: []string{vendor.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.CommentsTable,
			Columns: []string{vendor.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorCreateBulk is the builder for creating many Vendor entities in bulk.
type VendorCreateBulk struct {
	config
	err      error
	builders []*VendorCreate
}

// Save creates the Vendor entities in the database.
func (vcb *VendorCreateBulk) Save(ctx context.Context) ([]*Vendor, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vendor, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VendorCreateBulk) SaveX(ctx context.Context) []*Vendor {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VendorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VendorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
