// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/augustin-wien/augustina-backend/ent/item"
	"github.com/augustin-wien/augustina-backend/ent/predicate"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "Name" field.
func (iu *ItemUpdate) SetName(s string) *ItemUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableName(s *string) *ItemUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetDescription sets the "Description" field.
func (iu *ItemUpdate) SetDescription(s string) *ItemUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDescription(s *string) *ItemUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// SetPrice sets the "Price" field.
func (iu *ItemUpdate) SetPrice(f float64) *ItemUpdate {
	iu.mutation.ResetPrice()
	iu.mutation.SetPrice(f)
	return iu
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (iu *ItemUpdate) SetNillablePrice(f *float64) *ItemUpdate {
	if f != nil {
		iu.SetPrice(*f)
	}
	return iu
}

// AddPrice adds f to the "Price" field.
func (iu *ItemUpdate) AddPrice(f float64) *ItemUpdate {
	iu.mutation.AddPrice(f)
	return iu
}

// SetImage sets the "Image" field.
func (iu *ItemUpdate) SetImage(s string) *ItemUpdate {
	iu.mutation.SetImage(s)
	return iu
}

// SetNillableImage sets the "Image" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableImage(s *string) *ItemUpdate {
	if s != nil {
		iu.SetImage(*s)
	}
	return iu
}

// SetArchived sets the "Archived" field.
func (iu *ItemUpdate) SetArchived(b bool) *ItemUpdate {
	iu.mutation.SetArchived(b)
	return iu
}

// SetNillableArchived sets the "Archived" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableArchived(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetArchived(*b)
	}
	return iu
}

// SetIsLicenseItem sets the "IsLicenseItem" field.
func (iu *ItemUpdate) SetIsLicenseItem(b bool) *ItemUpdate {
	iu.mutation.SetIsLicenseItem(b)
	return iu
}

// SetNillableIsLicenseItem sets the "IsLicenseItem" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableIsLicenseItem(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetIsLicenseItem(*b)
	}
	return iu
}

// SetLicenseGroup sets the "LicenseGroup" field.
func (iu *ItemUpdate) SetLicenseGroup(s string) *ItemUpdate {
	iu.mutation.SetLicenseGroup(s)
	return iu
}

// SetNillableLicenseGroup sets the "LicenseGroup" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableLicenseGroup(s *string) *ItemUpdate {
	if s != nil {
		iu.SetLicenseGroup(*s)
	}
	return iu
}

// SetIsPDFItem sets the "IsPDFItem" field.
func (iu *ItemUpdate) SetIsPDFItem(b bool) *ItemUpdate {
	iu.mutation.SetIsPDFItem(b)
	return iu
}

// SetNillableIsPDFItem sets the "IsPDFItem" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableIsPDFItem(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetIsPDFItem(*b)
	}
	return iu
}

// SetPDF sets the "PDF" field.
func (iu *ItemUpdate) SetPDF(s string) *ItemUpdate {
	iu.mutation.SetPDF(s)
	return iu
}

// SetNillablePDF sets the "PDF" field if the given value is not nil.
func (iu *ItemUpdate) SetNillablePDF(s *string) *ItemUpdate {
	if s != nil {
		iu.SetPDF(*s)
	}
	return iu
}

// SetItemOrder sets the "ItemOrder" field.
func (iu *ItemUpdate) SetItemOrder(i int) *ItemUpdate {
	iu.mutation.ResetItemOrder()
	iu.mutation.SetItemOrder(i)
	return iu
}

// SetNillableItemOrder sets the "ItemOrder" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableItemOrder(i *int) *ItemUpdate {
	if i != nil {
		iu.SetItemOrder(*i)
	}
	return iu
}

// AddItemOrder adds i to the "ItemOrder" field.
func (iu *ItemUpdate) AddItemOrder(i int) *ItemUpdate {
	iu.mutation.AddItemOrder(i)
	return iu
}

// SetItemColor sets the "ItemColor" field.
func (iu *ItemUpdate) SetItemColor(s string) *ItemUpdate {
	iu.mutation.SetItemColor(s)
	return iu
}

// SetNillableItemColor sets the "ItemColor" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableItemColor(s *string) *ItemUpdate {
	if s != nil {
		iu.SetItemColor(*s)
	}
	return iu
}

// SetItemTextColor sets the "ItemTextColor" field.
func (iu *ItemUpdate) SetItemTextColor(s string) *ItemUpdate {
	iu.mutation.SetItemTextColor(s)
	return iu
}

// SetNillableItemTextColor sets the "ItemTextColor" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableItemTextColor(s *string) *ItemUpdate {
	if s != nil {
		iu.SetItemTextColor(*s)
	}
	return iu
}

// SetLicenseItemID sets the "LicenseItem" edge to the Item entity by ID.
func (iu *ItemUpdate) SetLicenseItemID(id int) *ItemUpdate {
	iu.mutation.SetLicenseItemID(id)
	return iu
}

// SetNillableLicenseItemID sets the "LicenseItem" edge to the Item entity by ID if the given value is not nil.
func (iu *ItemUpdate) SetNillableLicenseItemID(id *int) *ItemUpdate {
	if id != nil {
		iu = iu.SetLicenseItemID(*id)
	}
	return iu
}

// SetLicenseItem sets the "LicenseItem" edge to the Item entity.
func (iu *ItemUpdate) SetLicenseItem(i *Item) *ItemUpdate {
	return iu.SetLicenseItemID(i.ID)
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// ClearLicenseItem clears the "LicenseItem" edge to the Item entity.
func (iu *ItemUpdate) ClearLicenseItem() *ItemUpdate {
	iu.mutation.ClearLicenseItem()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ItemUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := item.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Item.Name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Description(); ok {
		if err := item.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "Item.Description": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Price(); ok {
		if err := item.PriceValidator(v); err != nil {
			return &ValidationError{Name: "Price", err: fmt.Errorf(`ent: validator failed for field "Item.Price": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Image(); ok {
		if err := item.ImageValidator(v); err != nil {
			return &ValidationError{Name: "Image", err: fmt.Errorf(`ent: validator failed for field "Item.Image": %w`, err)}
		}
	}
	return nil
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(item.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.Price(); ok {
		_spec.SetField(item.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedPrice(); ok {
		_spec.AddField(item.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Image(); ok {
		_spec.SetField(item.FieldImage, field.TypeString, value)
	}
	if value, ok := iu.mutation.Archived(); ok {
		_spec.SetField(item.FieldArchived, field.TypeBool, value)
	}
	if value, ok := iu.mutation.IsLicenseItem(); ok {
		_spec.SetField(item.FieldIsLicenseItem, field.TypeBool, value)
	}
	if value, ok := iu.mutation.LicenseGroup(); ok {
		_spec.SetField(item.FieldLicenseGroup, field.TypeString, value)
	}
	if value, ok := iu.mutation.IsPDFItem(); ok {
		_spec.SetField(item.FieldIsPDFItem, field.TypeBool, value)
	}
	if value, ok := iu.mutation.PDF(); ok {
		_spec.SetField(item.FieldPDF, field.TypeString, value)
	}
	if value, ok := iu.mutation.ItemOrder(); ok {
		_spec.SetField(item.FieldItemOrder, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedItemOrder(); ok {
		_spec.AddField(item.FieldItemOrder, field.TypeInt, value)
	}
	if value, ok := iu.mutation.ItemColor(); ok {
		_spec.SetField(item.FieldItemColor, field.TypeString, value)
	}
	if value, ok := iu.mutation.ItemTextColor(); ok {
		_spec.SetField(item.FieldItemTextColor, field.TypeString, value)
	}
	if iu.mutation.LicenseItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.LicenseItemTable,
			Columns: []string{item.LicenseItemColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.LicenseItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.LicenseItemTable,
			Columns: []string{item.LicenseItemColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetName sets the "Name" field.
func (iuo *ItemUpdateOne) SetName(s string) *ItemUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableName(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetDescription sets the "Description" field.
func (iuo *ItemUpdateOne) SetDescription(s string) *ItemUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDescription(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// SetPrice sets the "Price" field.
func (iuo *ItemUpdateOne) SetPrice(f float64) *ItemUpdateOne {
	iuo.mutation.ResetPrice()
	iuo.mutation.SetPrice(f)
	return iuo
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillablePrice(f *float64) *ItemUpdateOne {
	if f != nil {
		iuo.SetPrice(*f)
	}
	return iuo
}

// AddPrice adds f to the "Price" field.
func (iuo *ItemUpdateOne) AddPrice(f float64) *ItemUpdateOne {
	iuo.mutation.AddPrice(f)
	return iuo
}

// SetImage sets the "Image" field.
func (iuo *ItemUpdateOne) SetImage(s string) *ItemUpdateOne {
	iuo.mutation.SetImage(s)
	return iuo
}

// SetNillableImage sets the "Image" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableImage(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetImage(*s)
	}
	return iuo
}

// SetArchived sets the "Archived" field.
func (iuo *ItemUpdateOne) SetArchived(b bool) *ItemUpdateOne {
	iuo.mutation.SetArchived(b)
	return iuo
}

// SetNillableArchived sets the "Archived" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableArchived(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetArchived(*b)
	}
	return iuo
}

// SetIsLicenseItem sets the "IsLicenseItem" field.
func (iuo *ItemUpdateOne) SetIsLicenseItem(b bool) *ItemUpdateOne {
	iuo.mutation.SetIsLicenseItem(b)
	return iuo
}

// SetNillableIsLicenseItem sets the "IsLicenseItem" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableIsLicenseItem(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetIsLicenseItem(*b)
	}
	return iuo
}

// SetLicenseGroup sets the "LicenseGroup" field.
func (iuo *ItemUpdateOne) SetLicenseGroup(s string) *ItemUpdateOne {
	iuo.mutation.SetLicenseGroup(s)
	return iuo
}

// SetNillableLicenseGroup sets the "LicenseGroup" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableLicenseGroup(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetLicenseGroup(*s)
	}
	return iuo
}

// SetIsPDFItem sets the "IsPDFItem" field.
func (iuo *ItemUpdateOne) SetIsPDFItem(b bool) *ItemUpdateOne {
	iuo.mutation.SetIsPDFItem(b)
	return iuo
}

// SetNillableIsPDFItem sets the "IsPDFItem" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableIsPDFItem(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetIsPDFItem(*b)
	}
	return iuo
}

// SetPDF sets the "PDF" field.
func (iuo *ItemUpdateOne) SetPDF(s string) *ItemUpdateOne {
	iuo.mutation.SetPDF(s)
	return iuo
}

// SetNillablePDF sets the "PDF" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillablePDF(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetPDF(*s)
	}
	return iuo
}

// SetItemOrder sets the "ItemOrder" field.
func (iuo *ItemUpdateOne) SetItemOrder(i int) *ItemUpdateOne {
	iuo.mutation.ResetItemOrder()
	iuo.mutation.SetItemOrder(i)
	return iuo
}

// SetNillableItemOrder sets the "ItemOrder" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableItemOrder(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetItemOrder(*i)
	}
	return iuo
}

// AddItemOrder adds i to the "ItemOrder" field.
func (iuo *ItemUpdateOne) AddItemOrder(i int) *ItemUpdateOne {
	iuo.mutation.AddItemOrder(i)
	return iuo
}

// SetItemColor sets the "ItemColor" field.
func (iuo *ItemUpdateOne) SetItemColor(s string) *ItemUpdateOne {
	iuo.mutation.SetItemColor(s)
	return iuo
}

// SetNillableItemColor sets the "ItemColor" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableItemColor(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetItemColor(*s)
	}
	return iuo
}

// SetItemTextColor sets the "ItemTextColor" field.
func (iuo *ItemUpdateOne) SetItemTextColor(s string) *ItemUpdateOne {
	iuo.mutation.SetItemTextColor(s)
	return iuo
}

// SetNillableItemTextColor sets the "ItemTextColor" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableItemTextColor(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetItemTextColor(*s)
	}
	return iuo
}

// SetLicenseItemID sets the "LicenseItem" edge to the Item entity by ID.
func (iuo *ItemUpdateOne) SetLicenseItemID(id int) *ItemUpdateOne {
	iuo.mutation.SetLicenseItemID(id)
	return iuo
}

// SetNillableLicenseItemID sets the "LicenseItem" edge to the Item entity by ID if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableLicenseItemID(id *int) *ItemUpdateOne {
	if id != nil {
		iuo = iuo.SetLicenseItemID(*id)
	}
	return iuo
}

// SetLicenseItem sets the "LicenseItem" edge to the Item entity.
func (iuo *ItemUpdateOne) SetLicenseItem(i *Item) *ItemUpdateOne {
	return iuo.SetLicenseItemID(i.ID)
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// ClearLicenseItem clears the "LicenseItem" edge to the Item entity.
func (iuo *ItemUpdateOne) ClearLicenseItem() *ItemUpdateOne {
	iuo.mutation.ClearLicenseItem()
	return iuo
}

// Where appends a list predicates to the ItemUpdate builder.
func (iuo *ItemUpdateOne) Where(ps ...predicate.Item) *ItemUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ItemUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := item.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Item.Name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Description(); ok {
		if err := item.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "Item.Description": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Price(); ok {
		if err := item.PriceValidator(v); err != nil {
			return &ValidationError{Name: "Price", err: fmt.Errorf(`ent: validator failed for field "Item.Price": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Image(); ok {
		if err := item.ImageValidator(v); err != nil {
			return &ValidationError{Name: "Image", err: fmt.Errorf(`ent: validator failed for field "Item.Image": %w`, err)}
		}
	}
	return nil
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(item.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Price(); ok {
		_spec.SetField(item.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedPrice(); ok {
		_spec.AddField(item.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Image(); ok {
		_spec.SetField(item.FieldImage, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Archived(); ok {
		_spec.SetField(item.FieldArchived, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.IsLicenseItem(); ok {
		_spec.SetField(item.FieldIsLicenseItem, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.LicenseGroup(); ok {
		_spec.SetField(item.FieldLicenseGroup, field.TypeString, value)
	}
	if value, ok := iuo.mutation.IsPDFItem(); ok {
		_spec.SetField(item.FieldIsPDFItem, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.PDF(); ok {
		_spec.SetField(item.FieldPDF, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ItemOrder(); ok {
		_spec.SetField(item.FieldItemOrder, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedItemOrder(); ok {
		_spec.AddField(item.FieldItemOrder, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.ItemColor(); ok {
		_spec.SetField(item.FieldItemColor, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ItemTextColor(); ok {
		_spec.SetField(item.FieldItemTextColor, field.TypeString, value)
	}
	if iuo.mutation.LicenseItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.LicenseItemTable,
			Columns: []string{item.LicenseItemColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.LicenseItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.LicenseItemTable,
			Columns: []string{item.LicenseItemColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
