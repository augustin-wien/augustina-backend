// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/augustin-wien/augustina-backend/ent/item"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (ic *ItemCreate) SetName(s string) *ItemCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetDescription sets the "Description" field.
func (ic *ItemCreate) SetDescription(s string) *ItemCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetPrice sets the "Price" field.
func (ic *ItemCreate) SetPrice(f float64) *ItemCreate {
	ic.mutation.SetPrice(f)
	return ic
}

// SetImage sets the "Image" field.
func (ic *ItemCreate) SetImage(s string) *ItemCreate {
	ic.mutation.SetImage(s)
	return ic
}

// SetArchived sets the "Archived" field.
func (ic *ItemCreate) SetArchived(b bool) *ItemCreate {
	ic.mutation.SetArchived(b)
	return ic
}

// SetNillableArchived sets the "Archived" field if the given value is not nil.
func (ic *ItemCreate) SetNillableArchived(b *bool) *ItemCreate {
	if b != nil {
		ic.SetArchived(*b)
	}
	return ic
}

// SetIsLicenseItem sets the "IsLicenseItem" field.
func (ic *ItemCreate) SetIsLicenseItem(b bool) *ItemCreate {
	ic.mutation.SetIsLicenseItem(b)
	return ic
}

// SetNillableIsLicenseItem sets the "IsLicenseItem" field if the given value is not nil.
func (ic *ItemCreate) SetNillableIsLicenseItem(b *bool) *ItemCreate {
	if b != nil {
		ic.SetIsLicenseItem(*b)
	}
	return ic
}

// SetLicenseGroup sets the "LicenseGroup" field.
func (ic *ItemCreate) SetLicenseGroup(s string) *ItemCreate {
	ic.mutation.SetLicenseGroup(s)
	return ic
}

// SetNillableLicenseGroup sets the "LicenseGroup" field if the given value is not nil.
func (ic *ItemCreate) SetNillableLicenseGroup(s *string) *ItemCreate {
	if s != nil {
		ic.SetLicenseGroup(*s)
	}
	return ic
}

// SetIsPDFItem sets the "IsPDFItem" field.
func (ic *ItemCreate) SetIsPDFItem(b bool) *ItemCreate {
	ic.mutation.SetIsPDFItem(b)
	return ic
}

// SetNillableIsPDFItem sets the "IsPDFItem" field if the given value is not nil.
func (ic *ItemCreate) SetNillableIsPDFItem(b *bool) *ItemCreate {
	if b != nil {
		ic.SetIsPDFItem(*b)
	}
	return ic
}

// SetPDF sets the "PDF" field.
func (ic *ItemCreate) SetPDF(s string) *ItemCreate {
	ic.mutation.SetPDF(s)
	return ic
}

// SetNillablePDF sets the "PDF" field if the given value is not nil.
func (ic *ItemCreate) SetNillablePDF(s *string) *ItemCreate {
	if s != nil {
		ic.SetPDF(*s)
	}
	return ic
}

// SetItemOrder sets the "ItemOrder" field.
func (ic *ItemCreate) SetItemOrder(i int) *ItemCreate {
	ic.mutation.SetItemOrder(i)
	return ic
}

// SetNillableItemOrder sets the "ItemOrder" field if the given value is not nil.
func (ic *ItemCreate) SetNillableItemOrder(i *int) *ItemCreate {
	if i != nil {
		ic.SetItemOrder(*i)
	}
	return ic
}

// SetItemColor sets the "ItemColor" field.
func (ic *ItemCreate) SetItemColor(s string) *ItemCreate {
	ic.mutation.SetItemColor(s)
	return ic
}

// SetNillableItemColor sets the "ItemColor" field if the given value is not nil.
func (ic *ItemCreate) SetNillableItemColor(s *string) *ItemCreate {
	if s != nil {
		ic.SetItemColor(*s)
	}
	return ic
}

// SetItemTextColor sets the "ItemTextColor" field.
func (ic *ItemCreate) SetItemTextColor(s string) *ItemCreate {
	ic.mutation.SetItemTextColor(s)
	return ic
}

// SetNillableItemTextColor sets the "ItemTextColor" field if the given value is not nil.
func (ic *ItemCreate) SetNillableItemTextColor(s *string) *ItemCreate {
	if s != nil {
		ic.SetItemTextColor(*s)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *ItemCreate) SetID(i int) *ItemCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetLicenseItemID sets the "LicenseItem" edge to the Item entity by ID.
func (ic *ItemCreate) SetLicenseItemID(id int) *ItemCreate {
	ic.mutation.SetLicenseItemID(id)
	return ic
}

// SetNillableLicenseItemID sets the "LicenseItem" edge to the Item entity by ID if the given value is not nil.
func (ic *ItemCreate) SetNillableLicenseItemID(id *int) *ItemCreate {
	if id != nil {
		ic = ic.SetLicenseItemID(*id)
	}
	return ic
}

// SetLicenseItem sets the "LicenseItem" edge to the Item entity.
func (ic *ItemCreate) SetLicenseItem(i *Item) *ItemCreate {
	return ic.SetLicenseItemID(i.ID)
}

// Mutation returns the ItemMutation object of the builder.
func (ic *ItemCreate) Mutation() *ItemMutation {
	return ic.mutation
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ItemCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ItemCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ItemCreate) defaults() {
	if _, ok := ic.mutation.Archived(); !ok {
		v := item.DefaultArchived
		ic.mutation.SetArchived(v)
	}
	if _, ok := ic.mutation.IsLicenseItem(); !ok {
		v := item.DefaultIsLicenseItem
		ic.mutation.SetIsLicenseItem(v)
	}
	if _, ok := ic.mutation.LicenseGroup(); !ok {
		v := item.DefaultLicenseGroup
		ic.mutation.SetLicenseGroup(v)
	}
	if _, ok := ic.mutation.IsPDFItem(); !ok {
		v := item.DefaultIsPDFItem
		ic.mutation.SetIsPDFItem(v)
	}
	if _, ok := ic.mutation.PDF(); !ok {
		v := item.DefaultPDF
		ic.mutation.SetPDF(v)
	}
	if _, ok := ic.mutation.ItemOrder(); !ok {
		v := item.DefaultItemOrder
		ic.mutation.SetItemOrder(v)
	}
	if _, ok := ic.mutation.ItemColor(); !ok {
		v := item.DefaultItemColor
		ic.mutation.SetItemColor(v)
	}
	if _, ok := ic.mutation.ItemTextColor(); !ok {
		v := item.DefaultItemTextColor
		ic.mutation.SetItemTextColor(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ItemCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Item.Name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := item.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Item.Name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "Description", err: errors.New(`ent: missing required field "Item.Description"`)}
	}
	if v, ok := ic.mutation.Description(); ok {
		if err := item.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "Item.Description": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Price(); !ok {
		return &ValidationError{Name: "Price", err: errors.New(`ent: missing required field "Item.Price"`)}
	}
	if v, ok := ic.mutation.Price(); ok {
		if err := item.PriceValidator(v); err != nil {
			return &ValidationError{Name: "Price", err: fmt.Errorf(`ent: validator failed for field "Item.Price": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Image(); !ok {
		return &ValidationError{Name: "Image", err: errors.New(`ent: missing required field "Item.Image"`)}
	}
	if v, ok := ic.mutation.Image(); ok {
		if err := item.ImageValidator(v); err != nil {
			return &ValidationError{Name: "Image", err: fmt.Errorf(`ent: validator failed for field "Item.Image": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Archived(); !ok {
		return &ValidationError{Name: "Archived", err: errors.New(`ent: missing required field "Item.Archived"`)}
	}
	if _, ok := ic.mutation.IsLicenseItem(); !ok {
		return &ValidationError{Name: "IsLicenseItem", err: errors.New(`ent: missing required field "Item.IsLicenseItem"`)}
	}
	if _, ok := ic.mutation.LicenseGroup(); !ok {
		return &ValidationError{Name: "LicenseGroup", err: errors.New(`ent: missing required field "Item.LicenseGroup"`)}
	}
	if _, ok := ic.mutation.IsPDFItem(); !ok {
		return &ValidationError{Name: "IsPDFItem", err: errors.New(`ent: missing required field "Item.IsPDFItem"`)}
	}
	if _, ok := ic.mutation.PDF(); !ok {
		return &ValidationError{Name: "PDF", err: errors.New(`ent: missing required field "Item.PDF"`)}
	}
	if _, ok := ic.mutation.ItemOrder(); !ok {
		return &ValidationError{Name: "ItemOrder", err: errors.New(`ent: missing required field "Item.ItemOrder"`)}
	}
	if _, ok := ic.mutation.ItemColor(); !ok {
		return &ValidationError{Name: "ItemColor", err: errors.New(`ent: missing required field "Item.ItemColor"`)}
	}
	if _, ok := ic.mutation.ItemTextColor(); !ok {
		return &ValidationError{Name: "ItemTextColor", err: errors.New(`ent: missing required field "Item.ItemTextColor"`)}
	}
	if v, ok := ic.mutation.ID(); ok {
		if err := item.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Item.id": %w`, err)}
		}
	}
	return nil
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ItemCreate) createSpec() (*Item, *sqlgraph.CreateSpec) {
	var (
		_node = &Item{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(item.Table, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(item.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.Price(); ok {
		_spec.SetField(item.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ic.mutation.Image(); ok {
		_spec.SetField(item.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := ic.mutation.Archived(); ok {
		_spec.SetField(item.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if value, ok := ic.mutation.IsLicenseItem(); ok {
		_spec.SetField(item.FieldIsLicenseItem, field.TypeBool, value)
		_node.IsLicenseItem = value
	}
	if value, ok := ic.mutation.LicenseGroup(); ok {
		_spec.SetField(item.FieldLicenseGroup, field.TypeString, value)
		_node.LicenseGroup = value
	}
	if value, ok := ic.mutation.IsPDFItem(); ok {
		_spec.SetField(item.FieldIsPDFItem, field.TypeBool, value)
		_node.IsPDFItem = value
	}
	if value, ok := ic.mutation.PDF(); ok {
		_spec.SetField(item.FieldPDF, field.TypeString, value)
		_node.PDF = value
	}
	if value, ok := ic.mutation.ItemOrder(); ok {
		_spec.SetField(item.FieldItemOrder, field.TypeInt, value)
		_node.ItemOrder = value
	}
	if value, ok := ic.mutation.ItemColor(); ok {
		_spec.SetField(item.FieldItemColor, field.TypeString, value)
		_node.ItemColor = value
	}
	if value, ok := ic.mutation.ItemTextColor(); ok {
		_spec.SetField(item.FieldItemTextColor, field.TypeString, value)
		_node.ItemTextColor = value
	}
	if nodes := ic.mutation.LicenseItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.LicenseItemTable,
			Columns: []string{item.LicenseItemColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.licenseitem = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemCreateBulk is the builder for creating many Item entities in bulk.
type ItemCreateBulk struct {
	config
	err      error
	builders []*ItemCreate
}

// Save creates the Item entities in the database.
func (icb *ItemCreateBulk) Save(ctx context.Context) ([]*Item, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Item, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ItemCreateBulk) SaveX(ctx context.Context) []*Item {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ItemCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ItemCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
