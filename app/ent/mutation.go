// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/augustin-wien/augustina-backend/ent/comment"
	"github.com/augustin-wien/augustina-backend/ent/item"
	"github.com/augustin-wien/augustina-backend/ent/location"
	"github.com/augustin-wien/augustina-backend/ent/predicate"
	"github.com/augustin-wien/augustina-backend/ent/settings"
	"github.com/augustin-wien/augustina-backend/ent/vendor"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeComment  = "Comment"
	TypeItem     = "Item"
	TypeLocation = "Location"
	TypeSettings = "Settings"
	TypeVendor   = "Vendor"
)

// CommentMutation represents an operation that mutates the Comment nodes in the graph.
type CommentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	comment       *string
	warning       *bool
	created_at    *time.Time
	resolved_at   *time.Time
	clearedFields map[string]struct{}
	vendor        *int
	clearedvendor bool
	done          bool
	oldValue      func(context.Context) (*Comment, error)
	predicates    []predicate.Comment
}

var _ ent.Mutation = (*CommentMutation)(nil)

// commentOption allows management of the mutation configuration using functional options.
type commentOption func(*CommentMutation)

// newCommentMutation creates new mutation for the Comment entity.
func newCommentMutation(c config, op Op, opts ...commentOption) *CommentMutation {
	m := &CommentMutation{
		config:        c,
		op:            op,
		typ:           TypeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentID sets the ID field of the mutation.
func withCommentID(id int) commentOption {
	return func(m *CommentMutation) {
		var (
			err   error
			once  sync.Once
			value *Comment
		)
		m.oldValue = func(ctx context.Context) (*Comment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComment sets the old Comment of the mutation.
func withComment(node *Comment) commentOption {
	return func(m *CommentMutation) {
		m.oldValue = func(context.Context) (*Comment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Comment entities.
func (m *CommentMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Comment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetComment sets the "comment" field.
func (m *CommentMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *CommentMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *CommentMutation) ResetComment() {
	m.comment = nil
}

// SetWarning sets the "warning" field.
func (m *CommentMutation) SetWarning(b bool) {
	m.warning = &b
}

// Warning returns the value of the "warning" field in the mutation.
func (m *CommentMutation) Warning() (r bool, exists bool) {
	v := m.warning
	if v == nil {
		return
	}
	return *v, true
}

// OldWarning returns the old "warning" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldWarning(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWarning is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWarning requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWarning: %w", err)
	}
	return oldValue.Warning, nil
}

// ResetWarning resets all changes to the "warning" field.
func (m *CommentMutation) ResetWarning() {
	m.warning = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetResolvedAt sets the "resolved_at" field.
func (m *CommentMutation) SetResolvedAt(t time.Time) {
	m.resolved_at = &t
}

// ResolvedAt returns the value of the "resolved_at" field in the mutation.
func (m *CommentMutation) ResolvedAt() (r time.Time, exists bool) {
	v := m.resolved_at
	if v == nil {
		return
	}
	return *v, true
}

// OldResolvedAt returns the old "resolved_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldResolvedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResolvedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResolvedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolvedAt: %w", err)
	}
	return oldValue.ResolvedAt, nil
}

// ResetResolvedAt resets all changes to the "resolved_at" field.
func (m *CommentMutation) ResetResolvedAt() {
	m.resolved_at = nil
}

// SetVendorID sets the "vendor" edge to the Vendor entity by id.
func (m *CommentMutation) SetVendorID(id int) {
	m.vendor = &id
}

// ClearVendor clears the "vendor" edge to the Vendor entity.
func (m *CommentMutation) ClearVendor() {
	m.clearedvendor = true
}

// VendorCleared reports if the "vendor" edge to the Vendor entity was cleared.
func (m *CommentMutation) VendorCleared() bool {
	return m.clearedvendor
}

// VendorID returns the "vendor" edge ID in the mutation.
func (m *CommentMutation) VendorID() (id int, exists bool) {
	if m.vendor != nil {
		return *m.vendor, true
	}
	return
}

// VendorIDs returns the "vendor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VendorID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) VendorIDs() (ids []int) {
	if id := m.vendor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVendor resets all changes to the "vendor" edge.
func (m *CommentMutation) ResetVendor() {
	m.vendor = nil
	m.clearedvendor = false
}

// Where appends a list predicates to the CommentMutation builder.
func (m *CommentMutation) Where(ps ...predicate.Comment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Comment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Comment).
func (m *CommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.comment != nil {
		fields = append(fields, comment.FieldComment)
	}
	if m.warning != nil {
		fields = append(fields, comment.FieldWarning)
	}
	if m.created_at != nil {
		fields = append(fields, comment.FieldCreatedAt)
	}
	if m.resolved_at != nil {
		fields = append(fields, comment.FieldResolvedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldComment:
		return m.Comment()
	case comment.FieldWarning:
		return m.Warning()
	case comment.FieldCreatedAt:
		return m.CreatedAt()
	case comment.FieldResolvedAt:
		return m.ResolvedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comment.FieldComment:
		return m.OldComment(ctx)
	case comment.FieldWarning:
		return m.OldWarning(ctx)
	case comment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comment.FieldResolvedAt:
		return m.OldResolvedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Comment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comment.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case comment.FieldWarning:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWarning(v)
		return nil
	case comment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comment.FieldResolvedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolvedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Comment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Comment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMutation) ResetField(name string) error {
	switch name {
	case comment.FieldComment:
		m.ResetComment()
		return nil
	case comment.FieldWarning:
		m.ResetWarning()
		return nil
	case comment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comment.FieldResolvedAt:
		m.ResetResolvedAt()
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vendor != nil {
		edges = append(edges, comment.EdgeVendor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeVendor:
		if id := m.vendor; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvendor {
		edges = append(edges, comment.EdgeVendor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMutation) EdgeCleared(name string) bool {
	switch name {
	case comment.EdgeVendor:
		return m.clearedvendor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMutation) ClearEdge(name string) error {
	switch name {
	case comment.EdgeVendor:
		m.ClearVendor()
		return nil
	}
	return fmt.Errorf("unknown Comment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMutation) ResetEdge(name string) error {
	switch name {
	case comment.EdgeVendor:
		m.ResetVendor()
		return nil
	}
	return fmt.Errorf("unknown Comment edge %s", name)
}

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_Name               *string
	_Description        *string
	_Price              *float64
	add_Price           *float64
	_Image              *string
	_Archived           *bool
	_IsLicenseItem      *bool
	_LicenseGroup       *string
	_IsPDFItem          *bool
	_PDF                *string
	_ItemOrder          *int
	add_ItemOrder       *int
	_ItemColor          *string
	_ItemTextColor      *string
	clearedFields       map[string]struct{}
	_LicenseItem        *int
	cleared_LicenseItem bool
	done                bool
	oldValue            func(context.Context) (*Item, error)
	predicates          []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Item entities.
func (m *ItemMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *ItemMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *ItemMutation) ResetName() {
	m._Name = nil
}

// SetDescription sets the "Description" field.
func (m *ItemMutation) SetDescription(s string) {
	m._Description = &s
}

// Description returns the value of the "Description" field in the mutation.
func (m *ItemMutation) Description() (r string, exists bool) {
	v := m._Description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "Description" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "Description" field.
func (m *ItemMutation) ResetDescription() {
	m._Description = nil
}

// SetPrice sets the "Price" field.
func (m *ItemMutation) SetPrice(f float64) {
	m._Price = &f
	m.add_Price = nil
}

// Price returns the value of the "Price" field in the mutation.
func (m *ItemMutation) Price() (r float64, exists bool) {
	v := m._Price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "Price" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "Price" field.
func (m *ItemMutation) AddPrice(f float64) {
	if m.add_Price != nil {
		*m.add_Price += f
	} else {
		m.add_Price = &f
	}
}

// AddedPrice returns the value that was added to the "Price" field in this mutation.
func (m *ItemMutation) AddedPrice() (r float64, exists bool) {
	v := m.add_Price
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "Price" field.
func (m *ItemMutation) ResetPrice() {
	m._Price = nil
	m.add_Price = nil
}

// SetImage sets the "Image" field.
func (m *ItemMutation) SetImage(s string) {
	m._Image = &s
}

// Image returns the value of the "Image" field in the mutation.
func (m *ItemMutation) Image() (r string, exists bool) {
	v := m._Image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "Image" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "Image" field.
func (m *ItemMutation) ResetImage() {
	m._Image = nil
}

// SetArchived sets the "Archived" field.
func (m *ItemMutation) SetArchived(b bool) {
	m._Archived = &b
}

// Archived returns the value of the "Archived" field in the mutation.
func (m *ItemMutation) Archived() (r bool, exists bool) {
	v := m._Archived
	if v == nil {
		return
	}
	return *v, true
}

// OldArchived returns the old "Archived" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldArchived(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchived is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchived requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchived: %w", err)
	}
	return oldValue.Archived, nil
}

// ResetArchived resets all changes to the "Archived" field.
func (m *ItemMutation) ResetArchived() {
	m._Archived = nil
}

// SetIsLicenseItem sets the "IsLicenseItem" field.
func (m *ItemMutation) SetIsLicenseItem(b bool) {
	m._IsLicenseItem = &b
}

// IsLicenseItem returns the value of the "IsLicenseItem" field in the mutation.
func (m *ItemMutation) IsLicenseItem() (r bool, exists bool) {
	v := m._IsLicenseItem
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLicenseItem returns the old "IsLicenseItem" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldIsLicenseItem(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLicenseItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLicenseItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLicenseItem: %w", err)
	}
	return oldValue.IsLicenseItem, nil
}

// ResetIsLicenseItem resets all changes to the "IsLicenseItem" field.
func (m *ItemMutation) ResetIsLicenseItem() {
	m._IsLicenseItem = nil
}

// SetLicenseGroup sets the "LicenseGroup" field.
func (m *ItemMutation) SetLicenseGroup(s string) {
	m._LicenseGroup = &s
}

// LicenseGroup returns the value of the "LicenseGroup" field in the mutation.
func (m *ItemMutation) LicenseGroup() (r string, exists bool) {
	v := m._LicenseGroup
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseGroup returns the old "LicenseGroup" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldLicenseGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseGroup: %w", err)
	}
	return oldValue.LicenseGroup, nil
}

// ResetLicenseGroup resets all changes to the "LicenseGroup" field.
func (m *ItemMutation) ResetLicenseGroup() {
	m._LicenseGroup = nil
}

// SetIsPDFItem sets the "IsPDFItem" field.
func (m *ItemMutation) SetIsPDFItem(b bool) {
	m._IsPDFItem = &b
}

// IsPDFItem returns the value of the "IsPDFItem" field in the mutation.
func (m *ItemMutation) IsPDFItem() (r bool, exists bool) {
	v := m._IsPDFItem
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPDFItem returns the old "IsPDFItem" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldIsPDFItem(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPDFItem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPDFItem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPDFItem: %w", err)
	}
	return oldValue.IsPDFItem, nil
}

// ResetIsPDFItem resets all changes to the "IsPDFItem" field.
func (m *ItemMutation) ResetIsPDFItem() {
	m._IsPDFItem = nil
}

// SetPDF sets the "PDF" field.
func (m *ItemMutation) SetPDF(s string) {
	m._PDF = &s
}

// PDF returns the value of the "PDF" field in the mutation.
func (m *ItemMutation) PDF() (r string, exists bool) {
	v := m._PDF
	if v == nil {
		return
	}
	return *v, true
}

// OldPDF returns the old "PDF" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPDF(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPDF is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPDF requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPDF: %w", err)
	}
	return oldValue.PDF, nil
}

// ResetPDF resets all changes to the "PDF" field.
func (m *ItemMutation) ResetPDF() {
	m._PDF = nil
}

// SetItemOrder sets the "ItemOrder" field.
func (m *ItemMutation) SetItemOrder(i int) {
	m._ItemOrder = &i
	m.add_ItemOrder = nil
}

// ItemOrder returns the value of the "ItemOrder" field in the mutation.
func (m *ItemMutation) ItemOrder() (r int, exists bool) {
	v := m._ItemOrder
	if v == nil {
		return
	}
	return *v, true
}

// OldItemOrder returns the old "ItemOrder" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldItemOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemOrder: %w", err)
	}
	return oldValue.ItemOrder, nil
}

// AddItemOrder adds i to the "ItemOrder" field.
func (m *ItemMutation) AddItemOrder(i int) {
	if m.add_ItemOrder != nil {
		*m.add_ItemOrder += i
	} else {
		m.add_ItemOrder = &i
	}
}

// AddedItemOrder returns the value that was added to the "ItemOrder" field in this mutation.
func (m *ItemMutation) AddedItemOrder() (r int, exists bool) {
	v := m.add_ItemOrder
	if v == nil {
		return
	}
	return *v, true
}

// ResetItemOrder resets all changes to the "ItemOrder" field.
func (m *ItemMutation) ResetItemOrder() {
	m._ItemOrder = nil
	m.add_ItemOrder = nil
}

// SetItemColor sets the "ItemColor" field.
func (m *ItemMutation) SetItemColor(s string) {
	m._ItemColor = &s
}

// ItemColor returns the value of the "ItemColor" field in the mutation.
func (m *ItemMutation) ItemColor() (r string, exists bool) {
	v := m._ItemColor
	if v == nil {
		return
	}
	return *v, true
}

// OldItemColor returns the old "ItemColor" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldItemColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemColor: %w", err)
	}
	return oldValue.ItemColor, nil
}

// ResetItemColor resets all changes to the "ItemColor" field.
func (m *ItemMutation) ResetItemColor() {
	m._ItemColor = nil
}

// SetItemTextColor sets the "ItemTextColor" field.
func (m *ItemMutation) SetItemTextColor(s string) {
	m._ItemTextColor = &s
}

// ItemTextColor returns the value of the "ItemTextColor" field in the mutation.
func (m *ItemMutation) ItemTextColor() (r string, exists bool) {
	v := m._ItemTextColor
	if v == nil {
		return
	}
	return *v, true
}

// OldItemTextColor returns the old "ItemTextColor" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldItemTextColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemTextColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemTextColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemTextColor: %w", err)
	}
	return oldValue.ItemTextColor, nil
}

// ResetItemTextColor resets all changes to the "ItemTextColor" field.
func (m *ItemMutation) ResetItemTextColor() {
	m._ItemTextColor = nil
}

// SetLicenseItemID sets the "LicenseItem" edge to the Item entity by id.
func (m *ItemMutation) SetLicenseItemID(id int) {
	m._LicenseItem = &id
}

// ClearLicenseItem clears the "LicenseItem" edge to the Item entity.
func (m *ItemMutation) ClearLicenseItem() {
	m.cleared_LicenseItem = true
}

// LicenseItemCleared reports if the "LicenseItem" edge to the Item entity was cleared.
func (m *ItemMutation) LicenseItemCleared() bool {
	return m.cleared_LicenseItem
}

// LicenseItemID returns the "LicenseItem" edge ID in the mutation.
func (m *ItemMutation) LicenseItemID() (id int, exists bool) {
	if m._LicenseItem != nil {
		return *m._LicenseItem, true
	}
	return
}

// LicenseItemIDs returns the "LicenseItem" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LicenseItemID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) LicenseItemIDs() (ids []int) {
	if id := m._LicenseItem; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLicenseItem resets all changes to the "LicenseItem" edge.
func (m *ItemMutation) ResetLicenseItem() {
	m._LicenseItem = nil
	m.cleared_LicenseItem = false
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Item, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m._Name != nil {
		fields = append(fields, item.FieldName)
	}
	if m._Description != nil {
		fields = append(fields, item.FieldDescription)
	}
	if m._Price != nil {
		fields = append(fields, item.FieldPrice)
	}
	if m._Image != nil {
		fields = append(fields, item.FieldImage)
	}
	if m._Archived != nil {
		fields = append(fields, item.FieldArchived)
	}
	if m._IsLicenseItem != nil {
		fields = append(fields, item.FieldIsLicenseItem)
	}
	if m._LicenseGroup != nil {
		fields = append(fields, item.FieldLicenseGroup)
	}
	if m._IsPDFItem != nil {
		fields = append(fields, item.FieldIsPDFItem)
	}
	if m._PDF != nil {
		fields = append(fields, item.FieldPDF)
	}
	if m._ItemOrder != nil {
		fields = append(fields, item.FieldItemOrder)
	}
	if m._ItemColor != nil {
		fields = append(fields, item.FieldItemColor)
	}
	if m._ItemTextColor != nil {
		fields = append(fields, item.FieldItemTextColor)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldName:
		return m.Name()
	case item.FieldDescription:
		return m.Description()
	case item.FieldPrice:
		return m.Price()
	case item.FieldImage:
		return m.Image()
	case item.FieldArchived:
		return m.Archived()
	case item.FieldIsLicenseItem:
		return m.IsLicenseItem()
	case item.FieldLicenseGroup:
		return m.LicenseGroup()
	case item.FieldIsPDFItem:
		return m.IsPDFItem()
	case item.FieldPDF:
		return m.PDF()
	case item.FieldItemOrder:
		return m.ItemOrder()
	case item.FieldItemColor:
		return m.ItemColor()
	case item.FieldItemTextColor:
		return m.ItemTextColor()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldName:
		return m.OldName(ctx)
	case item.FieldDescription:
		return m.OldDescription(ctx)
	case item.FieldPrice:
		return m.OldPrice(ctx)
	case item.FieldImage:
		return m.OldImage(ctx)
	case item.FieldArchived:
		return m.OldArchived(ctx)
	case item.FieldIsLicenseItem:
		return m.OldIsLicenseItem(ctx)
	case item.FieldLicenseGroup:
		return m.OldLicenseGroup(ctx)
	case item.FieldIsPDFItem:
		return m.OldIsPDFItem(ctx)
	case item.FieldPDF:
		return m.OldPDF(ctx)
	case item.FieldItemOrder:
		return m.OldItemOrder(ctx)
	case item.FieldItemColor:
		return m.OldItemColor(ctx)
	case item.FieldItemTextColor:
		return m.OldItemTextColor(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case item.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case item.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case item.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case item.FieldArchived:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchived(v)
		return nil
	case item.FieldIsLicenseItem:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLicenseItem(v)
		return nil
	case item.FieldLicenseGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseGroup(v)
		return nil
	case item.FieldIsPDFItem:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPDFItem(v)
		return nil
	case item.FieldPDF:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPDF(v)
		return nil
	case item.FieldItemOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemOrder(v)
		return nil
	case item.FieldItemColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemColor(v)
		return nil
	case item.FieldItemTextColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemTextColor(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	var fields []string
	if m.add_Price != nil {
		fields = append(fields, item.FieldPrice)
	}
	if m.add_ItemOrder != nil {
		fields = append(fields, item.FieldItemOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case item.FieldPrice:
		return m.AddedPrice()
	case item.FieldItemOrder:
		return m.AddedItemOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case item.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case item.FieldItemOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddItemOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldName:
		m.ResetName()
		return nil
	case item.FieldDescription:
		m.ResetDescription()
		return nil
	case item.FieldPrice:
		m.ResetPrice()
		return nil
	case item.FieldImage:
		m.ResetImage()
		return nil
	case item.FieldArchived:
		m.ResetArchived()
		return nil
	case item.FieldIsLicenseItem:
		m.ResetIsLicenseItem()
		return nil
	case item.FieldLicenseGroup:
		m.ResetLicenseGroup()
		return nil
	case item.FieldIsPDFItem:
		m.ResetIsPDFItem()
		return nil
	case item.FieldPDF:
		m.ResetPDF()
		return nil
	case item.FieldItemOrder:
		m.ResetItemOrder()
		return nil
	case item.FieldItemColor:
		m.ResetItemColor()
		return nil
	case item.FieldItemTextColor:
		m.ResetItemTextColor()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._LicenseItem != nil {
		edges = append(edges, item.EdgeLicenseItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeLicenseItem:
		if id := m._LicenseItem; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_LicenseItem {
		edges = append(edges, item.EdgeLicenseItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeLicenseItem:
		return m.cleared_LicenseItem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeLicenseItem:
		m.ClearLicenseItem()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeLicenseItem:
		m.ResetLicenseItem()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// LocationMutation represents an operation that mutates the Location nodes in the graph.
type LocationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	address       *string
	longitude     *float64
	addlongitude  *float64
	latitude      *float64
	addlatitude   *float64
	zip           *string
	working_time  *string
	clearedFields map[string]struct{}
	vendor        *int
	clearedvendor bool
	done          bool
	oldValue      func(context.Context) (*Location, error)
	predicates    []predicate.Location
}

var _ ent.Mutation = (*LocationMutation)(nil)

// locationOption allows management of the mutation configuration using functional options.
type locationOption func(*LocationMutation)

// newLocationMutation creates new mutation for the Location entity.
func newLocationMutation(c config, op Op, opts ...locationOption) *LocationMutation {
	m := &LocationMutation{
		config:        c,
		op:            op,
		typ:           TypeLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocationID sets the ID field of the mutation.
func withLocationID(id int) locationOption {
	return func(m *LocationMutation) {
		var (
			err   error
			once  sync.Once
			value *Location
		)
		m.oldValue = func(ctx context.Context) (*Location, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Location.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocation sets the old Location of the mutation.
func withLocation(node *Location) locationOption {
	return func(m *LocationMutation) {
		m.oldValue = func(context.Context) (*Location, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Location entities.
func (m *LocationMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LocationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LocationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Location.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LocationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LocationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LocationMutation) ResetName() {
	m.name = nil
}

// SetAddress sets the "address" field.
func (m *LocationMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *LocationMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *LocationMutation) ResetAddress() {
	m.address = nil
}

// SetLongitude sets the "longitude" field.
func (m *LocationMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *LocationMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *LocationMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *LocationMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *LocationMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetLatitude sets the "latitude" field.
func (m *LocationMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *LocationMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *LocationMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *LocationMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *LocationMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetZip sets the "zip" field.
func (m *LocationMutation) SetZip(s string) {
	m.zip = &s
}

// Zip returns the value of the "zip" field in the mutation.
func (m *LocationMutation) Zip() (r string, exists bool) {
	v := m.zip
	if v == nil {
		return
	}
	return *v, true
}

// OldZip returns the old "zip" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldZip(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldZip is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldZip requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZip: %w", err)
	}
	return oldValue.Zip, nil
}

// ResetZip resets all changes to the "zip" field.
func (m *LocationMutation) ResetZip() {
	m.zip = nil
}

// SetWorkingTime sets the "working_time" field.
func (m *LocationMutation) SetWorkingTime(s string) {
	m.working_time = &s
}

// WorkingTime returns the value of the "working_time" field in the mutation.
func (m *LocationMutation) WorkingTime() (r string, exists bool) {
	v := m.working_time
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkingTime returns the old "working_time" field's value of the Location entity.
// If the Location object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocationMutation) OldWorkingTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkingTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkingTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkingTime: %w", err)
	}
	return oldValue.WorkingTime, nil
}

// ResetWorkingTime resets all changes to the "working_time" field.
func (m *LocationMutation) ResetWorkingTime() {
	m.working_time = nil
}

// SetVendorID sets the "vendor" edge to the Vendor entity by id.
func (m *LocationMutation) SetVendorID(id int) {
	m.vendor = &id
}

// ClearVendor clears the "vendor" edge to the Vendor entity.
func (m *LocationMutation) ClearVendor() {
	m.clearedvendor = true
}

// VendorCleared reports if the "vendor" edge to the Vendor entity was cleared.
func (m *LocationMutation) VendorCleared() bool {
	return m.clearedvendor
}

// VendorID returns the "vendor" edge ID in the mutation.
func (m *LocationMutation) VendorID() (id int, exists bool) {
	if m.vendor != nil {
		return *m.vendor, true
	}
	return
}

// VendorIDs returns the "vendor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VendorID instead. It exists only for internal usage by the builders.
func (m *LocationMutation) VendorIDs() (ids []int) {
	if id := m.vendor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVendor resets all changes to the "vendor" edge.
func (m *LocationMutation) ResetVendor() {
	m.vendor = nil
	m.clearedvendor = false
}

// Where appends a list predicates to the LocationMutation builder.
func (m *LocationMutation) Where(ps ...predicate.Location) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LocationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LocationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Location, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LocationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LocationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Location).
func (m *LocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LocationMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, location.FieldName)
	}
	if m.address != nil {
		fields = append(fields, location.FieldAddress)
	}
	if m.longitude != nil {
		fields = append(fields, location.FieldLongitude)
	}
	if m.latitude != nil {
		fields = append(fields, location.FieldLatitude)
	}
	if m.zip != nil {
		fields = append(fields, location.FieldZip)
	}
	if m.working_time != nil {
		fields = append(fields, location.FieldWorkingTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case location.FieldName:
		return m.Name()
	case location.FieldAddress:
		return m.Address()
	case location.FieldLongitude:
		return m.Longitude()
	case location.FieldLatitude:
		return m.Latitude()
	case location.FieldZip:
		return m.Zip()
	case location.FieldWorkingTime:
		return m.WorkingTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case location.FieldName:
		return m.OldName(ctx)
	case location.FieldAddress:
		return m.OldAddress(ctx)
	case location.FieldLongitude:
		return m.OldLongitude(ctx)
	case location.FieldLatitude:
		return m.OldLatitude(ctx)
	case location.FieldZip:
		return m.OldZip(ctx)
	case location.FieldWorkingTime:
		return m.OldWorkingTime(ctx)
	}
	return nil, fmt.Errorf("unknown Location field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case location.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case location.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case location.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case location.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case location.FieldZip:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZip(v)
		return nil
	case location.FieldWorkingTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkingTime(v)
		return nil
	}
	return fmt.Errorf("unknown Location field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LocationMutation) AddedFields() []string {
	var fields []string
	if m.addlongitude != nil {
		fields = append(fields, location.FieldLongitude)
	}
	if m.addlatitude != nil {
		fields = append(fields, location.FieldLatitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LocationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case location.FieldLongitude:
		return m.AddedLongitude()
	case location.FieldLatitude:
		return m.AddedLatitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case location.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	case location.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	}
	return fmt.Errorf("unknown Location numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LocationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Location nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LocationMutation) ResetField(name string) error {
	switch name {
	case location.FieldName:
		m.ResetName()
		return nil
	case location.FieldAddress:
		m.ResetAddress()
		return nil
	case location.FieldLongitude:
		m.ResetLongitude()
		return nil
	case location.FieldLatitude:
		m.ResetLatitude()
		return nil
	case location.FieldZip:
		m.ResetZip()
		return nil
	case location.FieldWorkingTime:
		m.ResetWorkingTime()
		return nil
	}
	return fmt.Errorf("unknown Location field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vendor != nil {
		edges = append(edges, location.EdgeVendor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LocationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case location.EdgeVendor:
		if id := m.vendor; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LocationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvendor {
		edges = append(edges, location.EdgeVendor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LocationMutation) EdgeCleared(name string) bool {
	switch name {
	case location.EdgeVendor:
		return m.clearedvendor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LocationMutation) ClearEdge(name string) error {
	switch name {
	case location.EdgeVendor:
		m.ClearVendor()
		return nil
	}
	return fmt.Errorf("unknown Location unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LocationMutation) ResetEdge(name string) error {
	switch name {
	case location.EdgeVendor:
		m.ResetVendor()
		return nil
	}
	return fmt.Errorf("unknown Location edge %s", name)
}

// SettingsMutation represents an operation that mutates the Settings nodes in the graph.
type SettingsMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	_AGBUrl                     *string
	_Color                      *string
	_FontColor                  *string
	_Logo                       *string
	_MaxOrderAmount             *int
	add_MaxOrderAmount          *int
	_OrgaCoversTransactionCosts *bool
	_WebshopIsClosed            *bool
	_VendorNotFoundHelpUrl      *string
	_MaintainanceModeHelpUrl    *string
	_VendorEmailPostfix         *string
	_NewspaperName              *string
	_QRCodeUrl                  *string
	_QRCodeLogoImgUrl           *string
	_MapCenterLat               *float64
	add_MapCenterLat            *float64
	_MapCenterLong              *float64
	add_MapCenterLong           *float64
	_UseVendorLicenseIdInShop   *bool
	_Favicon                    *string
	_QRCodeSettings             *string
	_QRCodeEnableLogo           *bool
	_UseTipInsteadOfDonation    *bool
	_ShopLanding                *bool
	_DigitalItemsUrl            *string
	clearedFields               map[string]struct{}
	_MainItem                   *int
	cleared_MainItem            bool
	done                        bool
	oldValue                    func(context.Context) (*Settings, error)
	predicates                  []predicate.Settings
}

var _ ent.Mutation = (*SettingsMutation)(nil)

// settingsOption allows management of the mutation configuration using functional options.
type settingsOption func(*SettingsMutation)

// newSettingsMutation creates new mutation for the Settings entity.
func newSettingsMutation(c config, op Op, opts ...settingsOption) *SettingsMutation {
	m := &SettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingsID sets the ID field of the mutation.
func withSettingsID(id int) settingsOption {
	return func(m *SettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Settings
		)
		m.oldValue = func(ctx context.Context) (*Settings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Settings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSettings sets the old Settings of the mutation.
func withSettings(node *Settings) settingsOption {
	return func(m *SettingsMutation) {
		m.oldValue = func(context.Context) (*Settings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Settings entities.
func (m *SettingsMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Settings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAGBUrl sets the "AGBUrl" field.
func (m *SettingsMutation) SetAGBUrl(s string) {
	m._AGBUrl = &s
}

// AGBUrl returns the value of the "AGBUrl" field in the mutation.
func (m *SettingsMutation) AGBUrl() (r string, exists bool) {
	v := m._AGBUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldAGBUrl returns the old "AGBUrl" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldAGBUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAGBUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAGBUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAGBUrl: %w", err)
	}
	return oldValue.AGBUrl, nil
}

// ResetAGBUrl resets all changes to the "AGBUrl" field.
func (m *SettingsMutation) ResetAGBUrl() {
	m._AGBUrl = nil
}

// SetColor sets the "Color" field.
func (m *SettingsMutation) SetColor(s string) {
	m._Color = &s
}

// Color returns the value of the "Color" field in the mutation.
func (m *SettingsMutation) Color() (r string, exists bool) {
	v := m._Color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "Color" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "Color" field.
func (m *SettingsMutation) ResetColor() {
	m._Color = nil
}

// SetFontColor sets the "FontColor" field.
func (m *SettingsMutation) SetFontColor(s string) {
	m._FontColor = &s
}

// FontColor returns the value of the "FontColor" field in the mutation.
func (m *SettingsMutation) FontColor() (r string, exists bool) {
	v := m._FontColor
	if v == nil {
		return
	}
	return *v, true
}

// OldFontColor returns the old "FontColor" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldFontColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFontColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFontColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFontColor: %w", err)
	}
	return oldValue.FontColor, nil
}

// ResetFontColor resets all changes to the "FontColor" field.
func (m *SettingsMutation) ResetFontColor() {
	m._FontColor = nil
}

// SetLogo sets the "Logo" field.
func (m *SettingsMutation) SetLogo(s string) {
	m._Logo = &s
}

// Logo returns the value of the "Logo" field in the mutation.
func (m *SettingsMutation) Logo() (r string, exists bool) {
	v := m._Logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "Logo" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ResetLogo resets all changes to the "Logo" field.
func (m *SettingsMutation) ResetLogo() {
	m._Logo = nil
}

// SetMaxOrderAmount sets the "MaxOrderAmount" field.
func (m *SettingsMutation) SetMaxOrderAmount(i int) {
	m._MaxOrderAmount = &i
	m.add_MaxOrderAmount = nil
}

// MaxOrderAmount returns the value of the "MaxOrderAmount" field in the mutation.
func (m *SettingsMutation) MaxOrderAmount() (r int, exists bool) {
	v := m._MaxOrderAmount
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxOrderAmount returns the old "MaxOrderAmount" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldMaxOrderAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxOrderAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxOrderAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxOrderAmount: %w", err)
	}
	return oldValue.MaxOrderAmount, nil
}

// AddMaxOrderAmount adds i to the "MaxOrderAmount" field.
func (m *SettingsMutation) AddMaxOrderAmount(i int) {
	if m.add_MaxOrderAmount != nil {
		*m.add_MaxOrderAmount += i
	} else {
		m.add_MaxOrderAmount = &i
	}
}

// AddedMaxOrderAmount returns the value that was added to the "MaxOrderAmount" field in this mutation.
func (m *SettingsMutation) AddedMaxOrderAmount() (r int, exists bool) {
	v := m.add_MaxOrderAmount
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxOrderAmount resets all changes to the "MaxOrderAmount" field.
func (m *SettingsMutation) ResetMaxOrderAmount() {
	m._MaxOrderAmount = nil
	m.add_MaxOrderAmount = nil
}

// SetOrgaCoversTransactionCosts sets the "OrgaCoversTransactionCosts" field.
func (m *SettingsMutation) SetOrgaCoversTransactionCosts(b bool) {
	m._OrgaCoversTransactionCosts = &b
}

// OrgaCoversTransactionCosts returns the value of the "OrgaCoversTransactionCosts" field in the mutation.
func (m *SettingsMutation) OrgaCoversTransactionCosts() (r bool, exists bool) {
	v := m._OrgaCoversTransactionCosts
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgaCoversTransactionCosts returns the old "OrgaCoversTransactionCosts" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldOrgaCoversTransactionCosts(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgaCoversTransactionCosts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgaCoversTransactionCosts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgaCoversTransactionCosts: %w", err)
	}
	return oldValue.OrgaCoversTransactionCosts, nil
}

// ResetOrgaCoversTransactionCosts resets all changes to the "OrgaCoversTransactionCosts" field.
func (m *SettingsMutation) ResetOrgaCoversTransactionCosts() {
	m._OrgaCoversTransactionCosts = nil
}

// SetWebshopIsClosed sets the "WebshopIsClosed" field.
func (m *SettingsMutation) SetWebshopIsClosed(b bool) {
	m._WebshopIsClosed = &b
}

// WebshopIsClosed returns the value of the "WebshopIsClosed" field in the mutation.
func (m *SettingsMutation) WebshopIsClosed() (r bool, exists bool) {
	v := m._WebshopIsClosed
	if v == nil {
		return
	}
	return *v, true
}

// OldWebshopIsClosed returns the old "WebshopIsClosed" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldWebshopIsClosed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebshopIsClosed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebshopIsClosed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebshopIsClosed: %w", err)
	}
	return oldValue.WebshopIsClosed, nil
}

// ResetWebshopIsClosed resets all changes to the "WebshopIsClosed" field.
func (m *SettingsMutation) ResetWebshopIsClosed() {
	m._WebshopIsClosed = nil
}

// SetVendorNotFoundHelpUrl sets the "VendorNotFoundHelpUrl" field.
func (m *SettingsMutation) SetVendorNotFoundHelpUrl(s string) {
	m._VendorNotFoundHelpUrl = &s
}

// VendorNotFoundHelpUrl returns the value of the "VendorNotFoundHelpUrl" field in the mutation.
func (m *SettingsMutation) VendorNotFoundHelpUrl() (r string, exists bool) {
	v := m._VendorNotFoundHelpUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorNotFoundHelpUrl returns the old "VendorNotFoundHelpUrl" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldVendorNotFoundHelpUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendorNotFoundHelpUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendorNotFoundHelpUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorNotFoundHelpUrl: %w", err)
	}
	return oldValue.VendorNotFoundHelpUrl, nil
}

// ResetVendorNotFoundHelpUrl resets all changes to the "VendorNotFoundHelpUrl" field.
func (m *SettingsMutation) ResetVendorNotFoundHelpUrl() {
	m._VendorNotFoundHelpUrl = nil
}

// SetMaintainanceModeHelpUrl sets the "MaintainanceModeHelpUrl" field.
func (m *SettingsMutation) SetMaintainanceModeHelpUrl(s string) {
	m._MaintainanceModeHelpUrl = &s
}

// MaintainanceModeHelpUrl returns the value of the "MaintainanceModeHelpUrl" field in the mutation.
func (m *SettingsMutation) MaintainanceModeHelpUrl() (r string, exists bool) {
	v := m._MaintainanceModeHelpUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldMaintainanceModeHelpUrl returns the old "MaintainanceModeHelpUrl" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldMaintainanceModeHelpUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaintainanceModeHelpUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaintainanceModeHelpUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaintainanceModeHelpUrl: %w", err)
	}
	return oldValue.MaintainanceModeHelpUrl, nil
}

// ResetMaintainanceModeHelpUrl resets all changes to the "MaintainanceModeHelpUrl" field.
func (m *SettingsMutation) ResetMaintainanceModeHelpUrl() {
	m._MaintainanceModeHelpUrl = nil
}

// SetVendorEmailPostfix sets the "VendorEmailPostfix" field.
func (m *SettingsMutation) SetVendorEmailPostfix(s string) {
	m._VendorEmailPostfix = &s
}

// VendorEmailPostfix returns the value of the "VendorEmailPostfix" field in the mutation.
func (m *SettingsMutation) VendorEmailPostfix() (r string, exists bool) {
	v := m._VendorEmailPostfix
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorEmailPostfix returns the old "VendorEmailPostfix" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldVendorEmailPostfix(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendorEmailPostfix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendorEmailPostfix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorEmailPostfix: %w", err)
	}
	return oldValue.VendorEmailPostfix, nil
}

// ResetVendorEmailPostfix resets all changes to the "VendorEmailPostfix" field.
func (m *SettingsMutation) ResetVendorEmailPostfix() {
	m._VendorEmailPostfix = nil
}

// SetNewspaperName sets the "NewspaperName" field.
func (m *SettingsMutation) SetNewspaperName(s string) {
	m._NewspaperName = &s
}

// NewspaperName returns the value of the "NewspaperName" field in the mutation.
func (m *SettingsMutation) NewspaperName() (r string, exists bool) {
	v := m._NewspaperName
	if v == nil {
		return
	}
	return *v, true
}

// OldNewspaperName returns the old "NewspaperName" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldNewspaperName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNewspaperName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNewspaperName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNewspaperName: %w", err)
	}
	return oldValue.NewspaperName, nil
}

// ResetNewspaperName resets all changes to the "NewspaperName" field.
func (m *SettingsMutation) ResetNewspaperName() {
	m._NewspaperName = nil
}

// SetQRCodeUrl sets the "QRCodeUrl" field.
func (m *SettingsMutation) SetQRCodeUrl(s string) {
	m._QRCodeUrl = &s
}

// QRCodeUrl returns the value of the "QRCodeUrl" field in the mutation.
func (m *SettingsMutation) QRCodeUrl() (r string, exists bool) {
	v := m._QRCodeUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldQRCodeUrl returns the old "QRCodeUrl" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldQRCodeUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQRCodeUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQRCodeUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQRCodeUrl: %w", err)
	}
	return oldValue.QRCodeUrl, nil
}

// ResetQRCodeUrl resets all changes to the "QRCodeUrl" field.
func (m *SettingsMutation) ResetQRCodeUrl() {
	m._QRCodeUrl = nil
}

// SetQRCodeLogoImgUrl sets the "QRCodeLogoImgUrl" field.
func (m *SettingsMutation) SetQRCodeLogoImgUrl(s string) {
	m._QRCodeLogoImgUrl = &s
}

// QRCodeLogoImgUrl returns the value of the "QRCodeLogoImgUrl" field in the mutation.
func (m *SettingsMutation) QRCodeLogoImgUrl() (r string, exists bool) {
	v := m._QRCodeLogoImgUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldQRCodeLogoImgUrl returns the old "QRCodeLogoImgUrl" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldQRCodeLogoImgUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQRCodeLogoImgUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQRCodeLogoImgUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQRCodeLogoImgUrl: %w", err)
	}
	return oldValue.QRCodeLogoImgUrl, nil
}

// ResetQRCodeLogoImgUrl resets all changes to the "QRCodeLogoImgUrl" field.
func (m *SettingsMutation) ResetQRCodeLogoImgUrl() {
	m._QRCodeLogoImgUrl = nil
}

// SetMapCenterLat sets the "MapCenterLat" field.
func (m *SettingsMutation) SetMapCenterLat(f float64) {
	m._MapCenterLat = &f
	m.add_MapCenterLat = nil
}

// MapCenterLat returns the value of the "MapCenterLat" field in the mutation.
func (m *SettingsMutation) MapCenterLat() (r float64, exists bool) {
	v := m._MapCenterLat
	if v == nil {
		return
	}
	return *v, true
}

// OldMapCenterLat returns the old "MapCenterLat" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldMapCenterLat(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMapCenterLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMapCenterLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMapCenterLat: %w", err)
	}
	return oldValue.MapCenterLat, nil
}

// AddMapCenterLat adds f to the "MapCenterLat" field.
func (m *SettingsMutation) AddMapCenterLat(f float64) {
	if m.add_MapCenterLat != nil {
		*m.add_MapCenterLat += f
	} else {
		m.add_MapCenterLat = &f
	}
}

// AddedMapCenterLat returns the value that was added to the "MapCenterLat" field in this mutation.
func (m *SettingsMutation) AddedMapCenterLat() (r float64, exists bool) {
	v := m.add_MapCenterLat
	if v == nil {
		return
	}
	return *v, true
}

// ResetMapCenterLat resets all changes to the "MapCenterLat" field.
func (m *SettingsMutation) ResetMapCenterLat() {
	m._MapCenterLat = nil
	m.add_MapCenterLat = nil
}

// SetMapCenterLong sets the "MapCenterLong" field.
func (m *SettingsMutation) SetMapCenterLong(f float64) {
	m._MapCenterLong = &f
	m.add_MapCenterLong = nil
}

// MapCenterLong returns the value of the "MapCenterLong" field in the mutation.
func (m *SettingsMutation) MapCenterLong() (r float64, exists bool) {
	v := m._MapCenterLong
	if v == nil {
		return
	}
	return *v, true
}

// OldMapCenterLong returns the old "MapCenterLong" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldMapCenterLong(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMapCenterLong is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMapCenterLong requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMapCenterLong: %w", err)
	}
	return oldValue.MapCenterLong, nil
}

// AddMapCenterLong adds f to the "MapCenterLong" field.
func (m *SettingsMutation) AddMapCenterLong(f float64) {
	if m.add_MapCenterLong != nil {
		*m.add_MapCenterLong += f
	} else {
		m.add_MapCenterLong = &f
	}
}

// AddedMapCenterLong returns the value that was added to the "MapCenterLong" field in this mutation.
func (m *SettingsMutation) AddedMapCenterLong() (r float64, exists bool) {
	v := m.add_MapCenterLong
	if v == nil {
		return
	}
	return *v, true
}

// ResetMapCenterLong resets all changes to the "MapCenterLong" field.
func (m *SettingsMutation) ResetMapCenterLong() {
	m._MapCenterLong = nil
	m.add_MapCenterLong = nil
}

// SetUseVendorLicenseIdInShop sets the "UseVendorLicenseIdInShop" field.
func (m *SettingsMutation) SetUseVendorLicenseIdInShop(b bool) {
	m._UseVendorLicenseIdInShop = &b
}

// UseVendorLicenseIdInShop returns the value of the "UseVendorLicenseIdInShop" field in the mutation.
func (m *SettingsMutation) UseVendorLicenseIdInShop() (r bool, exists bool) {
	v := m._UseVendorLicenseIdInShop
	if v == nil {
		return
	}
	return *v, true
}

// OldUseVendorLicenseIdInShop returns the old "UseVendorLicenseIdInShop" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldUseVendorLicenseIdInShop(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseVendorLicenseIdInShop is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseVendorLicenseIdInShop requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseVendorLicenseIdInShop: %w", err)
	}
	return oldValue.UseVendorLicenseIdInShop, nil
}

// ResetUseVendorLicenseIdInShop resets all changes to the "UseVendorLicenseIdInShop" field.
func (m *SettingsMutation) ResetUseVendorLicenseIdInShop() {
	m._UseVendorLicenseIdInShop = nil
}

// SetFavicon sets the "Favicon" field.
func (m *SettingsMutation) SetFavicon(s string) {
	m._Favicon = &s
}

// Favicon returns the value of the "Favicon" field in the mutation.
func (m *SettingsMutation) Favicon() (r string, exists bool) {
	v := m._Favicon
	if v == nil {
		return
	}
	return *v, true
}

// OldFavicon returns the old "Favicon" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldFavicon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFavicon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFavicon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFavicon: %w", err)
	}
	return oldValue.Favicon, nil
}

// ResetFavicon resets all changes to the "Favicon" field.
func (m *SettingsMutation) ResetFavicon() {
	m._Favicon = nil
}

// SetQRCodeSettings sets the "QRCodeSettings" field.
func (m *SettingsMutation) SetQRCodeSettings(s string) {
	m._QRCodeSettings = &s
}

// QRCodeSettings returns the value of the "QRCodeSettings" field in the mutation.
func (m *SettingsMutation) QRCodeSettings() (r string, exists bool) {
	v := m._QRCodeSettings
	if v == nil {
		return
	}
	return *v, true
}

// OldQRCodeSettings returns the old "QRCodeSettings" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldQRCodeSettings(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQRCodeSettings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQRCodeSettings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQRCodeSettings: %w", err)
	}
	return oldValue.QRCodeSettings, nil
}

// ResetQRCodeSettings resets all changes to the "QRCodeSettings" field.
func (m *SettingsMutation) ResetQRCodeSettings() {
	m._QRCodeSettings = nil
}

// SetQRCodeEnableLogo sets the "QRCodeEnableLogo" field.
func (m *SettingsMutation) SetQRCodeEnableLogo(b bool) {
	m._QRCodeEnableLogo = &b
}

// QRCodeEnableLogo returns the value of the "QRCodeEnableLogo" field in the mutation.
func (m *SettingsMutation) QRCodeEnableLogo() (r bool, exists bool) {
	v := m._QRCodeEnableLogo
	if v == nil {
		return
	}
	return *v, true
}

// OldQRCodeEnableLogo returns the old "QRCodeEnableLogo" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldQRCodeEnableLogo(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQRCodeEnableLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQRCodeEnableLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQRCodeEnableLogo: %w", err)
	}
	return oldValue.QRCodeEnableLogo, nil
}

// ResetQRCodeEnableLogo resets all changes to the "QRCodeEnableLogo" field.
func (m *SettingsMutation) ResetQRCodeEnableLogo() {
	m._QRCodeEnableLogo = nil
}

// SetUseTipInsteadOfDonation sets the "UseTipInsteadOfDonation" field.
func (m *SettingsMutation) SetUseTipInsteadOfDonation(b bool) {
	m._UseTipInsteadOfDonation = &b
}

// UseTipInsteadOfDonation returns the value of the "UseTipInsteadOfDonation" field in the mutation.
func (m *SettingsMutation) UseTipInsteadOfDonation() (r bool, exists bool) {
	v := m._UseTipInsteadOfDonation
	if v == nil {
		return
	}
	return *v, true
}

// OldUseTipInsteadOfDonation returns the old "UseTipInsteadOfDonation" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldUseTipInsteadOfDonation(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseTipInsteadOfDonation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseTipInsteadOfDonation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseTipInsteadOfDonation: %w", err)
	}
	return oldValue.UseTipInsteadOfDonation, nil
}

// ResetUseTipInsteadOfDonation resets all changes to the "UseTipInsteadOfDonation" field.
func (m *SettingsMutation) ResetUseTipInsteadOfDonation() {
	m._UseTipInsteadOfDonation = nil
}

// SetShopLanding sets the "ShopLanding" field.
func (m *SettingsMutation) SetShopLanding(b bool) {
	m._ShopLanding = &b
}

// ShopLanding returns the value of the "ShopLanding" field in the mutation.
func (m *SettingsMutation) ShopLanding() (r bool, exists bool) {
	v := m._ShopLanding
	if v == nil {
		return
	}
	return *v, true
}

// OldShopLanding returns the old "ShopLanding" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldShopLanding(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopLanding is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopLanding requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopLanding: %w", err)
	}
	return oldValue.ShopLanding, nil
}

// ResetShopLanding resets all changes to the "ShopLanding" field.
func (m *SettingsMutation) ResetShopLanding() {
	m._ShopLanding = nil
}

// SetDigitalItemsUrl sets the "DigitalItemsUrl" field.
func (m *SettingsMutation) SetDigitalItemsUrl(s string) {
	m._DigitalItemsUrl = &s
}

// DigitalItemsUrl returns the value of the "DigitalItemsUrl" field in the mutation.
func (m *SettingsMutation) DigitalItemsUrl() (r string, exists bool) {
	v := m._DigitalItemsUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldDigitalItemsUrl returns the old "DigitalItemsUrl" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldDigitalItemsUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDigitalItemsUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDigitalItemsUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDigitalItemsUrl: %w", err)
	}
	return oldValue.DigitalItemsUrl, nil
}

// ResetDigitalItemsUrl resets all changes to the "DigitalItemsUrl" field.
func (m *SettingsMutation) ResetDigitalItemsUrl() {
	m._DigitalItemsUrl = nil
}

// SetMainItemID sets the "MainItem" edge to the Item entity by id.
func (m *SettingsMutation) SetMainItemID(id int) {
	m._MainItem = &id
}

// ClearMainItem clears the "MainItem" edge to the Item entity.
func (m *SettingsMutation) ClearMainItem() {
	m.cleared_MainItem = true
}

// MainItemCleared reports if the "MainItem" edge to the Item entity was cleared.
func (m *SettingsMutation) MainItemCleared() bool {
	return m.cleared_MainItem
}

// MainItemID returns the "MainItem" edge ID in the mutation.
func (m *SettingsMutation) MainItemID() (id int, exists bool) {
	if m._MainItem != nil {
		return *m._MainItem, true
	}
	return
}

// MainItemIDs returns the "MainItem" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MainItemID instead. It exists only for internal usage by the builders.
func (m *SettingsMutation) MainItemIDs() (ids []int) {
	if id := m._MainItem; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMainItem resets all changes to the "MainItem" edge.
func (m *SettingsMutation) ResetMainItem() {
	m._MainItem = nil
	m.cleared_MainItem = false
}

// Where appends a list predicates to the SettingsMutation builder.
func (m *SettingsMutation) Where(ps ...predicate.Settings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Settings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Settings).
func (m *SettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingsMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m._AGBUrl != nil {
		fields = append(fields, settings.FieldAGBUrl)
	}
	if m._Color != nil {
		fields = append(fields, settings.FieldColor)
	}
	if m._FontColor != nil {
		fields = append(fields, settings.FieldFontColor)
	}
	if m._Logo != nil {
		fields = append(fields, settings.FieldLogo)
	}
	if m._MaxOrderAmount != nil {
		fields = append(fields, settings.FieldMaxOrderAmount)
	}
	if m._OrgaCoversTransactionCosts != nil {
		fields = append(fields, settings.FieldOrgaCoversTransactionCosts)
	}
	if m._WebshopIsClosed != nil {
		fields = append(fields, settings.FieldWebshopIsClosed)
	}
	if m._VendorNotFoundHelpUrl != nil {
		fields = append(fields, settings.FieldVendorNotFoundHelpUrl)
	}
	if m._MaintainanceModeHelpUrl != nil {
		fields = append(fields, settings.FieldMaintainanceModeHelpUrl)
	}
	if m._VendorEmailPostfix != nil {
		fields = append(fields, settings.FieldVendorEmailPostfix)
	}
	if m._NewspaperName != nil {
		fields = append(fields, settings.FieldNewspaperName)
	}
	if m._QRCodeUrl != nil {
		fields = append(fields, settings.FieldQRCodeUrl)
	}
	if m._QRCodeLogoImgUrl != nil {
		fields = append(fields, settings.FieldQRCodeLogoImgUrl)
	}
	if m._MapCenterLat != nil {
		fields = append(fields, settings.FieldMapCenterLat)
	}
	if m._MapCenterLong != nil {
		fields = append(fields, settings.FieldMapCenterLong)
	}
	if m._UseVendorLicenseIdInShop != nil {
		fields = append(fields, settings.FieldUseVendorLicenseIdInShop)
	}
	if m._Favicon != nil {
		fields = append(fields, settings.FieldFavicon)
	}
	if m._QRCodeSettings != nil {
		fields = append(fields, settings.FieldQRCodeSettings)
	}
	if m._QRCodeEnableLogo != nil {
		fields = append(fields, settings.FieldQRCodeEnableLogo)
	}
	if m._UseTipInsteadOfDonation != nil {
		fields = append(fields, settings.FieldUseTipInsteadOfDonation)
	}
	if m._ShopLanding != nil {
		fields = append(fields, settings.FieldShopLanding)
	}
	if m._DigitalItemsUrl != nil {
		fields = append(fields, settings.FieldDigitalItemsUrl)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldAGBUrl:
		return m.AGBUrl()
	case settings.FieldColor:
		return m.Color()
	case settings.FieldFontColor:
		return m.FontColor()
	case settings.FieldLogo:
		return m.Logo()
	case settings.FieldMaxOrderAmount:
		return m.MaxOrderAmount()
	case settings.FieldOrgaCoversTransactionCosts:
		return m.OrgaCoversTransactionCosts()
	case settings.FieldWebshopIsClosed:
		return m.WebshopIsClosed()
	case settings.FieldVendorNotFoundHelpUrl:
		return m.VendorNotFoundHelpUrl()
	case settings.FieldMaintainanceModeHelpUrl:
		return m.MaintainanceModeHelpUrl()
	case settings.FieldVendorEmailPostfix:
		return m.VendorEmailPostfix()
	case settings.FieldNewspaperName:
		return m.NewspaperName()
	case settings.FieldQRCodeUrl:
		return m.QRCodeUrl()
	case settings.FieldQRCodeLogoImgUrl:
		return m.QRCodeLogoImgUrl()
	case settings.FieldMapCenterLat:
		return m.MapCenterLat()
	case settings.FieldMapCenterLong:
		return m.MapCenterLong()
	case settings.FieldUseVendorLicenseIdInShop:
		return m.UseVendorLicenseIdInShop()
	case settings.FieldFavicon:
		return m.Favicon()
	case settings.FieldQRCodeSettings:
		return m.QRCodeSettings()
	case settings.FieldQRCodeEnableLogo:
		return m.QRCodeEnableLogo()
	case settings.FieldUseTipInsteadOfDonation:
		return m.UseTipInsteadOfDonation()
	case settings.FieldShopLanding:
		return m.ShopLanding()
	case settings.FieldDigitalItemsUrl:
		return m.DigitalItemsUrl()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case settings.FieldAGBUrl:
		return m.OldAGBUrl(ctx)
	case settings.FieldColor:
		return m.OldColor(ctx)
	case settings.FieldFontColor:
		return m.OldFontColor(ctx)
	case settings.FieldLogo:
		return m.OldLogo(ctx)
	case settings.FieldMaxOrderAmount:
		return m.OldMaxOrderAmount(ctx)
	case settings.FieldOrgaCoversTransactionCosts:
		return m.OldOrgaCoversTransactionCosts(ctx)
	case settings.FieldWebshopIsClosed:
		return m.OldWebshopIsClosed(ctx)
	case settings.FieldVendorNotFoundHelpUrl:
		return m.OldVendorNotFoundHelpUrl(ctx)
	case settings.FieldMaintainanceModeHelpUrl:
		return m.OldMaintainanceModeHelpUrl(ctx)
	case settings.FieldVendorEmailPostfix:
		return m.OldVendorEmailPostfix(ctx)
	case settings.FieldNewspaperName:
		return m.OldNewspaperName(ctx)
	case settings.FieldQRCodeUrl:
		return m.OldQRCodeUrl(ctx)
	case settings.FieldQRCodeLogoImgUrl:
		return m.OldQRCodeLogoImgUrl(ctx)
	case settings.FieldMapCenterLat:
		return m.OldMapCenterLat(ctx)
	case settings.FieldMapCenterLong:
		return m.OldMapCenterLong(ctx)
	case settings.FieldUseVendorLicenseIdInShop:
		return m.OldUseVendorLicenseIdInShop(ctx)
	case settings.FieldFavicon:
		return m.OldFavicon(ctx)
	case settings.FieldQRCodeSettings:
		return m.OldQRCodeSettings(ctx)
	case settings.FieldQRCodeEnableLogo:
		return m.OldQRCodeEnableLogo(ctx)
	case settings.FieldUseTipInsteadOfDonation:
		return m.OldUseTipInsteadOfDonation(ctx)
	case settings.FieldShopLanding:
		return m.OldShopLanding(ctx)
	case settings.FieldDigitalItemsUrl:
		return m.OldDigitalItemsUrl(ctx)
	}
	return nil, fmt.Errorf("unknown Settings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case settings.FieldAGBUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAGBUrl(v)
		return nil
	case settings.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case settings.FieldFontColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFontColor(v)
		return nil
	case settings.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case settings.FieldMaxOrderAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxOrderAmount(v)
		return nil
	case settings.FieldOrgaCoversTransactionCosts:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgaCoversTransactionCosts(v)
		return nil
	case settings.FieldWebshopIsClosed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebshopIsClosed(v)
		return nil
	case settings.FieldVendorNotFoundHelpUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorNotFoundHelpUrl(v)
		return nil
	case settings.FieldMaintainanceModeHelpUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaintainanceModeHelpUrl(v)
		return nil
	case settings.FieldVendorEmailPostfix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorEmailPostfix(v)
		return nil
	case settings.FieldNewspaperName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNewspaperName(v)
		return nil
	case settings.FieldQRCodeUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQRCodeUrl(v)
		return nil
	case settings.FieldQRCodeLogoImgUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQRCodeLogoImgUrl(v)
		return nil
	case settings.FieldMapCenterLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMapCenterLat(v)
		return nil
	case settings.FieldMapCenterLong:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMapCenterLong(v)
		return nil
	case settings.FieldUseVendorLicenseIdInShop:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseVendorLicenseIdInShop(v)
		return nil
	case settings.FieldFavicon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFavicon(v)
		return nil
	case settings.FieldQRCodeSettings:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQRCodeSettings(v)
		return nil
	case settings.FieldQRCodeEnableLogo:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQRCodeEnableLogo(v)
		return nil
	case settings.FieldUseTipInsteadOfDonation:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseTipInsteadOfDonation(v)
		return nil
	case settings.FieldShopLanding:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopLanding(v)
		return nil
	case settings.FieldDigitalItemsUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDigitalItemsUrl(v)
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingsMutation) AddedFields() []string {
	var fields []string
	if m.add_MaxOrderAmount != nil {
		fields = append(fields, settings.FieldMaxOrderAmount)
	}
	if m.add_MapCenterLat != nil {
		fields = append(fields, settings.FieldMapCenterLat)
	}
	if m.add_MapCenterLong != nil {
		fields = append(fields, settings.FieldMapCenterLong)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldMaxOrderAmount:
		return m.AddedMaxOrderAmount()
	case settings.FieldMapCenterLat:
		return m.AddedMapCenterLat()
	case settings.FieldMapCenterLong:
		return m.AddedMapCenterLong()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case settings.FieldMaxOrderAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxOrderAmount(v)
		return nil
	case settings.FieldMapCenterLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMapCenterLat(v)
		return nil
	case settings.FieldMapCenterLong:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMapCenterLong(v)
		return nil
	}
	return fmt.Errorf("unknown Settings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Settings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingsMutation) ResetField(name string) error {
	switch name {
	case settings.FieldAGBUrl:
		m.ResetAGBUrl()
		return nil
	case settings.FieldColor:
		m.ResetColor()
		return nil
	case settings.FieldFontColor:
		m.ResetFontColor()
		return nil
	case settings.FieldLogo:
		m.ResetLogo()
		return nil
	case settings.FieldMaxOrderAmount:
		m.ResetMaxOrderAmount()
		return nil
	case settings.FieldOrgaCoversTransactionCosts:
		m.ResetOrgaCoversTransactionCosts()
		return nil
	case settings.FieldWebshopIsClosed:
		m.ResetWebshopIsClosed()
		return nil
	case settings.FieldVendorNotFoundHelpUrl:
		m.ResetVendorNotFoundHelpUrl()
		return nil
	case settings.FieldMaintainanceModeHelpUrl:
		m.ResetMaintainanceModeHelpUrl()
		return nil
	case settings.FieldVendorEmailPostfix:
		m.ResetVendorEmailPostfix()
		return nil
	case settings.FieldNewspaperName:
		m.ResetNewspaperName()
		return nil
	case settings.FieldQRCodeUrl:
		m.ResetQRCodeUrl()
		return nil
	case settings.FieldQRCodeLogoImgUrl:
		m.ResetQRCodeLogoImgUrl()
		return nil
	case settings.FieldMapCenterLat:
		m.ResetMapCenterLat()
		return nil
	case settings.FieldMapCenterLong:
		m.ResetMapCenterLong()
		return nil
	case settings.FieldUseVendorLicenseIdInShop:
		m.ResetUseVendorLicenseIdInShop()
		return nil
	case settings.FieldFavicon:
		m.ResetFavicon()
		return nil
	case settings.FieldQRCodeSettings:
		m.ResetQRCodeSettings()
		return nil
	case settings.FieldQRCodeEnableLogo:
		m.ResetQRCodeEnableLogo()
		return nil
	case settings.FieldUseTipInsteadOfDonation:
		m.ResetUseTipInsteadOfDonation()
		return nil
	case settings.FieldShopLanding:
		m.ResetShopLanding()
		return nil
	case settings.FieldDigitalItemsUrl:
		m.ResetDigitalItemsUrl()
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._MainItem != nil {
		edges = append(edges, settings.EdgeMainItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case settings.EdgeMainItem:
		if id := m._MainItem; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_MainItem {
		edges = append(edges, settings.EdgeMainItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case settings.EdgeMainItem:
		return m.cleared_MainItem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingsMutation) ClearEdge(name string) error {
	switch name {
	case settings.EdgeMainItem:
		m.ClearMainItem()
		return nil
	}
	return fmt.Errorf("unknown Settings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingsMutation) ResetEdge(name string) error {
	switch name {
	case settings.EdgeMainItem:
		m.ResetMainItem()
		return nil
	}
	return fmt.Errorf("unknown Settings edge %s", name)
}

// VendorMutation represents an operation that mutates the Vendor nodes in the graph.
type VendorMutation struct {
	config
	op               Op
	typ              string
	id               *int
	keycloakid       *string
	urlid            *string
	licenseid        *string
	firstname        *string
	lastname         *string
	email            *string
	lastpayout       *time.Time
	isdisabled       *bool
	language         *string
	telephone        *string
	registrationdate *string
	vendorsince      *string
	onlinemap        *bool
	hassmartphone    *bool
	hasbankaccount   *bool
	isdeleted        *bool
	accountproofurl  *string
	debt             *string
	clearedFields    map[string]struct{}
	locations        map[int]struct{}
	removedlocations map[int]struct{}
	clearedlocations bool
	comments         map[int]struct{}
	removedcomments  map[int]struct{}
	clearedcomments  bool
	done             bool
	oldValue         func(context.Context) (*Vendor, error)
	predicates       []predicate.Vendor
}

var _ ent.Mutation = (*VendorMutation)(nil)

// vendorOption allows management of the mutation configuration using functional options.
type vendorOption func(*VendorMutation)

// newVendorMutation creates new mutation for the Vendor entity.
func newVendorMutation(c config, op Op, opts ...vendorOption) *VendorMutation {
	m := &VendorMutation{
		config:        c,
		op:            op,
		typ:           TypeVendor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVendorID sets the ID field of the mutation.
func withVendorID(id int) vendorOption {
	return func(m *VendorMutation) {
		var (
			err   error
			once  sync.Once
			value *Vendor
		)
		m.oldValue = func(ctx context.Context) (*Vendor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vendor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVendor sets the old Vendor of the mutation.
func withVendor(node *Vendor) vendorOption {
	return func(m *VendorMutation) {
		m.oldValue = func(context.Context) (*Vendor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VendorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VendorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Vendor entities.
func (m *VendorMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VendorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VendorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vendor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKeycloakid sets the "keycloakid" field.
func (m *VendorMutation) SetKeycloakid(s string) {
	m.keycloakid = &s
}

// Keycloakid returns the value of the "keycloakid" field in the mutation.
func (m *VendorMutation) Keycloakid() (r string, exists bool) {
	v := m.keycloakid
	if v == nil {
		return
	}
	return *v, true
}

// OldKeycloakid returns the old "keycloakid" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldKeycloakid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeycloakid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeycloakid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeycloakid: %w", err)
	}
	return oldValue.Keycloakid, nil
}

// ResetKeycloakid resets all changes to the "keycloakid" field.
func (m *VendorMutation) ResetKeycloakid() {
	m.keycloakid = nil
}

// SetUrlid sets the "urlid" field.
func (m *VendorMutation) SetUrlid(s string) {
	m.urlid = &s
}

// Urlid returns the value of the "urlid" field in the mutation.
func (m *VendorMutation) Urlid() (r string, exists bool) {
	v := m.urlid
	if v == nil {
		return
	}
	return *v, true
}

// OldUrlid returns the old "urlid" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldUrlid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUrlid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUrlid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUrlid: %w", err)
	}
	return oldValue.Urlid, nil
}

// ResetUrlid resets all changes to the "urlid" field.
func (m *VendorMutation) ResetUrlid() {
	m.urlid = nil
}

// SetLicenseid sets the "licenseid" field.
func (m *VendorMutation) SetLicenseid(s string) {
	m.licenseid = &s
}

// Licenseid returns the value of the "licenseid" field in the mutation.
func (m *VendorMutation) Licenseid() (r string, exists bool) {
	v := m.licenseid
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseid returns the old "licenseid" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldLicenseid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseid: %w", err)
	}
	return oldValue.Licenseid, nil
}

// ResetLicenseid resets all changes to the "licenseid" field.
func (m *VendorMutation) ResetLicenseid() {
	m.licenseid = nil
}

// SetFirstname sets the "firstname" field.
func (m *VendorMutation) SetFirstname(s string) {
	m.firstname = &s
}

// Firstname returns the value of the "firstname" field in the mutation.
func (m *VendorMutation) Firstname() (r string, exists bool) {
	v := m.firstname
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstname returns the old "firstname" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldFirstname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstname: %w", err)
	}
	return oldValue.Firstname, nil
}

// ResetFirstname resets all changes to the "firstname" field.
func (m *VendorMutation) ResetFirstname() {
	m.firstname = nil
}

// SetLastname sets the "lastname" field.
func (m *VendorMutation) SetLastname(s string) {
	m.lastname = &s
}

// Lastname returns the value of the "lastname" field in the mutation.
func (m *VendorMutation) Lastname() (r string, exists bool) {
	v := m.lastname
	if v == nil {
		return
	}
	return *v, true
}

// OldLastname returns the old "lastname" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldLastname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastname: %w", err)
	}
	return oldValue.Lastname, nil
}

// ResetLastname resets all changes to the "lastname" field.
func (m *VendorMutation) ResetLastname() {
	m.lastname = nil
}

// SetEmail sets the "email" field.
func (m *VendorMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *VendorMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *VendorMutation) ResetEmail() {
	m.email = nil
}

// SetLastpayout sets the "lastpayout" field.
func (m *VendorMutation) SetLastpayout(t time.Time) {
	m.lastpayout = &t
}

// Lastpayout returns the value of the "lastpayout" field in the mutation.
func (m *VendorMutation) Lastpayout() (r time.Time, exists bool) {
	v := m.lastpayout
	if v == nil {
		return
	}
	return *v, true
}

// OldLastpayout returns the old "lastpayout" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldLastpayout(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastpayout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastpayout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastpayout: %w", err)
	}
	return oldValue.Lastpayout, nil
}

// ResetLastpayout resets all changes to the "lastpayout" field.
func (m *VendorMutation) ResetLastpayout() {
	m.lastpayout = nil
}

// SetIsdisabled sets the "isdisabled" field.
func (m *VendorMutation) SetIsdisabled(b bool) {
	m.isdisabled = &b
}

// Isdisabled returns the value of the "isdisabled" field in the mutation.
func (m *VendorMutation) Isdisabled() (r bool, exists bool) {
	v := m.isdisabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsdisabled returns the old "isdisabled" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldIsdisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsdisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsdisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsdisabled: %w", err)
	}
	return oldValue.Isdisabled, nil
}

// ResetIsdisabled resets all changes to the "isdisabled" field.
func (m *VendorMutation) ResetIsdisabled() {
	m.isdisabled = nil
}

// SetLanguage sets the "language" field.
func (m *VendorMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *VendorMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *VendorMutation) ResetLanguage() {
	m.language = nil
}

// SetTelephone sets the "telephone" field.
func (m *VendorMutation) SetTelephone(s string) {
	m.telephone = &s
}

// Telephone returns the value of the "telephone" field in the mutation.
func (m *VendorMutation) Telephone() (r string, exists bool) {
	v := m.telephone
	if v == nil {
		return
	}
	return *v, true
}

// OldTelephone returns the old "telephone" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldTelephone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelephone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelephone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelephone: %w", err)
	}
	return oldValue.Telephone, nil
}

// ResetTelephone resets all changes to the "telephone" field.
func (m *VendorMutation) ResetTelephone() {
	m.telephone = nil
}

// SetRegistrationdate sets the "registrationdate" field.
func (m *VendorMutation) SetRegistrationdate(s string) {
	m.registrationdate = &s
}

// Registrationdate returns the value of the "registrationdate" field in the mutation.
func (m *VendorMutation) Registrationdate() (r string, exists bool) {
	v := m.registrationdate
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistrationdate returns the old "registrationdate" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldRegistrationdate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegistrationdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegistrationdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistrationdate: %w", err)
	}
	return oldValue.Registrationdate, nil
}

// ResetRegistrationdate resets all changes to the "registrationdate" field.
func (m *VendorMutation) ResetRegistrationdate() {
	m.registrationdate = nil
}

// SetVendorsince sets the "vendorsince" field.
func (m *VendorMutation) SetVendorsince(s string) {
	m.vendorsince = &s
}

// Vendorsince returns the value of the "vendorsince" field in the mutation.
func (m *VendorMutation) Vendorsince() (r string, exists bool) {
	v := m.vendorsince
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorsince returns the old "vendorsince" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldVendorsince(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendorsince is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendorsince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorsince: %w", err)
	}
	return oldValue.Vendorsince, nil
}

// ResetVendorsince resets all changes to the "vendorsince" field.
func (m *VendorMutation) ResetVendorsince() {
	m.vendorsince = nil
}

// SetOnlinemap sets the "onlinemap" field.
func (m *VendorMutation) SetOnlinemap(b bool) {
	m.onlinemap = &b
}

// Onlinemap returns the value of the "onlinemap" field in the mutation.
func (m *VendorMutation) Onlinemap() (r bool, exists bool) {
	v := m.onlinemap
	if v == nil {
		return
	}
	return *v, true
}

// OldOnlinemap returns the old "onlinemap" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldOnlinemap(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOnlinemap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOnlinemap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnlinemap: %w", err)
	}
	return oldValue.Onlinemap, nil
}

// ResetOnlinemap resets all changes to the "onlinemap" field.
func (m *VendorMutation) ResetOnlinemap() {
	m.onlinemap = nil
}

// SetHassmartphone sets the "hassmartphone" field.
func (m *VendorMutation) SetHassmartphone(b bool) {
	m.hassmartphone = &b
}

// Hassmartphone returns the value of the "hassmartphone" field in the mutation.
func (m *VendorMutation) Hassmartphone() (r bool, exists bool) {
	v := m.hassmartphone
	if v == nil {
		return
	}
	return *v, true
}

// OldHassmartphone returns the old "hassmartphone" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldHassmartphone(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHassmartphone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHassmartphone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHassmartphone: %w", err)
	}
	return oldValue.Hassmartphone, nil
}

// ResetHassmartphone resets all changes to the "hassmartphone" field.
func (m *VendorMutation) ResetHassmartphone() {
	m.hassmartphone = nil
}

// SetHasbankaccount sets the "hasbankaccount" field.
func (m *VendorMutation) SetHasbankaccount(b bool) {
	m.hasbankaccount = &b
}

// Hasbankaccount returns the value of the "hasbankaccount" field in the mutation.
func (m *VendorMutation) Hasbankaccount() (r bool, exists bool) {
	v := m.hasbankaccount
	if v == nil {
		return
	}
	return *v, true
}

// OldHasbankaccount returns the old "hasbankaccount" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldHasbankaccount(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasbankaccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasbankaccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasbankaccount: %w", err)
	}
	return oldValue.Hasbankaccount, nil
}

// ResetHasbankaccount resets all changes to the "hasbankaccount" field.
func (m *VendorMutation) ResetHasbankaccount() {
	m.hasbankaccount = nil
}

// SetIsdeleted sets the "isdeleted" field.
func (m *VendorMutation) SetIsdeleted(b bool) {
	m.isdeleted = &b
}

// Isdeleted returns the value of the "isdeleted" field in the mutation.
func (m *VendorMutation) Isdeleted() (r bool, exists bool) {
	v := m.isdeleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsdeleted returns the old "isdeleted" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldIsdeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsdeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsdeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsdeleted: %w", err)
	}
	return oldValue.Isdeleted, nil
}

// ResetIsdeleted resets all changes to the "isdeleted" field.
func (m *VendorMutation) ResetIsdeleted() {
	m.isdeleted = nil
}

// SetAccountproofurl sets the "accountproofurl" field.
func (m *VendorMutation) SetAccountproofurl(s string) {
	m.accountproofurl = &s
}

// Accountproofurl returns the value of the "accountproofurl" field in the mutation.
func (m *VendorMutation) Accountproofurl() (r string, exists bool) {
	v := m.accountproofurl
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountproofurl returns the old "accountproofurl" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldAccountproofurl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountproofurl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountproofurl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountproofurl: %w", err)
	}
	return oldValue.Accountproofurl, nil
}

// ResetAccountproofurl resets all changes to the "accountproofurl" field.
func (m *VendorMutation) ResetAccountproofurl() {
	m.accountproofurl = nil
}

// SetDebt sets the "debt" field.
func (m *VendorMutation) SetDebt(s string) {
	m.debt = &s
}

// Debt returns the value of the "debt" field in the mutation.
func (m *VendorMutation) Debt() (r string, exists bool) {
	v := m.debt
	if v == nil {
		return
	}
	return *v, true
}

// OldDebt returns the old "debt" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldDebt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDebt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDebt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDebt: %w", err)
	}
	return oldValue.Debt, nil
}

// ResetDebt resets all changes to the "debt" field.
func (m *VendorMutation) ResetDebt() {
	m.debt = nil
}

// AddLocationIDs adds the "locations" edge to the Location entity by ids.
func (m *VendorMutation) AddLocationIDs(ids ...int) {
	if m.locations == nil {
		m.locations = make(map[int]struct{})
	}
	for i := range ids {
		m.locations[ids[i]] = struct{}{}
	}
}

// ClearLocations clears the "locations" edge to the Location entity.
func (m *VendorMutation) ClearLocations() {
	m.clearedlocations = true
}

// LocationsCleared reports if the "locations" edge to the Location entity was cleared.
func (m *VendorMutation) LocationsCleared() bool {
	return m.clearedlocations
}

// RemoveLocationIDs removes the "locations" edge to the Location entity by IDs.
func (m *VendorMutation) RemoveLocationIDs(ids ...int) {
	if m.removedlocations == nil {
		m.removedlocations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.locations, ids[i])
		m.removedlocations[ids[i]] = struct{}{}
	}
}

// RemovedLocations returns the removed IDs of the "locations" edge to the Location entity.
func (m *VendorMutation) RemovedLocationsIDs() (ids []int) {
	for id := range m.removedlocations {
		ids = append(ids, id)
	}
	return
}

// LocationsIDs returns the "locations" edge IDs in the mutation.
func (m *VendorMutation) LocationsIDs() (ids []int) {
	for id := range m.locations {
		ids = append(ids, id)
	}
	return
}

// ResetLocations resets all changes to the "locations" edge.
func (m *VendorMutation) ResetLocations() {
	m.locations = nil
	m.clearedlocations = false
	m.removedlocations = nil
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *VendorMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *VendorMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *VendorMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *VendorMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comments, ids[i])
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *VendorMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *VendorMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *VendorMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// Where appends a list predicates to the VendorMutation builder.
func (m *VendorMutation) Where(ps ...predicate.Vendor) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VendorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VendorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Vendor, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VendorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VendorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Vendor).
func (m *VendorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VendorMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.keycloakid != nil {
		fields = append(fields, vendor.FieldKeycloakid)
	}
	if m.urlid != nil {
		fields = append(fields, vendor.FieldUrlid)
	}
	if m.licenseid != nil {
		fields = append(fields, vendor.FieldLicenseid)
	}
	if m.firstname != nil {
		fields = append(fields, vendor.FieldFirstname)
	}
	if m.lastname != nil {
		fields = append(fields, vendor.FieldLastname)
	}
	if m.email != nil {
		fields = append(fields, vendor.FieldEmail)
	}
	if m.lastpayout != nil {
		fields = append(fields, vendor.FieldLastpayout)
	}
	if m.isdisabled != nil {
		fields = append(fields, vendor.FieldIsdisabled)
	}
	if m.language != nil {
		fields = append(fields, vendor.FieldLanguage)
	}
	if m.telephone != nil {
		fields = append(fields, vendor.FieldTelephone)
	}
	if m.registrationdate != nil {
		fields = append(fields, vendor.FieldRegistrationdate)
	}
	if m.vendorsince != nil {
		fields = append(fields, vendor.FieldVendorsince)
	}
	if m.onlinemap != nil {
		fields = append(fields, vendor.FieldOnlinemap)
	}
	if m.hassmartphone != nil {
		fields = append(fields, vendor.FieldHassmartphone)
	}
	if m.hasbankaccount != nil {
		fields = append(fields, vendor.FieldHasbankaccount)
	}
	if m.isdeleted != nil {
		fields = append(fields, vendor.FieldIsdeleted)
	}
	if m.accountproofurl != nil {
		fields = append(fields, vendor.FieldAccountproofurl)
	}
	if m.debt != nil {
		fields = append(fields, vendor.FieldDebt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VendorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vendor.FieldKeycloakid:
		return m.Keycloakid()
	case vendor.FieldUrlid:
		return m.Urlid()
	case vendor.FieldLicenseid:
		return m.Licenseid()
	case vendor.FieldFirstname:
		return m.Firstname()
	case vendor.FieldLastname:
		return m.Lastname()
	case vendor.FieldEmail:
		return m.Email()
	case vendor.FieldLastpayout:
		return m.Lastpayout()
	case vendor.FieldIsdisabled:
		return m.Isdisabled()
	case vendor.FieldLanguage:
		return m.Language()
	case vendor.FieldTelephone:
		return m.Telephone()
	case vendor.FieldRegistrationdate:
		return m.Registrationdate()
	case vendor.FieldVendorsince:
		return m.Vendorsince()
	case vendor.FieldOnlinemap:
		return m.Onlinemap()
	case vendor.FieldHassmartphone:
		return m.Hassmartphone()
	case vendor.FieldHasbankaccount:
		return m.Hasbankaccount()
	case vendor.FieldIsdeleted:
		return m.Isdeleted()
	case vendor.FieldAccountproofurl:
		return m.Accountproofurl()
	case vendor.FieldDebt:
		return m.Debt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VendorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vendor.FieldKeycloakid:
		return m.OldKeycloakid(ctx)
	case vendor.FieldUrlid:
		return m.OldUrlid(ctx)
	case vendor.FieldLicenseid:
		return m.OldLicenseid(ctx)
	case vendor.FieldFirstname:
		return m.OldFirstname(ctx)
	case vendor.FieldLastname:
		return m.OldLastname(ctx)
	case vendor.FieldEmail:
		return m.OldEmail(ctx)
	case vendor.FieldLastpayout:
		return m.OldLastpayout(ctx)
	case vendor.FieldIsdisabled:
		return m.OldIsdisabled(ctx)
	case vendor.FieldLanguage:
		return m.OldLanguage(ctx)
	case vendor.FieldTelephone:
		return m.OldTelephone(ctx)
	case vendor.FieldRegistrationdate:
		return m.OldRegistrationdate(ctx)
	case vendor.FieldVendorsince:
		return m.OldVendorsince(ctx)
	case vendor.FieldOnlinemap:
		return m.OldOnlinemap(ctx)
	case vendor.FieldHassmartphone:
		return m.OldHassmartphone(ctx)
	case vendor.FieldHasbankaccount:
		return m.OldHasbankaccount(ctx)
	case vendor.FieldIsdeleted:
		return m.OldIsdeleted(ctx)
	case vendor.FieldAccountproofurl:
		return m.OldAccountproofurl(ctx)
	case vendor.FieldDebt:
		return m.OldDebt(ctx)
	}
	return nil, fmt.Errorf("unknown Vendor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vendor.FieldKeycloakid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeycloakid(v)
		return nil
	case vendor.FieldUrlid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUrlid(v)
		return nil
	case vendor.FieldLicenseid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseid(v)
		return nil
	case vendor.FieldFirstname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstname(v)
		return nil
	case vendor.FieldLastname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastname(v)
		return nil
	case vendor.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case vendor.FieldLastpayout:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastpayout(v)
		return nil
	case vendor.FieldIsdisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsdisabled(v)
		return nil
	case vendor.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case vendor.FieldTelephone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelephone(v)
		return nil
	case vendor.FieldRegistrationdate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistrationdate(v)
		return nil
	case vendor.FieldVendorsince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorsince(v)
		return nil
	case vendor.FieldOnlinemap:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnlinemap(v)
		return nil
	case vendor.FieldHassmartphone:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHassmartphone(v)
		return nil
	case vendor.FieldHasbankaccount:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasbankaccount(v)
		return nil
	case vendor.FieldIsdeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsdeleted(v)
		return nil
	case vendor.FieldAccountproofurl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountproofurl(v)
		return nil
	case vendor.FieldDebt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDebt(v)
		return nil
	}
	return fmt.Errorf("unknown Vendor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VendorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VendorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Vendor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VendorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VendorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VendorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vendor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VendorMutation) ResetField(name string) error {
	switch name {
	case vendor.FieldKeycloakid:
		m.ResetKeycloakid()
		return nil
	case vendor.FieldUrlid:
		m.ResetUrlid()
		return nil
	case vendor.FieldLicenseid:
		m.ResetLicenseid()
		return nil
	case vendor.FieldFirstname:
		m.ResetFirstname()
		return nil
	case vendor.FieldLastname:
		m.ResetLastname()
		return nil
	case vendor.FieldEmail:
		m.ResetEmail()
		return nil
	case vendor.FieldLastpayout:
		m.ResetLastpayout()
		return nil
	case vendor.FieldIsdisabled:
		m.ResetIsdisabled()
		return nil
	case vendor.FieldLanguage:
		m.ResetLanguage()
		return nil
	case vendor.FieldTelephone:
		m.ResetTelephone()
		return nil
	case vendor.FieldRegistrationdate:
		m.ResetRegistrationdate()
		return nil
	case vendor.FieldVendorsince:
		m.ResetVendorsince()
		return nil
	case vendor.FieldOnlinemap:
		m.ResetOnlinemap()
		return nil
	case vendor.FieldHassmartphone:
		m.ResetHassmartphone()
		return nil
	case vendor.FieldHasbankaccount:
		m.ResetHasbankaccount()
		return nil
	case vendor.FieldIsdeleted:
		m.ResetIsdeleted()
		return nil
	case vendor.FieldAccountproofurl:
		m.ResetAccountproofurl()
		return nil
	case vendor.FieldDebt:
		m.ResetDebt()
		return nil
	}
	return fmt.Errorf("unknown Vendor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VendorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.locations != nil {
		edges = append(edges, vendor.EdgeLocations)
	}
	if m.comments != nil {
		edges = append(edges, vendor.EdgeComments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VendorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vendor.EdgeLocations:
		ids := make([]ent.Value, 0, len(m.locations))
		for id := range m.locations {
			ids = append(ids, id)
		}
		return ids
	case vendor.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VendorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlocations != nil {
		edges = append(edges, vendor.EdgeLocations)
	}
	if m.removedcomments != nil {
		edges = append(edges, vendor.EdgeComments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VendorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case vendor.EdgeLocations:
		ids := make([]ent.Value, 0, len(m.removedlocations))
		for id := range m.removedlocations {
			ids = append(ids, id)
		}
		return ids
	case vendor.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VendorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlocations {
		edges = append(edges, vendor.EdgeLocations)
	}
	if m.clearedcomments {
		edges = append(edges, vendor.EdgeComments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VendorMutation) EdgeCleared(name string) bool {
	switch name {
	case vendor.EdgeLocations:
		return m.clearedlocations
	case vendor.EdgeComments:
		return m.clearedcomments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VendorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Vendor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VendorMutation) ResetEdge(name string) error {
	switch name {
	case vendor.EdgeLocations:
		m.ResetLocations()
		return nil
	case vendor.EdgeComments:
		m.ResetComments()
		return nil
	}
	return fmt.Errorf("unknown Vendor edge %s", name)
}
