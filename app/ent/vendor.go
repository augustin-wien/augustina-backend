// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/augustin-wien/augustina-backend/ent/vendor"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Keycloakid holds the value of the "keycloakid" field.
	Keycloakid string `json:"keycloakid,omitempty"`
	// Urlid holds the value of the "urlid" field.
	Urlid string `json:"urlid,omitempty"`
	// Licenseid holds the value of the "licenseid" field.
	Licenseid string `json:"licenseid,omitempty"`
	// Firstname holds the value of the "firstname" field.
	Firstname string `json:"firstname,omitempty"`
	// Lastname holds the value of the "lastname" field.
	Lastname string `json:"lastname,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Lastpayout holds the value of the "lastpayout" field.
	Lastpayout time.Time `json:"lastpayout,omitempty"`
	// Isdisabled holds the value of the "isdisabled" field.
	Isdisabled bool `json:"isdisabled,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Telephone holds the value of the "telephone" field.
	Telephone string `json:"telephone,omitempty"`
	// Registrationdate holds the value of the "registrationdate" field.
	Registrationdate string `json:"registrationdate,omitempty"`
	// Vendorsince holds the value of the "vendorsince" field.
	Vendorsince string `json:"vendorsince,omitempty"`
	// Onlinemap holds the value of the "onlinemap" field.
	Onlinemap bool `json:"onlinemap,omitempty"`
	// Hassmartphone holds the value of the "hassmartphone" field.
	Hassmartphone bool `json:"hassmartphone,omitempty"`
	// Hasbankaccount holds the value of the "hasbankaccount" field.
	Hasbankaccount bool `json:"hasbankaccount,omitempty"`
	// Isdeleted holds the value of the "isdeleted" field.
	Isdeleted bool `json:"isdeleted,omitempty"`
	// Accountproofurl holds the value of the "accountproofurl" field.
	Accountproofurl string `json:"accountproofurl,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorQuery when eager-loading is set.
	Edges        VendorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorEdges holds the relations/edges for other nodes in the graph.
type VendorEdges struct {
	// Locations holds the value of the locations edge.
	Locations []*Location `json:"locations,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LocationsOrErr returns the Locations value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) LocationsOrErr() ([]*Location, error) {
	if e.loadedTypes[0] {
		return e.Locations, nil
	}
	return nil, &NotLoadedError{edge: "locations"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendor.FieldIsdisabled, vendor.FieldOnlinemap, vendor.FieldHassmartphone, vendor.FieldHasbankaccount, vendor.FieldIsdeleted:
			values[i] = new(sql.NullBool)
		case vendor.FieldID:
			values[i] = new(sql.NullInt64)
		case vendor.FieldKeycloakid, vendor.FieldUrlid, vendor.FieldLicenseid, vendor.FieldFirstname, vendor.FieldLastname, vendor.FieldEmail, vendor.FieldLanguage, vendor.FieldTelephone, vendor.FieldRegistrationdate, vendor.FieldVendorsince, vendor.FieldAccountproofurl:
			values[i] = new(sql.NullString)
		case vendor.FieldLastpayout:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vendor.FieldKeycloakid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keycloakid", values[i])
			} else if value.Valid {
				v.Keycloakid = value.String
			}
		case vendor.FieldUrlid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field urlid", values[i])
			} else if value.Valid {
				v.Urlid = value.String
			}
		case vendor.FieldLicenseid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field licenseid", values[i])
			} else if value.Valid {
				v.Licenseid = value.String
			}
		case vendor.FieldFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstname", values[i])
			} else if value.Valid {
				v.Firstname = value.String
			}
		case vendor.FieldLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastname", values[i])
			} else if value.Valid {
				v.Lastname = value.String
			}
		case vendor.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				v.Email = value.String
			}
		case vendor.FieldLastpayout:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastpayout", values[i])
			} else if value.Valid {
				v.Lastpayout = value.Time
			}
		case vendor.FieldIsdisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isdisabled", values[i])
			} else if value.Valid {
				v.Isdisabled = value.Bool
			}
		case vendor.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				v.Language = value.String
			}
		case vendor.FieldTelephone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone", values[i])
			} else if value.Valid {
				v.Telephone = value.String
			}
		case vendor.FieldRegistrationdate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registrationdate", values[i])
			} else if value.Valid {
				v.Registrationdate = value.String
			}
		case vendor.FieldVendorsince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendorsince", values[i])
			} else if value.Valid {
				v.Vendorsince = value.String
			}
		case vendor.FieldOnlinemap:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field onlinemap", values[i])
			} else if value.Valid {
				v.Onlinemap = value.Bool
			}
		case vendor.FieldHassmartphone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hassmartphone", values[i])
			} else if value.Valid {
				v.Hassmartphone = value.Bool
			}
		case vendor.FieldHasbankaccount:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hasbankaccount", values[i])
			} else if value.Valid {
				v.Hasbankaccount = value.Bool
			}
		case vendor.FieldIsdeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isdeleted", values[i])
			} else if value.Valid {
				v.Isdeleted = value.Bool
			}
		case vendor.FieldAccountproofurl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accountproofurl", values[i])
			} else if value.Valid {
				v.Accountproofurl = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vendor.
// This includes values selected through modifiers, order, etc.
func (v *Vendor) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryLocations queries the "locations" edge of the Vendor entity.
func (v *Vendor) QueryLocations() *LocationQuery {
	return NewVendorClient(v.config).QueryLocations(v)
}

// QueryComments queries the "comments" edge of the Vendor entity.
func (v *Vendor) QueryComments() *CommentQuery {
	return NewVendorClient(v.config).QueryComments(v)
}

// Update returns a builder for updating this Vendor.
// Note that you need to call Vendor.Unwrap() before calling this method if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return NewVendorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vendor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("keycloakid=")
	builder.WriteString(v.Keycloakid)
	builder.WriteString(", ")
	builder.WriteString("urlid=")
	builder.WriteString(v.Urlid)
	builder.WriteString(", ")
	builder.WriteString("licenseid=")
	builder.WriteString(v.Licenseid)
	builder.WriteString(", ")
	builder.WriteString("firstname=")
	builder.WriteString(v.Firstname)
	builder.WriteString(", ")
	builder.WriteString("lastname=")
	builder.WriteString(v.Lastname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(v.Email)
	builder.WriteString(", ")
	builder.WriteString("lastpayout=")
	builder.WriteString(v.Lastpayout.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("isdisabled=")
	builder.WriteString(fmt.Sprintf("%v", v.Isdisabled))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(v.Language)
	builder.WriteString(", ")
	builder.WriteString("telephone=")
	builder.WriteString(v.Telephone)
	builder.WriteString(", ")
	builder.WriteString("registrationdate=")
	builder.WriteString(v.Registrationdate)
	builder.WriteString(", ")
	builder.WriteString("vendorsince=")
	builder.WriteString(v.Vendorsince)
	builder.WriteString(", ")
	builder.WriteString("onlinemap=")
	builder.WriteString(fmt.Sprintf("%v", v.Onlinemap))
	builder.WriteString(", ")
	builder.WriteString("hassmartphone=")
	builder.WriteString(fmt.Sprintf("%v", v.Hassmartphone))
	builder.WriteString(", ")
	builder.WriteString("hasbankaccount=")
	builder.WriteString(fmt.Sprintf("%v", v.Hasbankaccount))
	builder.WriteString(", ")
	builder.WriteString("isdeleted=")
	builder.WriteString(fmt.Sprintf("%v", v.Isdeleted))
	builder.WriteString(", ")
	builder.WriteString("accountproofurl=")
	builder.WriteString(v.Accountproofurl)
	builder.WriteByte(')')
	return builder.String()
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor
