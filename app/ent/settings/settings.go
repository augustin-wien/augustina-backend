// Code generated by ent, DO NOT EDIT.

package settings

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the settings type in the database.
	Label = "settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAGBUrl holds the string denoting the agburl field in the database.
	FieldAGBUrl = "agburl"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldFontColor holds the string denoting the fontcolor field in the database.
	FieldFontColor = "fontcolor"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldMaxOrderAmount holds the string denoting the maxorderamount field in the database.
	FieldMaxOrderAmount = "maxorderamount"
	// FieldOrgaCoversTransactionCosts holds the string denoting the orgacoverstransactioncosts field in the database.
	FieldOrgaCoversTransactionCosts = "orgacoverstransactioncosts"
	// FieldWebshopIsClosed holds the string denoting the webshopisclosed field in the database.
	FieldWebshopIsClosed = "webshopisclosed"
	// FieldVendorNotFoundHelpUrl holds the string denoting the vendornotfoundhelpurl field in the database.
	FieldVendorNotFoundHelpUrl = "vendornotfoundhelpurl"
	// FieldMaintainanceModeHelpUrl holds the string denoting the maintainancemodehelpurl field in the database.
	FieldMaintainanceModeHelpUrl = "maintainancemodehelpurl"
	// FieldVendorEmailPostfix holds the string denoting the vendoremailpostfix field in the database.
	FieldVendorEmailPostfix = "vendoremailpostfix"
	// FieldNewspaperName holds the string denoting the newspapername field in the database.
	FieldNewspaperName = "newspapername"
	// FieldQRCodeUrl holds the string denoting the qrcodeurl field in the database.
	FieldQRCodeUrl = "qrcodeurl"
	// FieldQRCodeLogoImgUrl holds the string denoting the qrcodelogoimgurl field in the database.
	FieldQRCodeLogoImgUrl = "qrcodelogoimgurl"
	// FieldMapCenterLat holds the string denoting the mapcenterlat field in the database.
	FieldMapCenterLat = "mapcenterlat"
	// FieldMapCenterLong holds the string denoting the mapcenterlong field in the database.
	FieldMapCenterLong = "mapcenterlong"
	// FieldUseVendorLicenseIdInShop holds the string denoting the usevendorlicenseidinshop field in the database.
	FieldUseVendorLicenseIdInShop = "usevendorlicenseidinshop"
	// FieldFavicon holds the string denoting the favicon field in the database.
	FieldFavicon = "favicon"
	// FieldQRCodeSettings holds the string denoting the qrcodesettings field in the database.
	FieldQRCodeSettings = "qrcodesettings"
	// FieldQRCodeEnableLogo holds the string denoting the qrcodeenablelogo field in the database.
	FieldQRCodeEnableLogo = "qrcodeenablelogo"
	// FieldUseTipInsteadOfDonation holds the string denoting the usetipinsteadofdonation field in the database.
	FieldUseTipInsteadOfDonation = "usetipinsteadofdonation"
	// EdgeMainItem holds the string denoting the mainitem edge name in mutations.
	EdgeMainItem = "MainItem"
	// Table holds the table name of the settings in the database.
	Table = "settings"
	// MainItemTable is the table that holds the MainItem relation/edge.
	MainItemTable = "settings"
	// MainItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	MainItemInverseTable = "item"
	// MainItemColumn is the table column denoting the MainItem relation/edge.
	MainItemColumn = "mainitem"
)

// Columns holds all SQL columns for settings fields.
var Columns = []string{
	FieldID,
	FieldAGBUrl,
	FieldColor,
	FieldFontColor,
	FieldLogo,
	FieldMaxOrderAmount,
	FieldOrgaCoversTransactionCosts,
	FieldWebshopIsClosed,
	FieldVendorNotFoundHelpUrl,
	FieldMaintainanceModeHelpUrl,
	FieldVendorEmailPostfix,
	FieldNewspaperName,
	FieldQRCodeUrl,
	FieldQRCodeLogoImgUrl,
	FieldMapCenterLat,
	FieldMapCenterLong,
	FieldUseVendorLicenseIdInShop,
	FieldFavicon,
	FieldQRCodeSettings,
	FieldQRCodeEnableLogo,
	FieldUseTipInsteadOfDonation,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "settings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"mainitem",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAGBUrl holds the default value on creation for the "AGBUrl" field.
	DefaultAGBUrl string
	// DefaultColor holds the default value on creation for the "Color" field.
	DefaultColor string
	// DefaultFontColor holds the default value on creation for the "FontColor" field.
	DefaultFontColor string
	// DefaultLogo holds the default value on creation for the "Logo" field.
	DefaultLogo string
	// DefaultMaxOrderAmount holds the default value on creation for the "MaxOrderAmount" field.
	DefaultMaxOrderAmount int
	// DefaultOrgaCoversTransactionCosts holds the default value on creation for the "OrgaCoversTransactionCosts" field.
	DefaultOrgaCoversTransactionCosts bool
	// DefaultWebshopIsClosed holds the default value on creation for the "WebshopIsClosed" field.
	DefaultWebshopIsClosed bool
	// DefaultVendorNotFoundHelpUrl holds the default value on creation for the "VendorNotFoundHelpUrl" field.
	DefaultVendorNotFoundHelpUrl string
	// DefaultMaintainanceModeHelpUrl holds the default value on creation for the "MaintainanceModeHelpUrl" field.
	DefaultMaintainanceModeHelpUrl string
	// DefaultVendorEmailPostfix holds the default value on creation for the "VendorEmailPostfix" field.
	DefaultVendorEmailPostfix string
	// DefaultNewspaperName holds the default value on creation for the "NewspaperName" field.
	DefaultNewspaperName string
	// DefaultQRCodeUrl holds the default value on creation for the "QRCodeUrl" field.
	DefaultQRCodeUrl string
	// DefaultQRCodeLogoImgUrl holds the default value on creation for the "QRCodeLogoImgUrl" field.
	DefaultQRCodeLogoImgUrl string
	// DefaultMapCenterLat holds the default value on creation for the "MapCenterLat" field.
	DefaultMapCenterLat float64
	// DefaultMapCenterLong holds the default value on creation for the "MapCenterLong" field.
	DefaultMapCenterLong float64
	// DefaultUseVendorLicenseIdInShop holds the default value on creation for the "UseVendorLicenseIdInShop" field.
	DefaultUseVendorLicenseIdInShop bool
	// DefaultFavicon holds the default value on creation for the "Favicon" field.
	DefaultFavicon string
	// DefaultQRCodeSettings holds the default value on creation for the "QRCodeSettings" field.
	DefaultQRCodeSettings string
	// DefaultQRCodeEnableLogo holds the default value on creation for the "QRCodeEnableLogo" field.
	DefaultQRCodeEnableLogo bool
	// DefaultUseTipInsteadOfDonation holds the default value on creation for the "UseTipInsteadOfDonation" field.
	DefaultUseTipInsteadOfDonation bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Settings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAGBUrl orders the results by the AGBUrl field.
func ByAGBUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAGBUrl, opts...).ToFunc()
}

// ByColor orders the results by the Color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByFontColor orders the results by the FontColor field.
func ByFontColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFontColor, opts...).ToFunc()
}

// ByLogo orders the results by the Logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByMaxOrderAmount orders the results by the MaxOrderAmount field.
func ByMaxOrderAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxOrderAmount, opts...).ToFunc()
}

// ByOrgaCoversTransactionCosts orders the results by the OrgaCoversTransactionCosts field.
func ByOrgaCoversTransactionCosts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgaCoversTransactionCosts, opts...).ToFunc()
}

// ByWebshopIsClosed orders the results by the WebshopIsClosed field.
func ByWebshopIsClosed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebshopIsClosed, opts...).ToFunc()
}

// ByVendorNotFoundHelpUrl orders the results by the VendorNotFoundHelpUrl field.
func ByVendorNotFoundHelpUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorNotFoundHelpUrl, opts...).ToFunc()
}

// ByMaintainanceModeHelpUrl orders the results by the MaintainanceModeHelpUrl field.
func ByMaintainanceModeHelpUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaintainanceModeHelpUrl, opts...).ToFunc()
}

// ByVendorEmailPostfix orders the results by the VendorEmailPostfix field.
func ByVendorEmailPostfix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorEmailPostfix, opts...).ToFunc()
}

// ByNewspaperName orders the results by the NewspaperName field.
func ByNewspaperName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewspaperName, opts...).ToFunc()
}

// ByQRCodeUrl orders the results by the QRCodeUrl field.
func ByQRCodeUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQRCodeUrl, opts...).ToFunc()
}

// ByQRCodeLogoImgUrl orders the results by the QRCodeLogoImgUrl field.
func ByQRCodeLogoImgUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQRCodeLogoImgUrl, opts...).ToFunc()
}

// ByMapCenterLat orders the results by the MapCenterLat field.
func ByMapCenterLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMapCenterLat, opts...).ToFunc()
}

// ByMapCenterLong orders the results by the MapCenterLong field.
func ByMapCenterLong(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMapCenterLong, opts...).ToFunc()
}

// ByUseVendorLicenseIdInShop orders the results by the UseVendorLicenseIdInShop field.
func ByUseVendorLicenseIdInShop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseVendorLicenseIdInShop, opts...).ToFunc()
}

// ByFavicon orders the results by the Favicon field.
func ByFavicon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFavicon, opts...).ToFunc()
}

// ByQRCodeSettings orders the results by the QRCodeSettings field.
func ByQRCodeSettings(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQRCodeSettings, opts...).ToFunc()
}

// ByQRCodeEnableLogo orders the results by the QRCodeEnableLogo field.
func ByQRCodeEnableLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQRCodeEnableLogo, opts...).ToFunc()
}

// ByUseTipInsteadOfDonation orders the results by the UseTipInsteadOfDonation field.
func ByUseTipInsteadOfDonation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseTipInsteadOfDonation, opts...).ToFunc()
}

// ByMainItemField orders the results by MainItem field.
func ByMainItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMainItemStep(), sql.OrderByField(field, opts...))
	}
}
func newMainItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MainItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MainItemTable, MainItemColumn),
	)
}
