basePath: /api
consumes:
- application/json
definitions:
  database.Item:
    properties:
      archived:
        type: boolean
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      licenseItem:
        allOf:
        - $ref: '#/definitions/null.Int'
        description: License has to be bought before item
      name:
        type: string
      price:
        description: Price in cents
        type: integer
    type: object
  database.Payment:
    properties:
      amount:
        type: integer
      authorizedBy:
        type: string
      id:
        type: integer
      isSale:
        type: boolean
      order:
        type: integer
      orderEntry:
        type: integer
      receiver:
        type: integer
      sender:
        type: integer
      timestamp:
        type: string
    type: object
  database.Settings:
    properties:
      color:
        type: string
      fontColor:
        type: string
      id:
        type: integer
      logo:
        type: string
      mainItem:
        type: integer
      maxOrderAmount:
        type: integer
      orgaCoversTransactionCosts:
        type: boolean
    type: object
  database.Vendor:
    properties:
      address:
        type: string
      balance:
        description: This is joined in from the account
        type: integer
      comment:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      isDisabled:
        type: boolean
      keycloakID:
        type: string
      lang:
        type: string
      lastName:
        type: string
      lastPayout:
        format: date-time
        type: string
      latitude:
        type: number
      licenseID:
        $ref: '#/definitions/null.String'
      location:
        type: string
      longitude:
        type: number
      plz:
        type: string
      urlid:
        description: This is used for the QR code
        type: string
      workingTime:
        type: string
    type: object
  handlers.VerifyPaymentOrderResponse:
    properties:
      timeStamp:
        type: string
    type: object
  handlers.createOrderRequest:
    properties:
      entries:
        items:
          $ref: '#/definitions/handlers.createOrderRequestEntry'
        type: array
      user:
        type: string
      vendorLicenseID:
        type: string
    type: object
  handlers.createOrderRequestEntry:
    properties:
      item:
        type: integer
      quantity:
        type: integer
    type: object
  handlers.createOrderResponse:
    properties:
      smartCheckoutURL:
        type: string
    type: object
  handlers.createPaymentPayoutRequest:
    properties:
      amount:
        type: integer
      vendorLicenseID:
        type: string
    type: object
  handlers.createPaymentsRequest:
    properties:
      payments:
        items:
          $ref: '#/definitions/database.Payment'
        type: array
    type: object
  null.Int:
    properties:
      int64:
        type: integer
      valid:
        description: Valid is true if Int64 is not NULL
        type: boolean
    type: object
  null.String:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  paymentprovider.EventData:
    properties:
      acquirerApproved:
        type: boolean
      amount:
        type: number
      assignedMerchantUsers:
        items: {}
        type: array
      assignedResellerUsers:
        items: {}
        type: array
      authorizationId:
        type: string
      bankId:
        type: string
      billId: {}
      binId:
        type: integer
      cardCountryCode:
        type: string
      cardExpirationDate:
        type: string
      cardIssuingBank:
        type: string
      cardNumber:
        type: string
      cardToken:
        type: string
      cardTypeId:
        type: integer
      cardUniqueReference:
        type: string
      channelId:
        type: string
      clearanceDate: {}
      companyName:
        type: string
      companyTitle:
        type: string
      connectedAccountId: {}
      currencyCode:
        type: string
      currentInstallment:
        type: integer
      customerTrns:
        type: string
      digitalWalletId: {}
      dualMessage:
        type: boolean
      electronicCommerceIndicator:
        type: string
      email:
        type: string
      fullName:
        type: string
      insDate:
        type: string
      isManualRefund:
        type: boolean
      latitude: {}
      longitude: {}
      loyaltyTriggered:
        type: boolean
      merchantCategoryCode:
        type: integer
      merchantId:
        type: string
      merchantTrns:
        type: string
      moto:
        type: boolean
      orderCode:
        type: integer
      orderCulture:
        type: string
      orderServiceId:
        type: integer
      panEntryMode:
        type: string
      parentId: {}
      phone:
        type: string
      productId: {}
      redeemedAmount:
        type: number
      referenceNumber:
        type: integer
      resellerCompanyName: {}
      resellerId: {}
      resellerSourceAddress: {}
      resellerSourceCode: {}
      resellerSourceName: {}
      responseCode:
        type: string
      responseEventId: {}
      retrievalReferenceNumber:
        type: string
      serviceId: {}
      sourceCode:
        type: string
      sourceName:
        type: string
      statusId:
        type: string
      switching:
        type: boolean
      systemic:
        type: boolean
      tags:
        items:
          type: string
        type: array
      targetPersonId: {}
      targetWalletId: {}
      terminalId:
        type: integer
      tipAmount:
        type: number
      totalFee:
        type: number
      totalInstallments:
        type: integer
      transactionId:
        type: string
      transactionTypeId:
        type: integer
      ucaf:
        type: string
    type: object
  paymentprovider.PriceEventData:
    properties:
      CurrencyCode:
        type: string
      Interchange:
        type: number
      IsvFee:
        type: number
      MerchantId:
        type: string
      OrderCode:
        type: integer
      ResellerId: {}
      TotalCommission:
        type: number
      TransactionId:
        type: string
    type: object
  paymentprovider.TransactionDetailRequest:
    properties:
      CorrelationId:
        type: string
      Created:
        type: string
      Delay: {}
      EventData:
        $ref: '#/definitions/paymentprovider.EventData'
      EventTypeId:
        type: integer
      MessageId:
        type: string
      MessageTypeId:
        type: integer
      RecipientId:
        type: string
      Url:
        type: string
    type: object
  paymentprovider.TransactionPriceRequest:
    properties:
      CorrelationId:
        type: string
      Created:
        type: string
      Delay: {}
      EventData:
        $ref: '#/definitions/paymentprovider.PriceEventData'
      EventTypeId:
        type: integer
      MessageId:
        type: string
      MessageTypeId:
        type: integer
      RecipientId:
        type: string
      Url:
        type: string
    type: object
  paymentprovider.VivaWalletVerificationKeyResponse:
    properties:
      key:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This swagger describes every endpoint of this project.
  license:
    name: GNU Affero General Public License
    url: https://www.gnu.org/licenses/agpl-3.0.txt
  termsOfService: http://swagger.io/terms/
  title: Augustin Swagger
  version: 0.0.1
paths:
  /auth/hello/:
    get:
      consumes:
      - application/json
      description: Return HelloWorld as sample API call
      produces:
      - application/json
      responses: {}
      security:
      - KeycloakAuth: []
      summary: Return HelloWorld
      tags:
      - Core
      - Auth
  /hello/:
    get:
      consumes:
      - application/json
      description: Return HelloWorld as sample API call
      produces:
      - application/json
      responses: {}
      summary: Return HelloWorld
      tags:
      - Core
  /items/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Item'
            type: array
      summary: List Items
      tags:
      - Items
    post:
      consumes:
      - application/json
      parameters:
      - description: Item Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - KeycloakAuth: []
      summary: Create Item
      tags:
      - Items
  /items/{id}/:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Delete Item
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Requires multipart form (for image)
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Update Item
      tags:
      - Items
  /orders/:
    post:
      consumes:
      - application/json
      description: Submits payment order to provider & saves it to database. Entries
        need to have an item id and a quantity (for entries without a price like tips,
        the quantity is the amount of cents). If no user is given, the order is anonymous.
      parameters:
      - description: Payment Order
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.createOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.createOrderResponse'
      summary: Create Payment Order
      tags:
      - Orders
  /orders/verify/:
    get:
      consumes:
      - application/json
      description: Verifies order and creates payments
      parameters:
      - description: Order Code
        format: "3043685539722561"
        in: query
        name: s
        required: true
        type: string
      - description: Transaction ID
        format: 882d641c-01cc-442f-b894-2b51250340b5
        in: query
        name: t
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.VerifyPaymentOrderResponse'
      summary: Verify Payment Order
      tags:
      - Orders
  /payments/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Minimum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: from
        type: string
      - description: Maximum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Payment'
            type: array
      security:
      - KeycloakAuth: []
      - KeycloakAuth: []
      summary: Get list of all payments
      tags:
      - Payments
  /payments/payout/:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' Create Payment'
        in: body
        name: amount
        required: true
        schema:
          $ref: '#/definitions/handlers.createPaymentPayoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - KeycloakAuth: []
      summary: Create a payment from a vendor account to cash
      tags:
      - Payments
  /settings/:
    get:
      consumes:
      - application/json
      description: Return configuration data of the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Settings'
            type: array
      summary: Return settings
      tags:
      - Core
    put:
      consumes:
      - application/json
      description: Update configuration data of the system. Requires multipart form.
        Logo has to be a png and will always be saved under "img/logo.png"
      parameters:
      - description: Settings Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Update settings
      tags:
      - Core
  /vendors/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Vendor'
            type: array
      security:
      - KeycloakAuth: []
      summary: List Vendors
      tags:
      - Vendors
    post:
      consumes:
      - application/json
      parameters:
      - description: Vendor Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Vendor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Create Vendor
      tags:
      - Vendors
  /vendors/{id}/:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Delete Vendor
      tags:
      - Vendors
    get:
      consumes:
      - application/json
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Get Vendor
      tags:
      - Vendors
    put:
      consumes:
      - application/json
      description: 'Warning: Unfilled fields will be set to default values'
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Vendor Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Vendor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Update Vendor
      tags:
      - Vendors
  /vendors/check/{licenseID}/:
    get:
      consumes:
      - application/json
      description: Check if license id exists, return first name of vendor if it does
      parameters:
      - description: License ID
        in: path
        name: licenseID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Check for license id
      tags:
      - Vendors
  /webhooks/vivawallet/failure:
    get:
      consumes:
      - application/json
      description: Return VivaWallet verification key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/paymentprovider.VivaWalletVerificationKeyResponse'
            type: array
      summary: Return VivaWallet verification key
      tags:
      - VivaWallet Webhooks
    post:
      consumes:
      - application/json
      description: Webhook for VivaWallet failed transaction
      parameters:
      - description: Payment Failure Response
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/paymentprovider.TransactionDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Webhook for VivaWallet failed transaction
      tags:
      - VivaWallet Webhooks
  /webhooks/vivawallet/price:
    get:
      consumes:
      - application/json
      description: Return VivaWallet verification key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/paymentprovider.VivaWalletVerificationKeyResponse'
            type: array
      summary: Return VivaWallet verification key
      tags:
      - VivaWallet Webhooks
    post:
      consumes:
      - application/json
      description: Webhook for VivaWallet transaction prices
      parameters:
      - description: Payment Price Response
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/paymentprovider.TransactionPriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Webhook for VivaWallet transaction prices
      tags:
      - VivaWallet Webhooks
  /webhooks/vivawallet/success:
    get:
      consumes:
      - application/json
      description: Return VivaWallet verification key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/paymentprovider.VivaWalletVerificationKeyResponse'
            type: array
      summary: Return VivaWallet verification key
      tags:
      - VivaWallet Webhooks
    post:
      consumes:
      - application/json
      description: Webhook for VivaWallet successful transaction
      parameters:
      - description: Payment Successful Response
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/paymentprovider.TransactionDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Webhook for VivaWallet successful transaction
      tags:
      - VivaWallet Webhooks
securityDefinitions:
  BasicAuth:
    type: basic
  KeycloakAuth:
    description: <b>how to generate an api key</b> <br/><br/><code>curl -d 'client_id=frontend'
      -d 'username=test_superuser' -d 'password=Test123!' -d 'grant_type=password'     'http://localhost:8080/realms/augustin/protocol/openid-connect/token'
      |     python -m json.tool | grep access_token</code><br/><br/><br/>Insert the
      output into the field below the value of the access_token field.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
