basePath: /api
consumes:
- application/json
definitions:
  database.Item:
    properties:
      id:
        type: integer
      image:
        type: string
      isEditable:
        type: boolean
      name:
        type: string
      price:
        type: number
    type: object
  database.Payment:
    properties:
      amount:
        type: number
      authorizedBy:
        $ref: '#/definitions/pgtype.Int4'
      id:
        type: integer
      item:
        $ref: '#/definitions/pgtype.Int4'
      paymentBatch:
        $ref: '#/definitions/pgtype.Int8'
      receiver:
        type: integer
      sender:
        type: integer
      timestamp:
        $ref: '#/definitions/pgtype.Timestamp'
      type:
        type: integer
    type: object
  database.PaymentType:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  database.Settings:
    properties:
      color:
        type: string
      id:
        type: integer
      logo:
        type: string
      newspaper:
        $ref: '#/definitions/database.Item'
      refundFees:
        type: boolean
    type: object
  handlers.TransactionOrder:
    properties:
      amount:
        type: integer
    type: object
  handlers.TransactionOrderResponse:
    properties:
      smartCheckoutURL:
        type: string
    type: object
  handlers.TransactionVerification:
    properties:
      transactionID:
        type: string
    type: object
  handlers.TransactionVerificationResponse:
    properties:
      verification:
        type: boolean
    type: object
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Int4:
    properties:
      int32:
        type: integer
      valid:
        type: boolean
    type: object
  pgtype.Int8:
    properties:
      int64:
        type: integer
      valid:
        type: boolean
    type: object
  pgtype.Timestamp:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        description: Time zone will be ignored when encoding to PostgreSQL.
        type: string
      valid:
        type: boolean
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This swagger describes every endpoint of this project.
  license:
    name: GNU Affero General Public License
    url: https://www.gnu.org/licenses/agpl-3.0.txt
  termsOfService: http://swagger.io/terms/
  title: Augustin Swagger
  version: 0.0.1
paths:
  /hello/:
    get:
      consumes:
      - application/json
      description: Return HelloWorld as sample API call
      produces:
      - application/json
      responses: {}
      summary: Return HelloWorld
      tags:
      - core
  /payments/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Payment'
            type: array
      summary: Get all payments
      tags:
      - core
    post:
      consumes:
      - application/json
      description: '{"Payments":[{"Sender": 1, "Receiver":1, "Type":1,"Amount":1.00}]}'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.PaymentType'
            type: array
      summary: Create a set of payments
      tags:
      - core
  /settings/:
    get:
      consumes:
      - application/json
      description: Return settings about the web-shop
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Settings'
            type: array
      summary: Return settings
      tags:
      - core
  /vivawallet/transaction_order/:
    post:
      consumes:
      - application/json
      description: Post your amount like {"Amount":100}, which equals 100 cents
      parameters:
      - description: Amount in cents
        in: body
        name: amount
        required: true
        schema:
          $ref: '#/definitions/handlers.TransactionOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TransactionOrderResponse'
            type: array
      summary: Create a transaction order
      tags:
      - core
  /vivawallet/transaction_verification/:
    post:
      consumes:
      - application/json
      description: Accepts {"TransactionID":"1234567890"} and returns {"Verification":true},
        if successful
      parameters:
      - description: Transaction ID
        in: body
        name: transactionID
        required: true
        schema:
          $ref: '#/definitions/handlers.TransactionVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TransactionVerificationResponse'
            type: array
      summary: Verify a transaction
      tags:
      - core
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
