basePath: /api
consumes:
  - application/json
definitions:
  database.Item:
    properties:
      archived:
        type: boolean
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      licenseItem:
        allOf:
          - $ref: "#/definitions/null.Int"
        description: License has to be bought before item
      name:
        type: string
      price:
        description: Price in cents
        type: integer
    type: object
  database.OrderEntry:
    properties:
      id:
        type: integer
      item:
        type: integer
      price:
        description: Price at time of purchase in cents
        type: integer
      quantity:
        type: integer
      receiver:
        type: integer
      sender:
        type: integer
    type: object
  database.Payment:
    properties:
      amount:
        type: integer
      authorizedBy:
        type: string
      id:
        type: integer
      order:
        type: integer
      orderEntry:
        type: integer
      receiver:
        type: integer
      sender:
        type: integer
      timestamp:
        type: string
    type: object
  database.Settings:
    properties:
      color:
        type: string
      id:
        type: integer
      logo:
        type: string
      mainItem:
        type: integer
      refundFees:
        type: boolean
    type: object
  database.Vendor:
    properties:
      balance:
        description: This is joined in from the account
        type: integer
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      keycloakID:
        type: string
      lastName:
        type: string
      lastPayout:
        format: date-time
        type: string
      licenseID:
        type: string
      urlID:
        description: This is used for the QR code
        type: string
    type: object
  handlers.CreateOrderRequest:
    properties:
      entries:
        items:
          $ref: "#/definitions/handlers.CreateOrderRequestEntry"
        type: array
      user:
        type: string
      vendor:
        type: integer
    type: object
  handlers.CreateOrderRequestEntry:
    properties:
      item:
        type: integer
      quantity:
        type: integer
    type: object
  handlers.CreateOrderResponse:
    properties:
      smartCheckoutURL:
        type: string
    type: object
  handlers.CreatePaymentsRequest:
    properties:
      payments:
        items:
          $ref: "#/definitions/database.Payment"
        type: array
    type: object
  handlers.TransactionOrder:
    properties:
      amount:
        type: integer
    type: object
  handlers.TransactionOrderResponse:
    properties:
      smartCheckoutURL:
        type: string
    type: object
  handlers.TransactionVerification:
    properties:
      orderCode:
        type: integer
    type: object
  handlers.TransactionVerificationResponse:
    properties:
      verification:
        type: boolean
    type: object
  handlers.VivaWalletVerificationKeyResponse:
    properties:
      key:
        type: string
    type: object
  paymentprovider.PaymentSuccessfulResponse:
    properties:
      CorrelationId:
        type: string
      Created:
        type: string
      Delay:
        type: string
      EventTypeId:
        type: integer
      MessageId:
        type: string
      MessageTypeId:
        type: integer
      RecipientId:
        type: string
      eventData:
        properties:
          amount:
            type: integer
          assignedMerchantUsers:
            items:
              type: string
            type: array
          assignedResellerUsers:
            items:
              type: string
            type: array
          bankId:
            type: string
          billId:
            type: string
          cardCountryCode:
            type: string
          cardExpirationDate:
            type: string
          cardIssuingBank:
            type: string
          cardNumber:
            type: string
          cardToken:
            type: string
          cardTypeId:
            type: integer
          cardUniqueReference:
            type: string
          channelId:
            type: string
          clearanceDate:
            type: string
          companyName:
            type: string
          companyTitle:
            type: string
          currencyCode:
            type: string
          currentInstallment:
            type: integer
          customerTrns:
            type: string
          digitalWalletId:
            type: integer
          electronicCommerceIndicator:
            type: string
          email:
            type: string
          fullName:
            type: string
          insDate:
            type: string
          isManualRefund:
            type: boolean
          latitude:
            type: string
          longitude:
            type: string
          loyaltyTriggered:
            type: boolean
          merchantId:
            type: string
          merchantTrns:
            type: string
          moto:
            type: boolean
          orderCode:
            type: integer
          orderCulture:
            type: string
          panEntryMode:
            type: string
          parentId:
            type: string
          phone:
            type: string
          productId:
            type: string
          redeemedAmount:
            type: integer
          referenceNumber:
            type: integer
          resellerCompanyName:
            type: string
          resellerId:
            type: string
          resellerSourceAddress:
            type: string
          resellerSourceCode:
            type: string
          resellerSourceName:
            type: string
          responseCode:
            type: string
          responseEventId:
            type: string
          retrievalReferenceNumber:
            type: string
          sourceCode:
            type: string
          sourceName:
            type: string
          statusId:
            type: string
          switching:
            type: boolean
          systemic:
            type: boolean
          tags:
            items:
              type: string
            type: array
          targetPersonId:
            type: string
          targetWalletId:
            type: string
          terminalId:
            type: integer
          tipAmount:
            type: integer
          totalFee:
            type: integer
          totalInstallments:
            type: integer
          transactionId:
            type: string
          transactionTypeId:
            type: integer
        type: object
      url:
        type: string
  handlers.VerifyOrderResponse:
    properties:
      entries:
        items:
          $ref: "#/definitions/database.OrderEntry"
        type: array
      id:
        type: integer
      orderCode:
        type: string
      timestamp:
        type: string
      transactionID:
        type: string
      user:
        type: string
      vendor:
        type: integer
      verified:
        type: boolean
    type: object
  null.Int:
    properties:
      int64:
        type: integer
      valid:
        description: Valid is true if Int64 is not NULL
        type: boolean
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This swagger describes every endpoint of this project.
  license:
    name: GNU Affero General Public License
    url: https://www.gnu.org/licenses/agpl-3.0.txt
  termsOfService: http://swagger.io/terms/
  title: Augustin Swagger
  version: 0.0.1
paths:
  /hello/:
    get:
      consumes:
        - application/json
      description: Return HelloWorld as sample API call
      produces:
        - application/json
      responses: {}
      summary: Return HelloWorld
      tags:
        - core
  /items/:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/database.Item"
            type: array
      summary: List Items
      tags:
        - Items
    post:
      consumes:
        - application/json
      parameters:
        - description: Item Representation
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/database.Item"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
      summary: Create Item
      tags:
        - Items
  /items/{id}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Item ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
      summary: Delete Item
      tags:
        - Items
  /items/{id}/:
    put:
      consumes:
        - application/json
      description: Requires multipart form (for image)
      parameters:
        - description: Item Representation
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/database.Item"
      produces:
        - application/json
      responses:
        "200":
          description: OK
      summary: Update Item
      tags:
        - Items
  /orders/:
    post:
      consumes:
        - application/json
      description:
        Submits payment order to provider & saves it to database. Entries
        need to have an item id and a quantity (for entries without a price like tips,
        the quantity is the amount of cents). If no user is given, the order is anonymous.
      parameters:
        - description: Payment Order
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/handlers.CreateOrderRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/handlers.CreateOrderResponse"
      summary: Create Payment Order
      tags:
        - Orders
  /orders/verify/:
    post:
      consumes:
        - application/json
      description: Verifies order and creates payments
      parameters:
        - description: Order Code
          format: "3043685539722561"
          in: query
          name: s
          required: true
          type: string
        - description: Transaction ID
          format: 882d641c-01cc-442f-b894-2b51250340b5
          in: query
          name: t
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/handlers.VerifyOrderResponse"
      summary: Verify Payment Order
      tags:
        - Orders
  /payments:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/database.Payment"
            type: array
      summary: Get list of all payments
      tags:
        - core
    post:
      consumes:
        - application/json
      parameters:
        - description: " Create Payment"
          in: body
          name: amount
          required: true
          schema:
            $ref: "#/definitions/handlers.CreatePaymentsRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
      summary: Create a set of payments
      tags:
        - core
  /settings/:
    get:
      consumes:
        - application/json
      description: Return configuration data of the system
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/database.Settings"
            type: array
      summary: Return settings
      tags:
        - core
  /vendors/:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/database.Vendor"
            type: array
      summary: List Vendors
      tags:
        - vendors
    post:
      consumes:
        - application/json
      parameters:
        - description: Vendor Representation
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/database.Vendor"
      produces:
        - application/json
      responses:
        "200":
          description: OK
      summary: Create Vendor
      tags:
        - vendors
  /vendors/{id}/:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Vendor ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
      summary: Delete Vendor
      tags:
        - vendors
    put:
      consumes:
        - application/json
      description: "Warning: Unfilled fields will be set to default values"
      parameters:
        - description: Vendor ID
          in: path
          name: id
          required: true
          type: integer
        - description: Vendor Representation
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/database.Vendor"
      produces:
        - application/json
      responses:
        "200":
          description: OK
      summary: Update Vendor
      tags:
        - vendors
  /vivawallet/transaction_order/:
    post:
      consumes:
        - application/json
      description: Post your amount like {"Amount":100}, which equals 100 cents
      parameters:
        - description: Amount in cents
          in: body
          name: amount
          required: true
          schema:
            $ref: "#/definitions/handlers.TransactionOrder"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/handlers.TransactionOrderResponse"
            type: array
      summary: Create a transaction order
      tags:
        - core
  /vivawallet/transaction_verification/:
    post:
      consumes:
        - application/json
      description:
        Accepts {"OrderCode":"1234567890"} and returns {"Verification":true},
        if successful
      parameters:
        - description: Transaction ID
          in: body
          name: OrderCode
          required: true
          schema:
            $ref: "#/definitions/handlers.TransactionVerification"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/handlers.TransactionVerificationResponse"
            type: array
      summary: Verify a transaction
      tags:
        - core
  /webhooks/vivawallet/:
    get:
      consumes:
        - application/json
      description: Return VivaWallet verification key
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/handlers.VivaWalletVerificationKeyResponse"
            type: array
      summary: Return VivaWallet verification key
      tags:
        - core
    post:
      consumes:
        - application/json
      description: Webhook for VivaWallet
      parameters:
        - description: Payment Successful Response
          in: body
          name: data
          required: true
          schema:
            $ref: "#/definitions/paymentprovider.PaymentSuccessfulResponse"
      produces:
        - application/json
      responses:
        "200":
          description: OK
      summary: Webhook for VivaWallet
      tags:
        - core
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
