basePath: /api
consumes:
- application/json
definitions:
  database.Item:
    properties:
      archived:
        type: boolean
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      isLicenseItem:
        type: boolean
      licenseGroup:
        $ref: '#/definitions/null.String'
      licenseItem:
        allOf:
        - $ref: '#/definitions/null.Int'
        description: License has to be bought before item
      name:
        type: string
      price:
        description: Price in cents
        type: integer
    type: object
  database.LocationData:
    properties:
      firstName:
        type: string
      id:
        type: integer
      latitude:
        type: number
      licenseID:
        $ref: '#/definitions/null.String'
      longitude:
        type: number
    type: object
  database.OrderEntry:
    properties:
      id:
        type: integer
      isSale:
        description: Whether to include this item in sales payment
        type: boolean
      item:
        type: integer
      price:
        description: Price at time of purchase in cents
        type: integer
      quantity:
        type: integer
      receiver:
        type: integer
      receiverName:
        type: string
      sender:
        type: integer
      senderName:
        type: string
    type: object
  database.Payment:
    properties:
      amount:
        type: integer
      authorizedBy:
        type: string
      id:
        type: integer
      isPayoutFor:
        description: Connected payout payment
        items:
          $ref: '#/definitions/database.Payment'
        type: array
      isSale:
        type: boolean
      item:
        type: integer
      order:
        type: integer
      orderEntry:
        type: integer
      payout:
        description: Connected payout payment
        type: integer
      price:
        description: Price at time of purchase in cents
        type: integer
      quantity:
        type: integer
      receiver:
        type: integer
      receiverName:
        allOf:
        - $ref: '#/definitions/null.String'
        description: JOIN from Receiver Account
      sender:
        type: integer
      senderName:
        allOf:
        - $ref: '#/definitions/null.String'
        description: JOIN from Sender Account
      timestamp:
        type: string
    type: object
  database.Settings:
    properties:
      color:
        type: string
      fontColor:
        type: string
      id:
        type: integer
      logo:
        type: string
      mainItem:
        type: integer
      mainItemDescription:
        $ref: '#/definitions/null.String'
      mainItemImage:
        $ref: '#/definitions/null.String'
      mainItemName:
        $ref: '#/definitions/null.String'
      mainItemPrice:
        $ref: '#/definitions/null.Int'
      maxOrderAmount:
        type: integer
      orgaCoversTransactionCosts:
        type: boolean
    type: object
  database.Vendor:
    properties:
      address:
        type: string
      balance:
        description: This is joined in from the account
        type: integer
      comment:
        type: string
      email:
        type: string
      firstName:
        type: string
      hasBankAccount:
        type: boolean
      hasSmartphone:
        type: boolean
      id:
        type: integer
      isDisabled:
        type: boolean
      keycloakID:
        type: string
      language:
        type: string
      lastName:
        type: string
      lastPayout:
        format: date-time
        type: string
      latitude:
        type: number
      licenseID:
        $ref: '#/definitions/null.String'
      location:
        type: string
      longitude:
        type: number
      onlineMap:
        type: boolean
      plz:
        type: string
      registrationDate:
        type: string
      telephone:
        type: string
      urlID:
        description: This is used for the QR code
        type: string
      vendorSince:
        type: string
      workingTime:
        type: string
    type: object
  handlers.ItemStatistics:
    properties:
      id:
        type: integer
      name:
        type: string
      sumAmount:
        type: integer
      sumQuantity:
        type: integer
    type: object
  handlers.PaymentsStatistics:
    properties:
      from:
        type: string
      items:
        items:
          $ref: '#/definitions/handlers.ItemStatistics'
        type: array
      to:
        type: string
    type: object
  handlers.VendorOverview:
    properties:
      address:
        type: string
      balance:
        type: integer
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      lastPayout:
        format: date-time
        type: string
      licenseID:
        type: string
      location:
        type: string
      openPayments:
        items:
          $ref: '#/definitions/database.Payment'
        type: array
      plz:
        type: string
      telephone:
        type: string
      urlID:
        type: string
    type: object
  handlers.VerifyPaymentOrderResponse:
    properties:
      firstName:
        type: string
      purchasedItems:
        items:
          $ref: '#/definitions/database.OrderEntry'
        type: array
      timeStamp:
        type: string
      totalSum:
        type: integer
    type: object
  handlers.createOrderRequest:
    properties:
      customerEmail:
        $ref: '#/definitions/null.String'
      entries:
        items:
          $ref: '#/definitions/handlers.createOrderRequestEntry'
        type: array
      user:
        type: string
      vendorLicenseID:
        type: string
    type: object
  handlers.createOrderRequestEntry:
    properties:
      item:
        type: integer
      quantity:
        type: integer
    type: object
  handlers.createOrderResponse:
    properties:
      smartCheckoutURL:
        type: string
    type: object
  handlers.createPaymentPayoutRequest:
    properties:
      from:
        type: string
      to:
        type: string
      vendorLicenseID:
        type: string
    type: object
  handlers.createPaymentsRequest:
    properties:
      payments:
        items:
          $ref: '#/definitions/database.Payment'
        type: array
    type: object
  null.Int:
    properties:
      int64:
        type: integer
      valid:
        description: Valid is true if Int64 is not NULL
        type: boolean
    type: object
  null.String:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  paymentprovider.EventData:
    properties:
      acquirerApproved:
        type: boolean
      amount:
        type: number
      assignedMerchantUsers:
        items: {}
        type: array
      assignedResellerUsers:
        items: {}
        type: array
      authorizationID:
        type: string
      bankID:
        type: string
      billID: {}
      binID:
        type: integer
      cardCountryCode:
        type: string
      cardExpirationDate:
        type: string
      cardIssuingBank:
        type: string
      cardNumber:
        type: string
      cardToken:
        type: string
      cardTypeID:
        type: integer
      cardUniqueReference:
        type: string
      channelID:
        type: string
      clearanceDate: {}
      companyName:
        type: string
      companyTitle:
        type: string
      connectedAccountID: {}
      currencyCode:
        type: string
      currentInstallment:
        type: integer
      customerTrns:
        type: string
      digitalWalletID: {}
      dualMessage:
        type: boolean
      electronicCommerceIndicator:
        type: string
      email:
        type: string
      externalTransactionID: {}
      fullName:
        type: string
      insDate:
        type: string
      isManualRefund:
        type: boolean
      latitude: {}
      longitude: {}
      loyaltyTriggered:
        type: boolean
      merchantCategoryCode:
        type: integer
      merchantID:
        type: string
      merchantTrns:
        type: string
      moto:
        type: boolean
      orderCode:
        type: integer
      orderCulture:
        type: string
      orderServiceID:
        type: integer
      panEntryMode:
        type: string
      parentID: {}
      phone:
        type: string
      productID: {}
      redeemedAmount:
        type: number
      referenceNumber:
        type: integer
      resellerCompanyName: {}
      resellerID: {}
      resellerSourceAddress: {}
      resellerSourceCode: {}
      resellerSourceName: {}
      responseCode:
        type: string
      responseEventID: {}
      retrievalReferenceNumber:
        type: string
      serviceID: {}
      sourceCode:
        type: string
      sourceName:
        type: string
      statusID:
        type: string
      switching:
        type: boolean
      systemic:
        type: boolean
      tags:
        items:
          type: string
        type: array
      targetPersonID: {}
      targetWalletID: {}
      terminalID:
        type: integer
      tipAmount:
        type: number
      totalFee:
        type: number
      totalInstallments:
        type: integer
      transactionID:
        type: string
      transactionTypeID:
        type: integer
      ucaf:
        type: string
    type: object
  paymentprovider.PriceEventData:
    properties:
      CurrencyCode:
        type: string
      Interchange:
        type: number
      IsvFee:
        type: number
      MerchantId:
        type: string
      OrderCode:
        type: integer
      ResellerId: {}
      TotalCommission:
        type: number
      TransactionId:
        type: string
    type: object
  paymentprovider.TransactionPriceRequest:
    properties:
      CorrelationId:
        type: string
      Created:
        type: string
      Delay: {}
      EventData:
        $ref: '#/definitions/paymentprovider.PriceEventData'
      EventTypeId:
        type: integer
      MessageId:
        type: string
      MessageTypeId:
        type: integer
      RecipientId:
        type: string
      Url:
        type: string
    type: object
  paymentprovider.TransactionSuccessRequest:
    properties:
      CorrelationId:
        type: string
      Created:
        type: string
      Delay: {}
      EventData:
        $ref: '#/definitions/paymentprovider.EventData'
      EventTypeId:
        type: integer
      MessageId:
        type: string
      MessageTypeId:
        type: integer
      RecipientId:
        type: string
      Url:
        type: string
    type: object
  paymentprovider.VivaWalletVerificationKeyResponse:
    properties:
      key:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This swagger describes every endpoint of this project.
  license:
    name: GNU Affero General Public License
    url: https://www.gnu.org/licenses/agpl-3.0.txt
  termsOfService: http://swagger.io/terms/
  title: Augustin Swagger
  version: 0.0.1
paths:
  /auth/hello/:
    get:
      consumes:
      - application/json
      description: Return HelloWorld as sample API call
      produces:
      - application/json
      responses: {}
      security:
      - KeycloakAuth: []
      summary: Return HelloWorld
      tags:
      - Core
  /hello/:
    get:
      consumes:
      - application/json
      description: Return HelloWorld as sample API call
      produces:
      - application/json
      responses: {}
      summary: Return HelloWorld
      tags:
      - Core
  /items/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Item'
            type: array
      summary: List Items
      tags:
      - Items
    post:
      consumes:
      - application/json
      parameters:
      - description: Item Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - KeycloakAuth: []
      summary: Create Item
      tags:
      - Items
  /items/{id}/:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Delete Item
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Requires multipart form (for image)
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Update Item
      tags:
      - Items
  /items/backoffice:
    get:
      consumes:
      - application/json
      parameters:
      - description: No donation and transaction cost items
        in: query
        name: skipHiddenItems
        type: boolean
      - description: No license items
        in: query
        name: skipLicenses
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Item'
            type: array
      security:
      - KeycloakAuth: []
      summary: List Items for backoffice overview
      tags:
      - Items
  /map/:
    get:
      consumes:
      - application/json
      description: Get longitudes and latitudes of all vendors for online map
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.LocationData'
            type: array
      security:
      - KeycloakAuth: []
      summary: Get longitudes and latitudes of all vendors for online map
      tags:
      - Map
  /orders/:
    post:
      consumes:
      - application/json
      description: Submits payment order to provider & saves it to database. Entries
        need to have an item id and a quantity (for entries without a price like tips,
        the quantity is the amount of cents). If no user is given, the order is anonymous.
      parameters:
      - description: Payment Order
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.createOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.createOrderResponse'
      summary: Create Payment Order
      tags:
      - Orders
  /orders/verify/:
    get:
      consumes:
      - application/json
      description: Verifies order and creates payments
      parameters:
      - description: Order Code
        format: "3043685539722561"
        in: query
        name: s
        required: true
        type: string
      - description: Transaction ID
        format: 882d641c-01cc-442f-b894-2b51250340b5
        in: query
        name: t
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.VerifyPaymentOrderResponse'
      summary: Verify Payment Order
      tags:
      - Orders
  /payments/:
    get:
      consumes:
      - application/json
      description: Filter by date, vendor, payouts, sales. If payouts set true, all
        payments are removed that are not payouts. Same for sales. So sales and payouts
        can't be true at the same time.
      parameters:
      - description: Minimum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: from
        type: string
      - description: Maximum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: to
        type: string
      - description: Vendor LicenseID
        in: query
        name: vendor
        type: string
      - description: Payouts only
        in: query
        name: payouts
        type: boolean
      - description: Sales only
        in: query
        name: sales
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Payment'
            type: array
      security:
      - KeycloakAuth: []
      - KeycloakAuth: []
      summary: Get list of all payments
      tags:
      - Payments
    post:
      consumes:
      - application/json
      description: 'TODO: This handler is not working right now and to be done for
        manually setting payments'
      parameters:
      - description: Create Payment
        in: body
        name: amount
        required: true
        schema:
          $ref: '#/definitions/handlers.createPaymentsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - KeycloakAuth: []
      summary: Create a set of payments
      tags:
      - Payments
  /payments/forpayout/:
    get:
      consumes:
      - application/json
      description: Payments that do not have an associated payout
      parameters:
      - description: Minimum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: from
        type: string
      - description: Maximum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: to
        type: string
      - description: Vendor LicenseID
        in: query
        name: vendor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Payment'
            type: array
      security:
      - KeycloakAuth: []
      - KeycloakAuth: []
      summary: Get list of all payments for payout
      tags:
      - Payments
  /payments/payout/:
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Payment
        in: body
        name: amount
        required: true
        schema:
          $ref: '#/definitions/handlers.createPaymentPayoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - KeycloakAuth: []
      summary: Create a payment from a vendor account to cash
      tags:
      - Payments
  /payments/statistics/:
    get:
      consumes:
      - application/json
      description: Filter by date, get statistical information, sorted by item.
      parameters:
      - description: Minimum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: from
        type: string
      - description: Maximum date (RFC3339, UTC)
        example: "2006-01-02T15:04:05Z"
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PaymentsStatistics'
            type: array
      security:
      - KeycloakAuth: []
      - KeycloakAuth: []
      summary: Calculate statistics of items & payments
      tags:
      - Payments
  /settings/:
    get:
      consumes:
      - application/json
      description: Return configuration data of the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Settings'
            type: array
      summary: Return settings
      tags:
      - Core
    put:
      consumes:
      - application/json
      description: Update configuration data of the system. Requires multipart form.
        Logo has to be a png and will always be saved under "img/logo.png"
      parameters:
      - description: Settings Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Update settings
      tags:
      - Core
  /vendors/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Vendor'
            type: array
      security:
      - KeycloakAuth: []
      summary: List Vendors
      tags:
      - Vendors
    post:
      consumes:
      - application/json
      parameters:
      - description: Vendor Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Vendor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Create Vendor
      tags:
      - Vendors
  /vendors/{id}/:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Delete Vendor
      tags:
      - Vendors
    get:
      consumes:
      - application/json
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Get Vendor
      tags:
      - Vendors
    put:
      consumes:
      - application/json
      description: 'Warning: Unfilled fields will be set to default values'
      parameters:
      - description: Vendor ID
        in: path
        name: id
        required: true
        type: integer
      - description: Vendor Representation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/database.Vendor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - KeycloakAuth: []
      summary: Update Vendor
      tags:
      - Vendors
  /vendors/check/{licenseID}/:
    get:
      consumes:
      - application/json
      description: Check if license id exists, return first name of vendor if it does
      parameters:
      - description: License ID
        in: path
        name: licenseID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Check for license id
      tags:
      - Vendors
  /vendors/me/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.VendorOverview'
      security:
      - KeycloakAuth: []
      summary: Get Vendor overview
      tags:
      - Vendors
  /webhooks/vivawallet/failure/:
    get:
      consumes:
      - application/json
      description: Return VivaWallet verification key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/paymentprovider.VivaWalletVerificationKeyResponse'
            type: array
      summary: Return VivaWallet verification key
      tags:
      - VivaWallet Webhooks
    post:
      consumes:
      - application/json
      description: Webhook for VivaWallet failed transaction
      parameters:
      - description: Payment Failure Response
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/paymentprovider.TransactionSuccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Webhook for VivaWallet failed transaction
      tags:
      - VivaWallet Webhooks
  /webhooks/vivawallet/price/:
    get:
      consumes:
      - application/json
      description: Return VivaWallet verification key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/paymentprovider.VivaWalletVerificationKeyResponse'
            type: array
      summary: Return VivaWallet verification key
      tags:
      - VivaWallet Webhooks
    post:
      consumes:
      - application/json
      description: Webhook for VivaWallet transaction prices
      parameters:
      - description: Payment Price Response
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/paymentprovider.TransactionPriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Webhook for VivaWallet transaction prices
      tags:
      - VivaWallet Webhooks
  /webhooks/vivawallet/success/:
    get:
      consumes:
      - application/json
      description: Return VivaWallet verification key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/paymentprovider.VivaWalletVerificationKeyResponse'
            type: array
      summary: Return VivaWallet verification key
      tags:
      - VivaWallet Webhooks
    post:
      consumes:
      - application/json
      description: Webhook for VivaWallet successful transaction
      parameters:
      - description: Payment Successful Response
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/paymentprovider.TransactionSuccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Webhook for VivaWallet successful transaction
      tags:
      - VivaWallet Webhooks
securityDefinitions:
  BasicAuth:
    type: basic
  KeycloakAuth:
    description: <b>how to generate an api key</b> <br/><br/><code>curl -d 'client_id=frontend'
      -d 'scope=openid' -d 'username=test_superuser' -d 'password=Test123!' -d 'grant_type=password'
      'http://keycloak:8080/realms/augustin/protocol/openid-connect/token' |     python3
      -m json.tool | grep access_token</code><br/><br/><br/>Insert the output into
      the field below the value of the access_token field.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
