// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "GNU Affero General Public License",
            "url": "https://www.gnu.org/licenses/agpl-3.0.txt"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/hello/": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "Return HelloWorld as sample API call",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Return HelloWorld",
                "responses": {}
            }
        },
        "/hello/": {
            "get": {
                "description": "Return HelloWorld as sample API call",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Return HelloWorld",
                "responses": {}
            }
        },
        "/items/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "List Items",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Item"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Create Item",
                "parameters": [
                    {
                        "description": "Item Representation",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/items/backoffice": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "List Items for backoffice overview",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "No donation and transaction cost items",
                        "name": "skipHiddenItems",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "No license items",
                        "name": "skipLicenses",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Item"
                            }
                        }
                    }
                }
            }
        },
        "/items/{id}/": {
            "put": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "Requires multipart form (for image)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Update Item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item Representation",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Delete Item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/map/": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "Get longitudes and latitudes of all vendors for online map",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Map"
                ],
                "summary": "Get longitudes and latitudes of all vendors for online map",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.LocationData"
                            }
                        }
                    }
                }
            }
        },
        "/orders/": {
            "post": {
                "description": "Submits payment order to provider \u0026 saves it to database. Entries need to have an item id and a quantity (for entries without a price like tips, the quantity is the amount of cents). If no user is given, the order is anonymous.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create Payment Order",
                "parameters": [
                    {
                        "description": "Payment Order",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.createOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.createOrderResponse"
                        }
                    }
                }
            }
        },
        "/orders/verify/": {
            "get": {
                "description": "Verifies order and creates payments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Verify Payment Order",
                "parameters": [
                    {
                        "type": "string",
                        "format": "3043685539722561",
                        "description": "Order Code",
                        "name": "s",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "882d641c-01cc-442f-b894-2b51250340b5",
                        "description": "Transaction ID",
                        "name": "t",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyPaymentOrderResponse"
                        }
                    }
                }
            }
        },
        "/payments/": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    },
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "Filter by date, vendor, payouts, sales. If payouts set true, all payments are removed that are not payouts. Same for sales. So sales and payouts can't be true at the same time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Get list of all payments",
                "parameters": [
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Minimum date (RFC3339, UTC)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Maximum date (RFC3339, UTC)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Vendor LicenseID",
                        "name": "vendor",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Payouts only",
                        "name": "payouts",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Sales only",
                        "name": "sales",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Payment"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "TODO: This handler is not working right now and to be done for manually setting payments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Create a set of payments",
                "parameters": [
                    {
                        "description": "Create Payment",
                        "name": "amount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.createPaymentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/payments/forpayout/": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    },
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "Payments that do not have an associated payout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Get list of all payments for payout",
                "parameters": [
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Minimum date (RFC3339, UTC)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2006-01-02T15:04:05Z",
                        "description": "Maximum date (RFC3339, UTC)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Vendor LicenseID",
                        "name": "vendor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Payment"
                            }
                        }
                    }
                }
            }
        },
        "/payments/payout/": {
            "post": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Create a payment from a vendor account to cash",
                "parameters": [
                    {
                        "description": "Create Payment",
                        "name": "amount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.createPaymentPayoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/settings/": {
            "get": {
                "description": "Return configuration data of the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Return settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Settings"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "Update configuration data of the system. Requires multipart form. Logo has to be a png and will always be saved under \"img/logo.png\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Update settings",
                "parameters": [
                    {
                        "description": "Settings Representation",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/vendors/": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "List Vendors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Vendor"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Create Vendor",
                "parameters": [
                    {
                        "description": "Vendor Representation",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.Vendor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/vendors/check/{licenseID}/": {
            "get": {
                "description": "Check if license id exists, return first name of vendor if it does",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Check for license id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "License ID",
                        "name": "licenseID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/vendors/me/": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Get Vendor overview",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.VendorOverview"
                        }
                    }
                }
            }
        },
        "/vendors/{id}/": {
            "get": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Get Vendor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vendor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "description": "Warning: Unfilled fields will be set to default values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Update Vendor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vendor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vendor Representation",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.Vendor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "KeycloakAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Delete Vendor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vendor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/webhooks/vivawallet/failure/": {
            "get": {
                "description": "Return VivaWallet verification key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VivaWallet Webhooks"
                ],
                "summary": "Return VivaWallet verification key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/paymentprovider.VivaWalletVerificationKeyResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Webhook for VivaWallet failed transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VivaWallet Webhooks"
                ],
                "summary": "Webhook for VivaWallet failed transaction",
                "parameters": [
                    {
                        "description": "Payment Failure Response",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paymentprovider.TransactionSuccessRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/webhooks/vivawallet/price/": {
            "get": {
                "description": "Return VivaWallet verification key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VivaWallet Webhooks"
                ],
                "summary": "Return VivaWallet verification key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/paymentprovider.VivaWalletVerificationKeyResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Webhook for VivaWallet transaction prices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VivaWallet Webhooks"
                ],
                "summary": "Webhook for VivaWallet transaction prices",
                "parameters": [
                    {
                        "description": "Payment Price Response",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paymentprovider.TransactionPriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/webhooks/vivawallet/success/": {
            "get": {
                "description": "Return VivaWallet verification key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VivaWallet Webhooks"
                ],
                "summary": "Return VivaWallet verification key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/paymentprovider.VivaWalletVerificationKeyResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Webhook for VivaWallet successful transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "VivaWallet Webhooks"
                ],
                "summary": "Webhook for VivaWallet successful transaction",
                "parameters": [
                    {
                        "description": "Payment Successful Response",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paymentprovider.TransactionSuccessRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "database.Item": {
            "type": "object",
            "properties": {
                "archived": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "isLicenseItem": {
                    "type": "boolean"
                },
                "licenseItem": {
                    "description": "License has to be bought before item",
                    "allOf": [
                        {
                            "$ref": "#/definitions/null.Int"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "description": "Price in cents",
                    "type": "integer"
                }
            }
        },
        "database.LocationData": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "licenseID": {
                    "$ref": "#/definitions/null.String"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "database.OrderEntry": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "isSale": {
                    "description": "Whether to include this item in sales payment",
                    "type": "boolean"
                },
                "item": {
                    "type": "integer"
                },
                "price": {
                    "description": "Price at time of purchase in cents",
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "integer"
                },
                "receiverName": {
                    "type": "string"
                },
                "sender": {
                    "type": "integer"
                },
                "senderName": {
                    "type": "string"
                }
            }
        },
        "database.Payment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "authorizedBy": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isPayoutFor": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Payment"
                    }
                },
                "isSale": {
                    "type": "boolean"
                },
                "item": {
                    "type": "integer"
                },
                "order": {
                    "type": "integer"
                },
                "orderEntry": {
                    "type": "integer"
                },
                "payout": {
                    "description": "Connected payout payment",
                    "type": "integer"
                },
                "price": {
                    "description": "Price at time of purchase in cents",
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "integer"
                },
                "receiverName": {
                    "description": "JOIN from Receiver Account",
                    "type": "string"
                },
                "sender": {
                    "type": "integer"
                },
                "senderName": {
                    "description": "JOIN from Sender Account",
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "database.Settings": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "fontColor": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "logo": {
                    "type": "string"
                },
                "mainItem": {
                    "type": "integer"
                },
                "mainItemDescription": {
                    "$ref": "#/definitions/null.String"
                },
                "mainItemImage": {
                    "$ref": "#/definitions/null.String"
                },
                "mainItemName": {
                    "$ref": "#/definitions/null.String"
                },
                "mainItemPrice": {
                    "$ref": "#/definitions/null.Int"
                },
                "maxOrderAmount": {
                    "type": "integer"
                },
                "orgaCoversTransactionCosts": {
                    "type": "boolean"
                }
            }
        },
        "database.Vendor": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "description": "This is joined in from the account",
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "hasBankAccount": {
                    "type": "boolean"
                },
                "hasSmartphone": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "isDisabled": {
                    "type": "boolean"
                },
                "keycloakID": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "lastPayout": {
                    "type": "string",
                    "format": "date-time"
                },
                "latitude": {
                    "type": "number"
                },
                "licenseID": {
                    "$ref": "#/definitions/null.String"
                },
                "location": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "onlineMap": {
                    "type": "boolean"
                },
                "plz": {
                    "type": "string"
                },
                "registrationDate": {
                    "type": "string"
                },
                "telephone": {
                    "type": "string"
                },
                "urlID": {
                    "description": "This is used for the QR code",
                    "type": "string"
                },
                "vendorSince": {
                    "type": "string"
                },
                "workingTime": {
                    "type": "string"
                }
            }
        },
        "handlers.VendorOverview": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "lastPayout": {
                    "type": "string",
                    "format": "date-time"
                },
                "licenseID": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "openPayments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Payment"
                    }
                },
                "plz": {
                    "type": "string"
                },
                "telephone": {
                    "type": "string"
                },
                "urlID": {
                    "type": "string"
                }
            }
        },
        "handlers.VerifyPaymentOrderResponse": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "purchasedItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.OrderEntry"
                    }
                },
                "timeStamp": {
                    "type": "string"
                },
                "totalSum": {
                    "type": "integer"
                }
            }
        },
        "handlers.createOrderRequest": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.createOrderRequestEntry"
                    }
                },
                "user": {
                    "type": "string"
                },
                "vendorLicenseID": {
                    "type": "string"
                }
            }
        },
        "handlers.createOrderRequestEntry": {
            "type": "object",
            "properties": {
                "item": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "handlers.createOrderResponse": {
            "type": "object",
            "properties": {
                "smartCheckoutURL": {
                    "type": "string"
                }
            }
        },
        "handlers.createPaymentPayoutRequest": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "vendorLicenseID": {
                    "type": "string"
                }
            }
        },
        "handlers.createPaymentsRequest": {
            "type": "object",
            "properties": {
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Payment"
                    }
                }
            }
        },
        "null.Int": {
            "type": "object",
            "properties": {
                "int64": {
                    "type": "integer"
                },
                "valid": {
                    "description": "Valid is true if Int64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "null.String": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "paymentprovider.EventData": {
            "type": "object",
            "properties": {
                "acquirerApproved": {
                    "type": "boolean"
                },
                "amount": {
                    "type": "number"
                },
                "assignedMerchantUsers": {
                    "type": "array",
                    "items": {}
                },
                "assignedResellerUsers": {
                    "type": "array",
                    "items": {}
                },
                "authorizationID": {
                    "type": "string"
                },
                "bankID": {
                    "type": "string"
                },
                "billID": {},
                "binID": {
                    "type": "integer"
                },
                "cardCountryCode": {
                    "type": "string"
                },
                "cardExpirationDate": {
                    "type": "string"
                },
                "cardIssuingBank": {
                    "type": "string"
                },
                "cardNumber": {
                    "type": "string"
                },
                "cardToken": {
                    "type": "string"
                },
                "cardTypeID": {
                    "type": "integer"
                },
                "cardUniqueReference": {
                    "type": "string"
                },
                "channelID": {
                    "type": "string"
                },
                "clearanceDate": {},
                "companyName": {
                    "type": "string"
                },
                "companyTitle": {
                    "type": "string"
                },
                "connectedAccountID": {},
                "currencyCode": {
                    "type": "string"
                },
                "currentInstallment": {
                    "type": "integer"
                },
                "customerTrns": {
                    "type": "string"
                },
                "digitalWalletID": {},
                "dualMessage": {
                    "type": "boolean"
                },
                "electronicCommerceIndicator": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "externalTransactionID": {},
                "fullName": {
                    "type": "string"
                },
                "insDate": {
                    "type": "string"
                },
                "isManualRefund": {
                    "type": "boolean"
                },
                "latitude": {},
                "longitude": {},
                "loyaltyTriggered": {
                    "type": "boolean"
                },
                "merchantCategoryCode": {
                    "type": "integer"
                },
                "merchantID": {
                    "type": "string"
                },
                "merchantTrns": {
                    "type": "string"
                },
                "moto": {
                    "type": "boolean"
                },
                "orderCode": {
                    "type": "integer"
                },
                "orderCulture": {
                    "type": "string"
                },
                "orderServiceID": {
                    "type": "integer"
                },
                "panEntryMode": {
                    "type": "string"
                },
                "parentID": {},
                "phone": {
                    "type": "string"
                },
                "productID": {},
                "redeemedAmount": {
                    "type": "number"
                },
                "referenceNumber": {
                    "type": "integer"
                },
                "resellerCompanyName": {},
                "resellerID": {},
                "resellerSourceAddress": {},
                "resellerSourceCode": {},
                "resellerSourceName": {},
                "responseCode": {
                    "type": "string"
                },
                "responseEventID": {},
                "retrievalReferenceNumber": {
                    "type": "string"
                },
                "serviceID": {},
                "sourceCode": {
                    "type": "string"
                },
                "sourceName": {
                    "type": "string"
                },
                "statusID": {
                    "type": "string"
                },
                "switching": {
                    "type": "boolean"
                },
                "systemic": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "targetPersonID": {},
                "targetWalletID": {},
                "terminalID": {
                    "type": "integer"
                },
                "tipAmount": {
                    "type": "number"
                },
                "totalFee": {
                    "type": "number"
                },
                "totalInstallments": {
                    "type": "integer"
                },
                "transactionID": {
                    "type": "string"
                },
                "transactionTypeID": {
                    "type": "integer"
                },
                "ucaf": {
                    "type": "string"
                }
            }
        },
        "paymentprovider.PriceEventData": {
            "type": "object",
            "properties": {
                "CurrencyCode": {
                    "type": "string"
                },
                "Interchange": {
                    "type": "number"
                },
                "IsvFee": {
                    "type": "number"
                },
                "MerchantId": {
                    "type": "string"
                },
                "OrderCode": {
                    "type": "integer"
                },
                "ResellerId": {},
                "TotalCommission": {
                    "type": "number"
                },
                "TransactionId": {
                    "type": "string"
                }
            }
        },
        "paymentprovider.TransactionPriceRequest": {
            "type": "object",
            "properties": {
                "CorrelationId": {
                    "type": "string"
                },
                "Created": {
                    "type": "string"
                },
                "Delay": {},
                "EventData": {
                    "$ref": "#/definitions/paymentprovider.PriceEventData"
                },
                "EventTypeId": {
                    "type": "integer"
                },
                "MessageId": {
                    "type": "string"
                },
                "MessageTypeId": {
                    "type": "integer"
                },
                "RecipientId": {
                    "type": "string"
                },
                "Url": {
                    "type": "string"
                }
            }
        },
        "paymentprovider.TransactionSuccessRequest": {
            "type": "object",
            "properties": {
                "CorrelationId": {
                    "type": "string"
                },
                "Created": {
                    "type": "string"
                },
                "Delay": {},
                "EventData": {
                    "$ref": "#/definitions/paymentprovider.EventData"
                },
                "EventTypeId": {
                    "type": "integer"
                },
                "MessageId": {
                    "type": "string"
                },
                "MessageTypeId": {
                    "type": "integer"
                },
                "RecipientId": {
                    "type": "string"
                },
                "Url": {
                    "type": "string"
                }
            }
        },
        "paymentprovider.VivaWalletVerificationKeyResponse": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "KeycloakAuth": {
            "description": "\u003cb\u003ehow to generate an api key\u003c/b\u003e \u003cbr/\u003e\u003cbr/\u003e\u003ccode\u003ecurl -d 'client_id=frontend' -d 'scope=openid' -d 'username=test_superuser' -d 'password=Test123!' -d 'grant_type=password' 'http://keycloak:8080/realms/augustin/protocol/openid-connect/token' |     python3 -m json.tool | grep access_token\u003c/code\u003e\u003cbr/\u003e\u003cbr/\u003e\u003cbr/\u003eInsert the output into the field below the value of the access_token field.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:3000",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Augustin Swagger",
	Description:      "This swagger describes every endpoint of this project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
